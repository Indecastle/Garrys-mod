--@name renderView Tracer
--@author Derpius
--@shared
--@model models/weapons/c_models/c_8mm_camera/c_8mm_camera.mdl

if SERVER then

net.receive("uploadRender", function()
    net.readStream(function(data)
        print("Server received render, distributing...")
        net.start("downloadRender")
        net.writeStream(data, true)
        net.send()
    end)
end)

else

function yield(percent)
    percent = percent or 0.2
    if quotaTotalUsed()/quotaMax() >= percent or quotaTotalAverage()/quotaMax() >= percent then coroutine.yield() end
end

render.createRenderTarget("mainRT")

if player() ~= owner() then
    local stream = ""

    function drawStreamToRT()
        local img = string.explode(" ", stream)
        local width, height = tonumber(table.remove(img, 1)), tonumber(table.remove(img, 1))
        img = string.implode(" ", img)
        
        local scale = 1
        if width >= height then
            scale = 1024/width
        else
            scale = 1024/height
        end
        
        for y = 1, height do
            for x = 1, width do
                yield(0.9)
                
                local startPointer = ((y - 1)*width + x - 1) * 3 + 1
                
                local colour = Color(string.byte(img, startPointer, startPointer + 2))
                render.setColor(colour)
                render.drawRect((x - 1)*scale, (y - 1)*scale, scale, scale)
            end
        end
    end
    
    local co = coroutine.create(drawStreamToRT)

    net.receive("downloadRender", function()
        net.readStream(function(data)
            stream = data
            co = coroutine.create(drawStreamToRT)
        end)
    end)
    
    hook.add("renderoffscreen", "drawRT", function()
        if coroutine.status(co) == "suspended" and stream ~= "" then
            render.selectRenderTarget("mainRT")
            coroutine.resume(co)
            render.selectRenderTarget()
        elseif coroutine.status(co) == "dead" then
            co = coroutine.create(drawStreamToRT)
            stream = ""
        end
    end)
    
    hook.add("render", "renderLoop", function()
        local resX, resY = render.getResolution()
        render.setRenderTargetTexture("mainRT")
        render.drawTexturedRect(0, 0, resX, resY)
    end)
else
    EPSILON = 2.22044604925031308e-16
    
    --@include ./pfm_reader.txt
    --@include ./classes.txt
    --@include ./chat_commands.txt
    
    RENDERVIEW = ""

    render.createRenderTarget("renderview")
    
    function getPixel(x, y)
        local pntr = (y * CAM.res.x + x) * 3 + 1
        return Vector(string.byte(RENDERVIEW, pntr, pntr + 2))/255
    end
    
    function writePixel(colour)
        local r, g, b = math.round(colour.r), math.round(colour.g), math.round(colour.b)
        RENDERVIEW = RENDERVIEW..string.char(r)..string.char(g)..string.char(b)
    end
    
    function cacheRenderView(res, fov, origin, angles)
        RENDERVIEW = ""
        hook.add("renderscene", "cacherenderview", function()
            render.selectRenderTarget("renderview")
            render.renderView({
                origin = origin,
                angles = angles,
                fov = fov,
                w = res[1],
                h = res[2],
                drawviewmodel = false,
                drawviewer = true,
                drawmonitors = true,
            })
            render.capturePixels()
            
            for y = 0, res[2] - 1 do
                for x = 0, res[1] - 1 do
                    writePixel(render.readPixel(x, y))
                end
            end
            render.selectRenderTarget()
            hook.remove("renderscene", "cacherenderview")
        end)
    end
    
    -- Utility
    function reflect(I, N)
        return I - 2*N:dot(I)*N
    end
    
    function refract(I, N, ior)
        local cosI = math.clamp(-1, 1, I:dot(N))
        local etaI, etaT = 1, ior
        
        if cosI < 0 then
            cosI = -cosI
        else
            etaT, etaI = etaI, ior
            N = -N
        end
        
        local eta = etaI / etaT
        local k = 1 - eta^2 * (1 - cosI^2)
        return k < 0 and 0 or eta * I + (eta * cosI - math.sqrt(k)) * N
    end
    
    function fresnel(I, N, ior)
        local cosI = math.clamp(-1, 1, I:dot(N))
        local etaI, etaT = 1, ior
        local kr = 0
        
        if cosI > 0 then etaT, etaI = etaI, ior end
        
        local sinT = etaI / etaT * math.sqrt(math.max(0, 1 - cosI^2))
        
        if sinT >= 1 then
            kr = 1
        else
            local cosT = math.sqrt(math.max(0, 1 - sinT^2))
            cosI = math.abs(cosI)
            local Rs = ((etaT * cosI) - (etaI * cosT)) / ((etaT * cosI) + (etaI * cosT))
            local Rp = ((etaI * cosI) - (etaT * cosT)) / ((etaI * cosI) + (etaT * cosT))
            kr = (Rs^2 + Rp^2) / 2
        end
        
        return kr
    end
    
    function getPitch(N)
        if N.x == 0 and N.y == 0 then
            return math.pi/2 * math.sign(N.z)
        end
        
        return math.asin(math.abs(N.z)) * math.sign(N.z)
    end
    
    function getYaw(N)
        if N.y == 0 then
            if N.x >= 0 then return 0 end
            if N.x < 0 then return math.pi end
        end
        
        return math.acos((N*Vector(1, 1, 0)):getNormalized():dot(Vector(1, 0, 0))) * math.sign(N.y)
    end
    
    -- Import async PFM reader
    require("./pfm_reader.txt")
    
    -- Import classes
    require("./classes.txt")
    
    -- Rendering
    STATE = 0
    TRACE = nil
    
    COMPLETION = 0
    ETA = ""
    PPS = 0
    
    SCENE = {}
    STREAM = ""
    
    LIGHTS = {}
    LIGHTSFILTER = {}
    
    CAM = Camera:new(chip():getPos() + chip():getUp()*8.3 + chip():getForward()*5, chip():getAngles(), {x = 32, y = 32}, 90, 10)
    EXPOSURE = 0.3
    
    HDRI = nil
    HDRI_BRIGHTNESS = 0.05
    
    BIAS = 0.001
    
    DRAW = nil
    
    SUNDIR = game.getSunInfo()
    SUNCOLOUR = Vector(1, 1, 1)
    
    function calcViewplane(x, y)
        local coeff = CAM.planeDist*math.tan((CAM.fov/2)*(math.pi/180))*2
        local coords = Vector(
            CAM.planeDist,
            ((CAM.res.x - x)/(CAM.res.x - 1))*coeff - coeff/2,
            (coeff/CAM.res.x)*(CAM.res.y - y) - ((coeff/CAM.res.x)*(CAM.res.y - 1))/2
        )
        coords:rotate(CAM.ang)
        
        return coords + CAM.pos, coords:getNormalized()
    end
    
    function getHDRIFromVec(v)
        if not HDRI then return Vector(0.5, 1, 1) end
        
        local x, y = HDRI.width/2 + (getYaw(v)/math.pi) * HDRI.width/2, HDRI.height/2 - ((getPitch(v)*2)/math.pi) * HDRI.height/2
        local colour = HDRI.data[math.clamp(math.ceil(y), 1, HDRI.height)][math.clamp(math.ceil(x), 1, HDRI.width)]
        
        return colour * (colour*HDRI_BRIGHTNESS + Vector(1.5))
    end
    
    function shadowRay(origin, direction, lightPos)
        local data = trace.trace(origin, origin + direction * 999999, LIGHTSFILTER)
        
        if data.Hit and not data.HitSky and origin:getDistance(lightPos) > origin:getDistance(data.HitPos) then
            return 0
        end
        return 1
    end
    
    function tracePath(origin, direction, albedo)
        local data = trace.trace(origin, origin + direction * 999999, LIGHTSFILTER)
        
        if data.HitSky and HDRI then return getHDRIFromVec(direction) end
        
        local biased = data.HitPos + data.HitNormal*BIAS
        
        -- Direct illimination
        local sunTrace = trace.trace(biased, biased + SUNDIR * 999999, LIGHTSFILTER)
        local diffuseLighting = sunTrace.HitSky and SUNCOLOUR or SUNCOLOUR * 0.5
        
        for k, v in pairs(LIGHTS) do
            local L = v:getLightDir(biased)
            local Lc = v.intensity * v.colour / (v.pos:getDistance(biased) * 0.1)^1.5
            
            diffuseLighting = diffuseLighting + shadowRay(biased, -L, v.pos)*math.max(0, direction:dot(L))*Lc
        end
        
        -- Final diffuse colour
        hitColour = albedo * diffuseLighting
        
        return hitColour
    end
    
    function renderScene()
        local startTime = timer.curtime()
        
        SCENE = {}
        for y = 1, CAM.res.y do
            SCENE[y] = {}
            for x = 1, CAM.res.x do
                yield(0.8)
                
                local coords, dir = calcViewplane(x, y)
                local colour = tracePath(coords, dir, getPixel(x - 1, y - 1))
                SCENE[y][x] = Vector(
                    math.min(colour.x, 1),
                    math.min(colour.y, 1),
                    math.min(colour.z, 1)
                )
                
                COMPLETION = ((y-1)*CAM.res.x + x)/(CAM.res.y*CAM.res.x)
                local time = string.formattedTime((timer.curtime() - startTime)/COMPLETION - (timer.curtime() - startTime))
                ETA = string.format("%02i:%02i:%02i", time.h, time.m, time.s)
                PPS = (CAM.res.x*CAM.res.y)/((timer.curtime() - startTime)/COMPLETION)
            end
        end
        
        local time = string.formattedTime(timer.curtime() - startTime)
        print("Done! Completed in "..string.format("%02i:%02i:%02i", time.h, time.m, time.s))
        
        STATE = 2
    end
    
    function drawRenderToRT()
        local scale = 1
        if CAM.res.x >= CAM.res.y then
            scale = 1024/CAM.res.x
        else
            scale = 1024/CAM.res.y
        end
    
        local stream = tostring(CAM.res.x).." "..tostring(CAM.res.y).." "
        for y = 1, #SCENE do
            for x = 1, #SCENE[y] do
                yield(0.9)
                local colour = SCENE[y][x]:getColor()
                render.setColor(colour)
                render.drawRect((x - 1)*scale, (y - 1)*scale, scale, scale)
                
                stream = stream..string.char(math.round(colour.r))..string.char(math.round(colour.g))..string.char(math.round(colour.b))
            end
        end
        
        print("Sending render to server...")
        net.start("uploadRender")
        net.writeStream(stream, true)
        net.send()
        
        STATE = 3
    end
    
    frontHolo = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    rightHolo = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    upHolo = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    
    topLView = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    topRView = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    botLView = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    botRView = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    
    topLView:setColor(Color(255))
    topRView:setColor(Color(255*0.66))
    botLView:setColor(Color(255*0.33))
    botRView:setColor(Color(0))
    
    frontHolo:setColor(Color(255, 0, 0))
    rightHolo:setColor(Color(0, 255, 0))
    upHolo:setColor(Color(0, 0, 255))
    
    function startRender()
        if STATE == 1 or STATE == 2 then
            print("already rendering")
            return
        end
        
        -- Update the light positions and build filter
        LIGHTSFILTER = {}
        for k, v in pairs(LIGHTS) do
            LIGHTS[k].pos = k:getPos()
            LIGHTSFILTER[#LIGHTSFILTER + 1] = k
        end
        
        holograms.removeAll()
        
        cacheRenderView({CAM.res.x, CAM.res.y}, CAM.fov, CAM.pos, CAM.ang)
        
        frontHolo = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
        rightHolo = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
        upHolo = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
        
        topLView = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
        topRView = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
        botLView = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
        botRView = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
        
        topLView:setColor(Color(255))
        topRView:setColor(Color(255*0.66))
        botLView:setColor(Color(255*0.33))
        botRView:setColor(Color(0))
        
        frontHolo:setColor(Color(255, 0, 0))
        rightHolo:setColor(Color(0, 255, 0))
        upHolo:setColor(Color(0, 0, 255))
        
        TRACE = coroutine.create(renderScene)
        DRAW = coroutine.create(drawRenderToRT)
        STATE = 1
    end
    
    function markLight(ent, brightness, colour)
        if not isValid(ent) or ent:isPlayer() then
            print("Light invalid")
            return
        end
        
        if LIGHTS[ent] then
            print("Light already marked!")
            return
        end
        
        LIGHTS[ent] = Light:new(ent:getPos(), brightness or 5, colour or Vector(1))
        print(tostring(ent).." marked as light!")
    end
    
    hook.add("renderoffscreen", "drawRT", function()
        if STATE == 2 and coroutine.status(DRAW) == "suspended" then
            render.selectRenderTarget("mainRT")
            coroutine.resume(DRAW)
            render.selectRenderTarget()
        end
    end)
    
    hook.add("render", "renderLoop", function()
        if STATE == 0 then
            render.drawText(10, 10, "Start a render")
        elseif STATE == 1 or STATE == 2 or STATE == 3 then
            local resX, resY = render.getResolution()
            render.setRenderTargetTexture("mainRT")
            render.drawTexturedRect(0, 0, resX, resY)
        end
    end)
    
    hook.add("inputPressed", "onKeypress", function(key)
        key = input.getKeyName(key)
        
        if key == "HOME" then
            startRender()
        elseif key == "DEL" then
            local ent = player():getEyeTrace().Entity
            if LIGHTS[ent] then LIGHTS[ent] = nil; print("Light deleted") end
        end
    end)
    
    -- Import chat commands
    require("./chat_commands.txt")
    
    hook.add("think", "thinkhook", function()
        if STATE == 1 and coroutine.status(TRACE) == "suspended" then coroutine.resume(TRACE)
        elseif STATE != 1 then
            CAM.pos = chip():getPos() + chip():getUp()*8.3 + chip():getForward()*20
            CAM.ang = chip():getAngles()
            
            frontHolo:setPos(CAM.pos + CAM.ang:getForward()*10)
            rightHolo:setPos(CAM.pos + CAM.ang:getRight()*10)
            upHolo:setPos(CAM.pos + CAM.ang:getUp()*10)
            
            local coord, _ = calcViewplane(1, 1)
            topLView:setPos(coord)
            coord, _ = calcViewplane(CAM.res.x, 1)
            topRView:setPos(coord)
            coord, _ = calcViewplane(1, CAM.res.y)
            botLView:setPos(coord)
            coord, _ = calcViewplane(CAM.res.x, CAM.res.y)
            botRView:setPos(coord)
        end
    end)
end
end