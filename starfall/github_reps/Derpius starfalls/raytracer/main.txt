--@name RTX On
--@author Derpius
--@shared
--@model models/weapons/c_models/c_8mm_camera/c_8mm_camera.mdl

if SERVER then

net.receive("uploadRender", function()
    net.readStream(function(data)
        print("Server received render, distributing...")
        net.start("downloadRender")
        net.writeStream(data, true)
        net.send()
    end)
end)

end

------------------------------------------------------

if CLIENT then
function yield(percent)
    percent = percent or 0.2
    if quotaTotalUsed()/quotaMax() >= percent or quotaTotalAverage()/quotaMax() >= percent then coroutine.yield() end
end

render.createRenderTarget("mainRT")

if player() ~= owner() then
    local stream = ""

    function drawStreamToRT()
        local img = string.explode(" ", stream)
        local width, height = tonumber(table.remove(img, 1)), tonumber(table.remove(img, 1))
        img = string.implode(" ", img)
        
        local scale = 1
        if width >= height then
            scale = 1024/width
        else
            scale = 1024/height
        end
        
        for y = 1, height do
            for x = 1, width do
                yield(0.9)
                
                local startPointer = ((y - 1)*width + x - 1) * 3 + 1
                
                local colour = Color(string.byte(img, startPointer, startPointer + 2))
                render.setColor(colour)
                render.drawRect((x - 1)*scale, (y - 1)*scale, scale, scale)
            end
        end
    end
    
    local co = coroutine.create(drawStreamToRT)

    net.receive("downloadRender", function()
        net.readStream(function(data)
            stream = data
            co = coroutine.create(drawStreamToRT)
        end)
    end)
    
    hook.add("renderoffscreen", "drawRT", function()
        if coroutine.status(co) == "suspended" and stream ~= "" then
            render.selectRenderTarget("mainRT")
            coroutine.resume(co)
            render.selectRenderTarget()
        elseif coroutine.status(co) == "dead" then
            co = coroutine.create(drawStreamToRT)
            stream = ""
        end
    end)
    
    hook.add("render", "renderLoop", function()
        local resX, resY = render.getResolution()
        render.setRenderTargetTexture("mainRT")
        render.drawTexturedRect(0, 0, resX, resY)
    end)
else
    EPSILON = 2.22044604925031308e-16
    
    --@include ./pfm_reader.txt
    --@include ./classes.txt
    --@include ./chat_commands.txt
    
    -- Utility
    function uniformSampleHemisphere(r1, r2)
        local sinTheta = math.sqrt(1 - r1^2)
        local phi = 2 * math.pi * r2
        local x = sinTheta * math.cos(phi)
        local y = sinTheta * math.sin(phi)
        
        return Vector(x, r1, y)
    end
    
    function createCoordSystem(N)
        local Nt = nil
        if math.abs(N.x) > math.abs(N.y) then
            Nt = Vector(N.z, 0, -N.x) / math.sqrt(N.x*N.x + N.z*N.z)
        else
            Nt = Vector(0, -N.z, N.y) / math.sqrt(N.y*N.y + N.z*N.z)
        end
        
        return Nt, N:cross(Nt)
    end
    
    function reflect(I, N)
        return I - 2*N:dot(I)*N
    end
    
    function refract(I, N, ior)
        local cosI = math.clamp(-1, 1, I:dot(N))
        local etaI, etaT = 1, ior
        
        if cosI < 0 then
            cosI = -cosI
        else
            etaT, etaI = etaI, ior
            N = -N
        end
        
        local eta = etaI / etaT
        local k = 1 - eta^2 * (1 - cosI^2)
        return k < 0 and 0 or eta * I + (eta * cosI - math.sqrt(k)) * N
    end
    
    function fresnel(I, N, ior)
        local cosI = math.clamp(-1, 1, I:dot(N))
        local etaI, etaT = 1, ior
        local kr = 0
        
        if cosI > 0 then etaT, etaI = etaI, ior end
        
        local sinT = etaI / etaT * math.sqrt(math.max(0, 1 - cosI^2))
        
        if sinT >= 1 then
            kr = 1
        else
            local cosT = math.sqrt(math.max(0, 1 - sinT^2))
            cosI = math.abs(cosI)
            local Rs = ((etaT * cosI) - (etaI * cosT)) / ((etaT * cosI) + (etaI * cosT))
            local Rp = ((etaI * cosI) - (etaT * cosT)) / ((etaI * cosI) + (etaT * cosT))
            kr = (Rs^2 + Rp^2) / 2
        end
        
        return kr
    end
    
    function getPitch(N)
        if N.x == 0 and N.y == 0 then
            return math.pi/2 * math.sign(N.z)
        end
        
        return math.asin(math.abs(N.z)) * math.sign(N.z)
    end
    
    function getYaw(N)
        if N.y == 0 then
            if N.x >= 0 then return 0 end
            if N.x < 0 then return math.pi end
        end
        
        return math.acos((N*Vector(1, 1, 0)):getNormalized():dot(Vector(1, 0, 0))) * math.sign(N.y)
    end
    
    -- Import async PFM reader
    require("./pfm_reader.txt")
    
    -- Import classes
    require("./classes.txt")
    
    -- Rendering
    STATE = 0
    TRACE = nil
    
    COMPLETION = 0
    ETA = ""
    PPS = 0
    
    SCENE = {}
    STREAM = ""
    
    OBJS = {}
    ENTLIST = {}
    SPHERES = {}
    LIGHTS = {}
    
    CAM = Camera:new(chip():getPos() + chip():getUp()*8.3 + chip():getForward()*5, chip():getAngles(), {x = 32, y = 32}, 90, 10)
    EXPOSURE = 0.3
    
    HDRI = nil
    HDRI_BRIGHTNESS = 0.05
    
    MAXDEPTH = 2
    MAXREFLECT = 6
    MAXTRANSMIT = 4
    
    SAMPLES = 32 -- total samples per pixel is way higher depending on depth
    BIAS = 0.001
    GI = true -- toggle global illumination
    
    DRAW = nil
    
    function calcViewplane(x, y)
        local coeff = CAM.planeDist*math.tan((CAM.fov/2)*(math.pi/180))*2
        local coords = Vector(
            CAM.planeDist,
            ((CAM.res.x - x)/(CAM.res.x - 1))*coeff - coeff/2,
            (coeff/CAM.res.x)*(CAM.res.y - y) - ((coeff/CAM.res.x)*(CAM.res.y - 1))/2
        )
        coords:rotate(CAM.ang)
        
        return coords + CAM.pos, coords:getNormalized()
    end
    
    function getHDRIFromVec(v)
        if not HDRI then return Vector(0) end
        
        local x, y = HDRI.width/2 + (getYaw(v)/math.pi) * HDRI.width/2, HDRI.height/2 - ((getPitch(v)*2)/math.pi) * HDRI.height/2
        local colour = HDRI.data[math.clamp(math.ceil(y), 1, HDRI.height)][math.clamp(math.ceil(x), 1, HDRI.width)]
        
        return colour * (colour*HDRI_BRIGHTNESS + Vector(1.5))
    end
    
    function shadowRay(origin, direction, lightPos)
        --local ray = Ray:new(origin, direction)
        --ray:trace(OBJS, SPHERES)
        local data = vistrace.trace(origin, direction, ENTLIST)
        
        if data.hit and origin:getDistance(lightPos) > origin:getDistance(data.hitPos) then
            return 0
        end
        return 1
    end
    
    function tracePath(origin, direction, indirect, reflections, transmit)
        if indirect > MAXDEPTH or reflections > MAXREFLECT or transmit > MAXTRANSMIT then return Vector(0) end
        
        --local ray = Ray:new(origin, direction)
        --ray:trace(OBJS, SPHERES)
        local data = vistrace.trace(origin, direction, ENTLIST)
        
        --if not ray.hit then return getHDRIFromVec(direction) end
        if not data.hit then return getHDRIFromVec(direction) end
        
        local biased = data.hitPos + data.hitNormal*BIAS
        local colour = Vector(0)
        
        if data.reflectance < 1 and data.alpha == 1 then
            -- Direct illimination
            local directLighting = Vector(0)
            
            for k, v in pairs(LIGHTS) do
                local L = v:getLightDir(biased)
                local Lc = v.intensity * v.colour
                
                directLighting = directLighting + shadowRay(biased, -L, v.pos)*math.max(0, direction:dot(L))*Lc
            end
            
            -- Indirect illumination
            local indirectLighting = Vector(0)
            
            if GI and indirect + 1 <= MAXDEPTH then
                local Nt, Nb = createCoordSystem(data.hitNormal)
                local pdf = 1/(2 * math.pi)
                
                local adjSamples = math.floor(SAMPLES/(indirect^2))
                for n = 1, adjSamples do
                    yield(0.9)
                    
                    local r1 = math.random()
                    local r2 = math.random()
                    sample = uniformSampleHemisphere(r1, r2)
                    
                    sampleWorld = Vector(
                        sample.x * Nb.x + sample.y * data.hitNormal.x + sample.z * Nt.x, 
                        sample.x * Nb.y + sample.y * data.hitNormal.y + sample.z * Nt.y, 
                        sample.x * Nb.z + sample.y * data.hitNormal.z + sample.z * Nt.z
                    )
                    
                    -- if NaN just redo sample. Yes I know this is a dirty fix
                    if sampleWorld.x ~= sampleWorld.x then
                        n = n - 1
                        continue
                    end
                    
                    indirectLighting = indirectLighting + r1*tracePath(biased + sampleWorld, sampleWorld, indirect + 1, reflections, transmit)/pdf
                end
                
                indirectLighting = indirectLighting/adjSamples
            end
            
            -- Final diffuse colour
            hitColour = (directLighting/math.pi + 2*indirectLighting) * vistrace.getPixel(data.u, data.v, data.hitMaterial)--ray.hitMat.albedo
        elseif data.reflectance == 1 and data.alpha == 1 then
            hitColour = hitColour + 0.8*tracePath(biased, reflect(direction, data.hitNormal), indirect, reflections + 1, transmit)
        elseif data.alpha < 1 then
            local refractColour, reflectColour = Vector(0), Vector(0)
            
            -- Calculate Fresnel
            local kr = fresnel(direction, data.hitNormal, data.ior)
            local isOutside = direction:dot(data.hitNormal) < 0
            local bias = BIAS * data.hitNormal
            
            if kr < 1 then -- not total internal reflection
                refractColour = tracePath(
                    isOutside and data.hitPos - bias or data.hitPos + bias,
                    refract(direction, data.hitNormal, data.ior),
                    indirect, reflections, transmit + 1
                )
            end
            
            reflectColour = tracePath(
                isOutside and data.hitPos + bias or data.hitPos - bias,
                reflect(direction, data.hitNormal),
                indirect, reflections + 1, transmit
            )
            
            hitColour = hitColour + (reflectColour*kr + refractColour*(1 - kr))
        end
        
        return hitColour
    end
    
    function renderScene()
        ENTLIST = {}
        vistrace.entCache = {}
        for k, v in pairs(OBJS) do
            ENTLIST[#ENTLIST + 1] = k
        end
    
        local startTime = timer.curtime()
        
        SCENE = {}
        for y = 1, CAM.res.y do
            SCENE[y] = {}
            for x = 1, CAM.res.x do
                yield(0.8)
                
                local coords, dir = calcViewplane(x, y)
                SCENE[y][x] = tracePath(coords, dir, 1, 0, 0)*EXPOSURE
                SCENE[y][x] = Vector(math.clamp(SCENE[y][x].x, 0, 1), math.clamp(SCENE[y][x].y, 0, 1), math.clamp(SCENE[y][x].z, 0, 1))
                
                COMPLETION = ((y-1)*CAM.res.x + x)/(CAM.res.y*CAM.res.x)
                local time = string.formattedTime((timer.curtime() - startTime)/COMPLETION - (timer.curtime() - startTime))
                ETA = string.format("%02i:%02i:%02i", time.h, time.m, time.s)
                PPS = (CAM.res.x*CAM.res.y)/((timer.curtime() - startTime)/COMPLETION)
            end
        end
        
        local time = string.formattedTime(timer.curtime() - startTime)
        print("Done! Completed in "..string.format("%02i:%02i:%02i", time.h, time.m, time.s))
        
        STATE = 2
    end
    
    function drawRenderToRT()
        local scale = 1
        if CAM.res.x >= CAM.res.y then
            scale = 1024/CAM.res.x
        else
            scale = 1024/CAM.res.y
        end
    
        local stream = tostring(CAM.res.x).." "..tostring(CAM.res.y).." "
        for y = 1, #SCENE do
            for x = 1, #SCENE[y] do
                yield(0.9)
                --if SCENE[y][x].x > 1 or SCENE[y][x].y > 1 or SCENE[y][x].z > 1 then throw("invalid colour") end
                local colour = SCENE[y][x]:getColor()
                render.setColor(colour)
                render.drawRect((x - 1)*scale, (y - 1)*scale, scale, scale)
                
                stream = stream..string.char(math.round(colour.r))..string.char(math.round(colour.g))..string.char(math.round(colour.b))
            end
        end
        
        print("Sending render to server...")
        net.start("uploadRender")
        net.writeStream(stream, true)
        net.send()
        
        STATE = 3
    end
    
    function markLight(ent)
        if not isValid(ent) or ent:isPlayer() then
            print("Light invalid")
            return
        end
        
        if LIGHTS[ent] then
            print("Light already marked!")
            return
        end
        
        LIGHTS[ent] = Light:new(ent:getPos(), 5, Vector(1))
        print(tostring(ent).." marked as light!")
    end
    
    function markProp(ent, isSphere)
        if not isValid(ent) or ent:isPlayer() then
            print("Prop invalid")
            return
        end
        
        if OBJS[ent] or SPHERES[ent] then
            print("Prop already marked!")
            return
        end
        
        if isSphere then
            SPHERES[ent] = (ent:obbSize()[1]/2)*0.95
        end
        
        OBJS[ent] = true
        
        print(tostring(ent).." marked for tracing! using "..(isSphere and "sphere intersect" or "vismesh"))
    end
    
    frontHolo = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    rightHolo = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    upHolo = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    
    topLView = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    topRView = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    botLView = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    botRView = holograms.create(chip():getPos(), Angle(0), "models/sprops/geometry/sphere_3.mdl", Vector(1))
    
    topLView:setColor(Color(255))
    topRView:setColor(Color(255*0.66))
    botLView:setColor(Color(255*0.33))
    botRView:setColor(Color(0))
    
    frontHolo:setColor(Color(255, 0, 0))
    rightHolo:setColor(Color(0, 255, 0))
    upHolo:setColor(Color(0, 0, 255))
    
    function startRender()
        if STATE == 1 or STATE == 2 then
            print("already rendering")
            return
        end
        
        -- Update the light positions
        for k, v in pairs(LIGHTS) do
            LIGHTS[k].pos = k:getPos()
        end
        
        TRACE = coroutine.create(renderScene)
        DRAW = coroutine.create(drawRenderToRT)
        STATE = 1
    end
    
    hook.add("renderoffscreen", "drawRT", function()
        if STATE == 2 and coroutine.status(DRAW) == "suspended" then
            render.selectRenderTarget("mainRT")
            coroutine.resume(DRAW)
            render.selectRenderTarget()
        end
    end)
    
    hook.add("render", "renderLoop", function()
        if STATE == 0 then
            render.drawText(10, 10, "Start a render\nPress 'l' to mark a prop as a light, press 'p' to mark a prop as a solid object")
        elseif STATE == 1 then
            render.drawText(10, 10, "Rendering "..tostring(math.round(COMPLETION*100, 1)).."%...\nETA: "..ETA.."\nPixels per second: "..tostring(math.round(PPS, 1)))
        elseif STATE == 2 or STATE == 3 then
            local resX, resY = render.getResolution()
            render.setRenderTargetTexture("mainRT")
            render.drawTexturedRect(0, 0, resX, resY)
        end
    end)
    
    hook.add("inputPressed", "onKeypress", function(key)
        key = input.getKeyName(key)
        
        if key == "l" then
            markLight(player():getEyeTrace().Entity)
        elseif key == "p" then
            markProp(player():getEyeTrace().Entity)
        elseif key == "o" then
            markProp(player():getEyeTrace().Entity, true)
        elseif key == "DEL" then
            local ent = player():getEyeTrace().Entity
            if LIGHTS[ent] then LIGHTS[ent] = nil; print("Light deleted") end
            if OBJS[ent] then OBJS[ent] = nil; print("Prop deleted") end
            if SPHERES[ent] then SPHERES[ent] = nil end
        elseif key == "HOME" then
            startRender()
        end
    end)
    
    -- Import chat commands
    require("./chat_commands.txt")
    
    hook.add("think", "thinkhook", function()
        if STATE == 1 and coroutine.status(TRACE) == "suspended" then coroutine.resume(TRACE)
        elseif STATE != 1 then
            CAM.pos = chip():getPos() + chip():getUp()*8.3 + chip():getForward()*5
            CAM.ang = chip():getAngles()
            
            frontHolo:setPos(CAM.pos + CAM.ang:getForward()*10)
            rightHolo:setPos(CAM.pos + CAM.ang:getRight()*10)
            upHolo:setPos(CAM.pos + CAM.ang:getUp()*10)
            
            local coord, _ = calcViewplane(1, 1)
            topLView:setPos(coord)
            coord, _ = calcViewplane(CAM.res.x, 1)
            topRView:setPos(coord)
            coord, _ = calcViewplane(1, CAM.res.y)
            botLView:setPos(coord)
            coord, _ = calcViewplane(CAM.res.x, CAM.res.y)
            botRView:setPos(coord)
        end
    end)
end
end