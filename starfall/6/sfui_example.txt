--@name SFUi Example
--@author itisluiz
--@client

--@include https://raw.githubusercontent.com/itisluiz/SFUi/main/sfui/sfui.lua as sfui.lua
--@include https://raw.githubusercontent.com/itisluiz/SFUi/main/sfui/components/component.lua as components/component.lua
--@include https://raw.githubusercontent.com/itisluiz/SFUi/main/sfui/components/window.lua as components/window.lua
--@include https://raw.githubusercontent.com/itisluiz/SFUi/main/sfui/components/checkbox.lua as components/checkbox.lua
--@include https://raw.githubusercontent.com/itisluiz/SFUi/main/sfui/components/button.lua as components/button.lua
--@include https://raw.githubusercontent.com/itisluiz/SFUi/main/sfui/components/progress.lua as components/progress.lua
--@include https://raw.githubusercontent.com/itisluiz/SFUi/main/sfui/components/slider.lua as components/slider.lua
--@include https://raw.githubusercontent.com/itisluiz/SFUi/main/sfui/components/label.lua as components/label.lua
--@include https://raw.githubusercontent.com/itisluiz/SFUi/main/sfui/components/list.lua as components/list.lua
--@include https://raw.githubusercontent.com/itisluiz/SFUi/main/sfui/components/radio.lua as components/radio.lua
--@include https://raw.githubusercontent.com/itisluiz/SFUi/main/sfui/components/textbox.lua as components/textbox.lua
--@include https://raw.githubusercontent.com/itisluiz/SFUi/main/sfui/components/tabber.lua as components/tabber.lua

-- Always Required
require("sfui.lua")
require("components/component.lua")
-- Required only if used
require("components/window.lua")
require("components/button.lua")
require("components/checkbox.lua")
require("components/progress.lua")
require("components/slider.lua")
require("components/label.lua")
require("components/list.lua")
require("components/radio.lua")
require("components/textbox.lua")
require("components/tabber.lua")

local counter = 0
local props = {}

local function filterProps(partialModel)
    local allprops = find.byClass("prop_physics")
    
    table.empty(props)
    for k, v in ipairs(allprops) do  
        local model = v:getModel()
        if partialModel:len() == 0 or (model and model:find(partialModel) ~= nil) then
            props[k] = model
        end
    end
end
filterProps("")

local hiddenWindow = SFUi.window(Vector(100, 100), Vector(400, 300), "I was hidden!")
local tabberA = SFUi.tabber(hiddenWindow, Vector(0, 16), hiddenWindow.size - Vector(0, 16))
local tabberA_tabA = tabberA:addTab("Prop Search") 
local tabberA_tabB = tabberA:addTab("Nested Tabs")
-- Tabber A -> Tab A
local textbox = SFUi.textbox(tabberA_tabA, Vector(50, 40), Vector(250, 30), "Filter by model...", nil, filterProps)
local list = SFUi.list(tabberA_tabA, Vector(50, 110), Vector(250, 150), "All props", props)
-- Tabber A -> Tab B
local tabberB = SFUi.tabber(tabberA_tabB, Vector(32, 32), Vector(200, 100))
local tabberB_tabA = tabberB:addTab("Info")
local tabberB_tabB = tabberB:addTab("Cool Button", function() print("111") end)
-- Tabber A -> Tab B -> Tabber B -> Tab A
local label = SFUi.label(tabberB_tabA, Vector(10, 24), {"Author: ", Color(0, 255, 0), "itisluiz"})
-- Tabber A -> Tab B -> Tabber B -> Tab B
SFUi.button(tabberB_tabB, Vector(32, 24), Vector(124, 16), "Press for Cool", function() print("Cool!") end) 
hiddenWindow.visible = false

local window = SFUi.window(Vector(10, 10), Vector(300, 200), "My Window")
local label = SFUi.label(window, Vector(10, 30), "Press the button to start adding!")
local slider = SFUi.slider(window, Vector(10, 90), Vector(120, 8), 1, 1, 10, 1)
local progress = SFUi.progress(window, Vector(10, 120), Vector(120, 12), nil)
local radioA = SFUi.radio(window, Vector(150, 90), Vector(5, 5), "Increment", "mygroup1", 1, true)
local radioB = SFUi.radio(window, Vector(150, 110), Vector(5, 5), "Decrement", "mygroup1", -1, false)

SFUi.checkbox(window, Vector(120, 60), Vector(10, 10), "Show hidden window", false, function(checked)
    hiddenWindow.visible = checked
end)

SFUi.button(window, Vector(10, 60), Vector(80, 20), "Add", function() 
    counter = counter + slider.value * radioA:groupValue()
    label.content = {"The total is [", Color(0, 255, 0), counter, Color(255, 255, 255), "]"}
    
    if counter < 0 then
        progress.palette.highlight = Color(255, 0, 0)
    else
        progress.palette.highlight = window.palette.highlight
    end
    progress.value = math.abs(counter) / 100
end)

-- Only add root components to your gui
local gui = SFUi:new()
gui:addComponent(hiddenWindow)
gui:addComponent(window)


local _backgroundMaterial = render.createMaterial("matsys_regressiontest/background")


--------------------------------------
local FPS = 60 -- frame rate

local FilterImageMin = TEXFILTER.NONE
local FilterImageMag = TEXFILTER.ANISOTROPIC

------------------------------------------
local frame = 0

local fontRec = render.createFont("Arial", 30, 300, true)
local text = render.createFont("Arial", 40, 300, true)
local small = render.createFont("Arial", 11, 400, true)

local startTime = timer.systime()


function quota()
    return math.max(quotaAverage(), quotaUsed()) / quotaMax()
end

------------------------------------------
render.createRenderTarget("myRTm")
local myRTm = material.create("gmodscreenspace")
myRTm:setTextureRenderTarget("$basetexture", "myRTm")
local m_portal_effect = material.load("effects/tp_eyefx/tpeye")
------------------------------------------

-----------------------------------------
local m2 = material.load("models/rendertarget")
--local m2 = render.createMaterial("effects/alyxmonitor_idle")

render.createRenderTarget("template")
render.createRenderTarget("screenRT")
    
local m = material.create("gmodscreenspace")
m:setTextureRenderTarget("$basetexture", "screenRT")


local VertexAlpha= false
local VertexColor= false
local AlphaTest= false
local Additive= false
local Translucent= false

local flags = 
    (VertexColor and 16 or 0) +
    (VertexAlpha and 32 or 0) +
    (Additive and 128 or 0) +
    (AlphaTest and 256 or 0) +
    (Translucent and 2097152 or 0)
    
    
if flags ~= 0 then
    m:setInt("$flags",  
        flags)    
end
m:recompute()
------------------------------------------






local fontGui = render.createFont("Arial", 15, 300, true)

hook.add("render", "sfui_gui_render", function()
    if not render.isHUDActive() then
        local w, h = render.getResolution()
        render.setMaterial(myRTm)
        filterImage()
        render.drawTexturedRect(0,0,w,h)
        
        render.setRenderTargetTexture("screenRT")
        render.drawTexturedRect(0, 0, w, h)
        
        render.setFont(fontGui)
        gui:render()
    end
end)

hook.add("drawhud", "sfui_gui_render", function()
    render.setFont(fontGui)
    gui:render()
end)









function renderCameraRect(size, lineWidth, lineLength)
    local rectStartXY = 512-size
    local rectEndXY = 512+size
    
    render.drawRect(rectStartXY, rectStartXY, lineWidth, lineLength) -- top-left
    render.drawRect(rectStartXY, rectStartXY, lineLength, lineWidth)

    render.drawRect(rectEndXY-lineWidth, rectEndXY-lineLength, lineWidth, lineLength) -- bottom-right
    render.drawRect(rectEndXY-lineLength, rectEndXY-lineWidth, lineLength, lineWidth)
    
    render.drawRect(rectEndXY-lineWidth, rectStartXY, lineWidth, lineLength) -- top-right
    render.drawRect(rectEndXY-lineLength, rectStartXY, lineLength, lineWidth)
    
    render.drawRect(rectStartXY, rectEndXY-lineLength, lineWidth, lineLength) -- bottom-left
    render.drawRect(rectStartXY, rectEndXY-lineWidth, lineLength, lineWidth)
end


function renderCameraCenterPlus(lineWidth, lineLength)
    local centerW = lineWidth / 2
    local centerL = lineLength / 2
    
    render.drawRect(512-centerW, 512-centerL, lineWidth, lineLength)
    render.drawRect(512-centerL, 512-centerW, lineLength, lineWidth)
end


function filterImage()
    render.setFilterMin(FilterImageMin)
    render.setFilterMag(FilterImageMag)
end


hook.add("renderoffscreen", "InitTemplate", function()
    hook.remove("renderoffscreen", "InitTemplate")
    
    render.selectRenderTarget("template")
    render.setLightingMode(0)
    
    render.clear(Color(0,0,0,0))
    render.setColor(Color(255,255,255))

    renderCameraRect(462, 2   , 100)
    renderCameraRect(60, 2, 30)
    renderCameraCenterPlus(2, 40)
    
    render.setFont(fontRec)
    render.setColor(Color(255,255,255))
    render.drawText(510, 55, "REC")
    
    render.setFont(text)
    render.drawText(380, 950, "1/60")
    render.drawText(495, 950, "f2,8")
    render.drawText(590, 950, "ISO 200")
    
    render.drawRectOutline(838, 70, 50, 40)
    render.drawText(840, 70, "4K")
    render.drawText(890, 70, tostring(FPS))
    render.setFont(fontRec)
    render.drawText(930, 75, "fps")
    
    render.drawRectOutline(60, 70, 90, 30, 2)
    render.drawRectOutline(148, 75, 7, 20, 2)
    render.drawRect(64, 74, 10, 22)
    render.drawRect(64+12*1, 74, 10, 22)
    render.drawRect(64+12*2, 74, 10, 22)
    render.drawRect(64+12*3, 74, 10, 22)
    render.drawRect(64+12*4, 74, 10, 22)
    render.drawRect(64+12*5, 74, 10, 22)
    render.drawRect(64+12*5, 74, 10, 22)
end)

hook.add("renderoffscreen", "rrrrtt", function()
    if quota() > 0.4 then return end
    
    render.selectRenderTarget("screenRT")
    render.setLightingMode(0)
    render.clear(Color(0,0,0,0))

    render.setRenderTargetTexture("template")
    filterImage()
    render.drawTexturedRect(0,0,1024,1024)
    
    render.setColor(Color(255,255,255))

    render.setFont(fontRec)
    render.setColor(Color(200,0,0, 255/2 + 255/2 * math.sin((timer.systime()*6) % 360)))
    render.drawFilledCircle(490, 70, 10)
    
    render.setColor(Color(255,255,255))
    render.setFont(text)
    local time = os.date('!%H:%M:%S', timer.systime() - startTime)
    local ms = string.match(tostring(os.clock()), "%d%.(%d+)") or ''
    render.drawText(430, 900, string.format("%s:%s", time, ms:sub(1,2)))
    
    
    local now = timer.systime()
    if frame > now then return end
    frame = now + 1/FPS
    
    render.selectRenderTarget("myRTm")
    render.clear(Color(0, 0, 0, 0))
    render.setMaterial(m2)
    render.setLightingMode(2)
    filterImage()
    render.drawTexturedRect(0,0,1024,1024)
end)