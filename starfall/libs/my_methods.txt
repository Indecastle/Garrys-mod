
if SERVER then
    net.receive("print", function (len, ply)
        local t = net.readString(t)
        if t == "table" then printTable(net.readTable())
        elseif t == "string" then print(net.readString(16))
        elseif t == "int" then print(net.readInt(16))
        elseif t == "float" then print(net.readFloat(16))
        elseif t == "vector" then print(net.readVector())
        elseif t == "angle" then print(net.readAngle())
        elseif t == "entity" then print(net.readEntity())
        end
    end)
else
    function log(v)
       net.start("print")
    
        local t = type(v)
        if t == "number" then
            t = math.round(v)==v and "int" or "float"
        end
        
        net.writeString(t)
        if t == "table" then net.writeTable(v)
        elseif t == "string" then net.writeString(v)
        elseif t == "int" then net.writeInt(v, 16)
        elseif t == "float" then net.writeFloat(v, 16)
        elseif t == "vector" then net.writeVector(v)
        elseif t == "angle" then net.writeAngle(v)
        elseif t == "entity" then net.writeEntity(v)
        end
        net.send()
    end
end



function table.map(t, func, ExcludeNil)
    local maped = {}
    if ExcludeNil == nil then ExcludeNil = false end
    for i=1, #t do
        local result = func(i, t[i])
        if !ExcludeNil or result ~= nil then
            maped[#maped + 1] = func(i, t[i])
        end
    end
    return maped
end
function table.sum(t, func)
    local sum_ = 0
    for i=1, #t do
        sum_ = sum_ + func(t[i])
    end
    return sum_
end
function table.all(t, func)
    for i=1, #t do
        if not func(t[i]) then
            return false
        end
    end
    return true
end
function table.any(t, func)
    for i=1, #t do
        if func(t[i]) then
            return true
        end
    end
    return false
end
function table.reduce(list, fn, init)
    local acc = init
    for k, v in ipairs(list) do
        if 1 == k and not init then
            acc = v
        else
            acc = fn(acc, v)
        end
    end
    return acc
end
function table.filter(t, func)
    local maped = {}
    local j = 1
    for i=1, #t do
        if func(t[i]) then
            maped[j] = t[i]
            j = j + 1
        end
    end
    return maped
end
function table.first(t, func)    
    for i=1, #t do
        if func(t[i]) then
            return t[i]
        end
    end
    return nil
end