--@name Sprite sheet Manager
--@author Jacbo

if SERVER then

else -- CLIENT
    local mngr = {}
    mngr.__index = mngr
    render.createRenderTarget("MySpriteRenderTarget")
    
    -- Creates a sprite sheet manager and loads the image
    function mngr.loadURL(url, columns, rows, matCallback, callback)
        local mat = material.create("UnlitGeneric")
        
        local matRender = material.create("UnlitGeneric")
        matRender:setTextureRenderTarget("$basetexture", "MySpriteRenderTarget")
        matRender:setInt("$flags", 256)
        
        local t = {
            loading = true,
            rows = rows,
            columns = columns,
            mats = {mat},
            matRender = matRender,
            loadings = {true},
            cb = callback,
            matcb = matCallback,
        }
        setmetatable(t, mngr)
        mat:setTextureURL("$basetexture", url, function(m, _, width, height, l)
            t.width = width
            t.height = height
            t.swidth = width / columns
            t.sheight = height / rows
            if matCallback then matCallback(m, width, height, l) end
        end, function()
            t.loadings[1] = false
            for _, loading in ipairs(t.loadings) do
                if loading then
                    return
                end
            end
            t.loading = false
            if t.cb then t.cb(t) end
        end)
        
        return t
    end
    
    -- Gets the width of a sprite
    function mngr:getSpriteWidth()
        return self.swidth
    end
    
    -- Gets the height of a sprite
    function mngr:getSpriteHeight()
        return self.sheight
    end
    
    function mngr:selectRenderTarget()
        render.selectRenderTarget("MySpriteRenderTarget")
    end
    
    function mngr:getSpriteStretchedSize(maxSize)
        local width = self:getSpriteWidth()
        local height = self:getSpriteHeight()
        if width < height then 
            width = width * maxSize / height
            height = maxSize
        else
            height = height * maxSize / width
            width = maxSize
        end
        return width, height
    end
    
    -- Sets a callback to run when it finishes loading all sprite sheet images
    -- Instantly calls it if it is already loaded
    function mngr:setCallback(callback)
        self.cb = callback
        if not self.loading then
            callback(self)
        end
    end
    
    -- Appends another piece of the sprite sheet
    function mngr:appendURL(url)
        local mat = material.create("UnlitGeneric")
        
        table.insert(self.mats, mat)
        table.insert(self.loadings, true)
        self.loading = true
        local index = #self.loadings
        
        mat:setTextureURL("$basetexture", url, nil, function()
            self.loadings[index] = false
            for _, loading in ipairs(self.loadings) do
                if loading then
                    return
                end
            end
            self.loading = false
            if self.cb then self.cb(self) end
        end)
    end
    
    -- Draws a sprite in a rectangle
    function mngr:drawSprite(x, y, width, height, index)
        if not self.loading then
            index = math.round(index)
            local cols, rows, swidth, sheight = self.columns, self.rows, self.swidth, self.sheight
            local sprites = cols * rows
            render.setMaterial(self.mats[math.ceil(index / sprites)])
            index = (index - 1) % sprites + 1
            local u = (((index - 1) % cols)) * swidth
            local v = (math.floor((index-1) / cols)) * sheight
            render.drawTexturedRectUV(x, y, width, height, u/1024, v/1024, (u + swidth)/1024, (v + sheight)/1024)
        end
    end
    
    function mngr:drawSprite2(x, y, width, height, index)
        if not self.loading then
            index = math.round(index)
            local cols, rows, swidth, sheight = self.columns, self.rows, self.swidth, self.sheight
            local sprites = cols * rows
            render.setMaterial(self.mats[math.ceil(index / sprites)])
            index = (index - 1) % sprites + 1
            local u = (((index - 1) % cols)) * swidth
            local v = (math.floor((index-1) / cols)) * sheight
            render.drawTexturedRectUV(x, y, width, height, u/1024, v/1024, (u + swidth)/1024, (v + sheight)/1024)
        end
    end
    
    -- Checks if it is loading sprite sheet pieces
    function mngr:isLoading()
        return self.loading
    end
    
    return mngr
end
