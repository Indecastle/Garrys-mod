// animation
--@name animation sphere
--@author Markiz
--@client
--@include libs/my_methods.txt

dofile("libs/my_methods.txt")

local E = chip()
local Radius = 200

local Animation = "dancemoves"
local Speed = 0.5

local SphereAlpha = 50

local H = holograms.create(E:getPos(), E:getAngles(), "models/holograms/hq_icosphere.mdl", Vector(Radius/5.8))
H:setColor(Color(255,255,255, SphereAlpha))
local H2 = holograms.create(E:getPos(), E:getAngles(), "models/holograms/hq_icosphere.mdl", -Vector(Radius/5.8))
H2:setColor(Color(255,255,255, SphereAlpha))

H:setParent(E)
H2:setParent(E)

local activePlayers = {}
local activePlayingPlayers = {}

function inSphere(p)
    return p:isValid() and p:getPos():getDistance(E:getPos()) < Radius
end

timer.create("anim1", 0.2, 0, function()
    local players = find.allPlayers(function(p)
        if inSphere(p) then
            if !table.any(activePlayers, function(pp) return pp == p end) then 
                table.insert(activePlayers, p) 
                if !p:isPlayingAnimation() then
                    table.insert(activePlayingPlayers, p)
                end
            end
        end
        
        return false
    end)
    
    for i, p in ipairs(activePlayingPlayers) do 
        if p:isValid() and !p:isPlayingAnimation() then
            p:setAnimation(Animation, nil, Speed, false, nil, nil)
        end
        --p:setAnimationLoop(false)
        --p:resetAnimation()
    end
    
    for i, p in ipairs(activePlayers) do
        if p:isValid() and !inSphere(p) then
            if table.any(activePlayingPlayers, function(pp) return pp == p end) then 
                p:resetAnimation()
            end
        
            table.removeByValue(activePlayers, p)
            table.removeByValue(activePlayingPlayers, p)
        end
    end
end)
