--@name Minecraft Wither
--@author Markiz
--@shared

local Radius = 1500
local Health = 500
local MaxTakeDamage = 200

local AiFlyEnabled = true
local FlyVelocityMax = 10
local FlyHomingAccuracy = 1

local AutoHealAfterTime = 5
local AutoHealDelay = 1
local AutoHealAmount = 50

local LockDamageTime = 0.5
local PreparationTime = 10
local DeathTime = 8

local ExplodeModels = {
    "models/props_phx/misc/potato_launcher_explosive.mdl",
    "models/props_junk/propane_tank001a.mdl",
    "models/props_phx/oildrum001_explosive.mdl",
    "models/props_c17/oildrum001_explosive.mdl",
}
local TargetHomingAccuracy = 0.5
local PropDamageMode = true
local Damage = 20
local HeadFireVelocity = 20
local MinRandomFire = 0.3
local MaxRandomFire = 2.5
local HeadFireLifeTime = 10

local SoundVolumeMain = 1
local SoundVolumeHurt = 1
local SoundVolumeShoot = 0.5
local SoundVolumeSpawn = 7
local SoundVolumeDeath = 7
local Speed = 1
local AgainLoadSoundDelay = 1


local RenderRadius = 5000
local RenderMaxAlpha = 1.0 -- if RadiusMode == false
local RenderOffset = 8

local Model = "models/hunter/blocks/cube1x1x1.mdl"
local E = chip()
local Prop_Base, Holo_Base

local _health = 0
local _isPreparating = true
local _isAlive = true


function getFrameTime()
    return timer.frametime() * 30
end


if SERVER then
    
    local _oldLockDamageTime = timer.systime()
    local _lastTakeDamage = timer.systime()
    local _eyeSize = Vector(0.4,0.3,0.13)
    local _eyeClosedSize = Vector(0.4,0.3,0.03)
    local _activeHeadFires = {}
    local _boneShields = {}
    local _state = 1 // 1 or 2
    
    
    
    function explodeTo(pos)
        while #ExplodeModels > 0 do
            local succeed = pcall(function()
                local p = prop.create(pos, Angle(), ExplodeModels[1])
                p:setNoDraw(true)
                p:breakEnt()
            end)
            
            if succeed then return end
            table.remove(ExplodeModels, 1)
        end
    end
    
    -----------------------------------------------------------------
    local HeadFire = class("HeadFire")
    
    function HeadFire:initialize(pos, propBase, target, propDamageMode)
        self.propBase = propBase or nil
        self.target = target or nil
        self.damage = Damage or nil
        self.isExploded = false
        self.isRemoved = false
        self.propDamageMode = propDamageMode
        self.lastLifeTime = timer.systime() + HeadFireLifeTime
        self.forward = (self.target:obbCenterW()-pos):getNormalized()
        self.head = hologram.create(pos, self.forward and self.forward:getAngle() or Angle(), "models/holograms/cube.mdl", Vector(1.0, 1.0, 0.9))
        self.head_eye1 = holograms.create(self.head:localToWorld(Vector(3.65,4,0)), self.head:getAngles(), "models/holograms/cube.mdl", _eyeSize)
        self.head_eye2 = holograms.create(self.head:localToWorld(Vector(3.65,-4,0)), self.head:getAngles(), "models/holograms/cube.mdl", _eyeSize)
        self.head_mouth = holograms.create(self.head:localToWorld(Vector(3.65,0,-3)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.40,0.65,0.07))
        
        self.head_eye1:setParent(self.head)
        self.head_eye2:setParent(self.head)
        self.head_mouth:setParent(self.head)
        
        self.head:setColor(Color(35,35,35))
        self.head_eye1:setColor(Color(150,150,150))
        self.head_eye2:setColor(Color(150,150,150))
        self.head_mouth:setColor(Color(150,150,150))
    end
    
    
    function HeadFire:hide()
        self.head_eye1:setColor(Color(0,0,0,0))
        self.head_eye2:setColor(Color(0,0,0,0))
        self.head_mouth:setColor(Color(0,0,0,0))
        self.head:setColor(Color(0,0,0,0))
    end
    
    function HeadFire:destroy()
        self.head_eye1:remove()
        self.head_eye2:remove()
        self.head_mouth:remove()
        self.head:remove()
        self.isRemoved = true
    end
    
    function HeadFire:explode()
        if self.propDamageMode then
            explodeTo(self.head:getPos())
            self:destroy()
            return
        else
            local plys = find.inSphere(self.head:getPos(), 100, function(ent)
                return ent:isPlayer()
            end)
            for i, ply in ipairs(plys) do
                pcall(function()
                    ply:applyDamage(self.damage, chip(), chip())
                end)
            end
            self.head:emitSound('Plastic_Barrel.BulletImpact', 100, 100, 1)
            self:hide()
            timer.simple(2, function()
                self:destroy()
            end)
        end
        self.isExploded = true
    end
    
    function HeadFire:think()
        if not self.isExploded and not isValid(self.target) or self.lastLifeTime < timer.systime() then
            self:destroy()
            return
        end
        local pos = self.head:getPos()
        local forwardToTarget = (self.target:obbCenterW()-pos):getNormalized()
        self.forward = math.lerpVector(TargetHomingAccuracy/10, self.head:getForward(), forwardToTarget)
        local nextPos = pos + self.forward * HeadFireVelocity * getFrameTime()
        
        local tr = trace.trace(pos, nextPos, {self.propBase}, MASK.ALL, nil, false)
        if isValid(tr.Entity) or tr.HitWorld or self.target:obbCenterW():getDistance(pos) < 20 then
            self:explode()
            return
        end
        
        self.head:setPos(nextPos)
        self.head:setAngles(self.forward:getAngle())
    end
    -----------------------------------------------------------------
    
    function createShieldForBone(increasePercent, ...)
        local args = {...}
        for i, holo in ipairs(args) do
            local holo_shield = holograms.create(holo:getPos(), holo:getAngles(), "models/holograms/cube.mdl", holo:getScale() * (1 + increasePercent/100))
            holo_shield:setMaterial("models/effects/comball_sphere")
            holo_shield:setParent(holo)
            table.insert(_boneShields, holo_shield)
        end
    end
    
    function setEnableShield(value)
        local color = value and Color(255,255,255) or Color(255,255,255, 0)
        
        for i, h in ipairs(_boneShields) do
            h:setColor(color)
        end
    end

    
    local li = find.inSphere(E:getPos(), 50, function(ent)
        return ent:getModel() == Model and ent:getOwner() == owner()
    end)
    if #li > 0 then
        Prop_Base = find.closest(li, E:getPos())
    else
        Prop_Base = prop.create(E:localToWorld(Vector(0,0,50)), E:getAngles(), Model, true)
    end
    if Prop_Base:getOwner() == owner() then
        Prop_Base:setPos(E:localToWorld(Vector(0,0,50)))
        Prop_Base:setAngles(E:getAngles())
        Prop_Base:setColor(Color(0,0,0,0))
        Prop_Base:setMaterial("Models/effects/vol_light001")
        --Prop_Base:setMass(35)
    end

    
    Holo_Base = holograms.create(Prop_Base:getPos(), Prop_Base:getAngles(), "models/holograms/cube.mdl")
    Holo_Base:setColor(Color(0,0,0,0))
    Holo_Base:setParent(Prop_Base)
    
    
    local Holo_Spine = holograms.create(Holo_Base:getPos(), Holo_Base:localToWorldAngles(Angle(20,0,0)), "models/holograms/cube.mdl", Vector(0.5, 0.5, 2))
    local Holo_Spine_Rib1 = holograms.create(Holo_Spine:localToWorld(Vector(0,0,-7)), Holo_Spine:getAngles(), "models/holograms/cube.mdl", Vector(0.3, 2, 0.3))
    local Holo_Spine_Rib2 = holograms.create(Holo_Spine:localToWorld(Vector(0,0,-1)), Holo_Spine:getAngles(), "models/holograms/cube.mdl", Vector(0.3, 2, 0.3))
    local Holo_Spine_Rib3 = holograms.create(Holo_Spine:localToWorld(Vector(0,0,5)), Holo_Spine:getAngles(), "models/holograms/cube.mdl", Vector(0.3, 2, 0.3))
    Holo_Spine:setParent(Holo_Base)
    Holo_Spine_Rib1:setParent(Holo_Spine)
    Holo_Spine_Rib2:setParent(Holo_Spine)
    Holo_Spine_Rib3:setParent(Holo_Spine)
    
    local Holo_Tail = holograms.create(Holo_Spine:localToWorld(Vector(-7,0,-16)), Holo_Spine:localToWorldAngles(Angle(50,0,0)), "models/holograms/cube.mdl", Vector(0.5, 0.49, 1.5))
    local Holo_Tail_Bone = holograms.create(Holo_Tail:localToWorld(Vector(0,0,9)), Holo_Spine:getAngles(), "models/holograms/cube.mdl", Vector(0.2, 1, 0.2))
    Holo_Tail_Bone:setParent(Holo_Base)
    Holo_Tail_Bone:setColor(Color(0,0,0,0))
    Holo_Tail:setParent(Holo_Tail_Bone)
    
    local Holo_Clavicle = holograms.create(Holo_Base:localToWorld(Vector(4,0,12)), Holo_Base:getAngles(), "models/holograms/cube.mdl", Vector(0.5, 4, 0.4))
    Holo_Clavicle:setParent(Holo_Base)
    
    local Holo_Head1 = holograms.create(Holo_Clavicle:localToWorld(Vector(2,0,9)), Holo_Clavicle:getAngles(), "models/holograms/cube.mdl", Vector(1.4,1.4,1.3))
    local Holo_Head1_Eye1 = holograms.create(Holo_Head1:localToWorld(Vector(6.1,4,0)), Holo_Head1:getAngles(), "models/holograms/cube.mdl", _eyeSize)
    local Holo_Head1_Eye2 = holograms.create(Holo_Head1:localToWorld(Vector(6.1,-4,0)), Holo_Head1:getAngles(), "models/holograms/cube.mdl", _eyeSize)
    local Holo_Head1_Mouth = holograms.create(Holo_Head1:localToWorld(Vector(5.5,0,-3)), Holo_Head1:getAngles(), "models/holograms/cube.mdl", Vector(0.49,0.65,0.07))
    Holo_Head1:setParent(Holo_Base)
    Holo_Head1_Eye1:setParent(Holo_Head1)
    Holo_Head1_Eye2:setParent(Holo_Head1)
    Holo_Head1_Mouth:setParent(Holo_Head1)
    
    local Holo_Head2 = holograms.create(Holo_Clavicle:localToWorld(Vector(2,21,5)), Holo_Clavicle:getAngles(), "models/holograms/cube.mdl", Vector(1.0,1.0,0.9))
    local Holo_Head2_Eye1 = holograms.create(Holo_Head2:localToWorld(Vector(3.65,4,0)), Holo_Head2:getAngles(), "models/holograms/cube.mdl", _eyeSize)
    local Holo_Head2_Eye2 = holograms.create(Holo_Head2:localToWorld(Vector(3.65,-4,0)), Holo_Head2:getAngles(), "models/holograms/cube.mdl", _eyeSize)
    local Holo_Head2_Mouth = holograms.create(Holo_Head2:localToWorld(Vector(3.65,0,-3)), Holo_Head2:getAngles(), "models/holograms/cube.mdl", Vector(0.40,0.65,0.07))
    Holo_Head2:setParent(Holo_Base)
    Holo_Head2_Eye1:setParent(Holo_Head2)
    Holo_Head2_Eye2:setParent(Holo_Head2)
    Holo_Head2_Mouth:setParent(Holo_Head2)
    
    local Holo_Head3 = holograms.create(Holo_Clavicle:localToWorld(Vector(2,-21,5)), Holo_Clavicle:getAngles(), "models/holograms/cube.mdl", Vector(1.0,1.0,0.9))
    local Holo_Head3_Eye1 = holograms.create(Holo_Head3:localToWorld(Vector(3.65,4,0)), Holo_Head3:getAngles(), "models/holograms/cube.mdl", _eyeSize)
    local Holo_Head3_Eye2 = holograms.create(Holo_Head3:localToWorld(Vector(3.65,-4,0)), Holo_Head3:getAngles(), "models/holograms/cube.mdl", _eyeSize)
    local Holo_Head3_Mouth = holograms.create(Holo_Head3:localToWorld(Vector(3.65,0,-3)), Holo_Head3:getAngles(), "models/holograms/cube.mdl", Vector(0.40,0.65,0.07))
    Holo_Head3:setParent(Holo_Base)
    Holo_Head3_Eye1:setParent(Holo_Head3)
    Holo_Head3_Eye2:setParent(Holo_Head3)
    Holo_Head3_Mouth:setParent(Holo_Head3)
    
    createShieldForBone(30, Holo_Spine, Holo_Spine_Rib1, Holo_Spine_Rib2, Holo_Spine_Rib3, Holo_Tail, Holo_Clavicle, Holo_Head1, Holo_Head2, Holo_Head3)
    setEnableShield(true)
    
    
    function setBodyColor(color)
        Holo_Spine:setColor(color)
        Holo_Spine_Rib1:setColor(color)
        Holo_Spine_Rib2:setColor(color)
        Holo_Spine_Rib3:setColor(color)
        Holo_Tail:setColor(color)
        Holo_Clavicle:setColor(color)
        Holo_Head1:setColor(color)
        Holo_Head2:setColor(color)
        Holo_Head3:setColor(color)
    end
    
    function setEyeColor(color)
        Holo_Head1_Eye1:setColor(color)
        Holo_Head1_Eye2:setColor(color)
        Holo_Head1_Mouth:setColor(color)
        Holo_Head2_Eye1:setColor(color)
        Holo_Head2_Eye2:setColor(color)
        Holo_Head2_Mouth:setColor(color)
        Holo_Head3_Eye1:setColor(color)
        Holo_Head3_Eye2:setColor(color)
        Holo_Head3_Mouth:setColor(color)
    end
    
    function hideHolos()
        setBodyColor(Color(0,0,0,0))
        setEyeColor(Color(0,0,0,0))
    end
    
    
    setBodyColor(Color(35,35,35))
    setEyeColor(Color(150,150,150))
    
    
    function setEyesState(scale)
        if not isValid(Holo_Head1_Eye1) then return end
        Holo_Head1_Eye1:setScale(scale)
        Holo_Head1_Eye2:setScale(scale)
        Holo_Head2_Eye1:setScale(scale)
        Holo_Head2_Eye2:setScale(scale)
        Holo_Head3_Eye1:setScale(scale)
        Holo_Head3_Eye2:setScale(scale)
    end
    
    function closeEyes()
        setEyesState(_eyeClosedSize)
    end
    
    function openEyes()
        setEyesState(_eyeSize)
    end
    
    function sendHealth()
        net.start("hurt")
        net.writeFloat(_health)
        net.send()
    end
    
    local _targets = {
        [1] = nil,
        [2] = nil,
        [3] = nil,
    }
    local _heads = { Holo_Head1, Holo_Head2, Holo_Head3 }
    
    
    function isValidFindPlayerOrNPC(ent)
        return ent ~= nil and ent:isValid()
            and (ent:isPlayer() and ent:isValidPhys() and ent:isAlive() and !ent:hasGodMode()
                or ent:isNPC()) 
    end
    
    
    function isValidPlayerOrNPC(ent)
        return ent ~= nil and ent:isValid()
            and (ent:isNPC() or ent:isPlayer() and ent:isValidPhys() and ent:isAlive() and !ent:hasGodMode())
    end
    
    
    function tryAddTarget(ent)
        if not _targets[1] then _targets[1] = ent
        elseif not _targets[2] then _targets[2] = ent
        elseif not _targets[3] then _targets[3] = ent
        elseif _targets[1]==_targets[2] then _targets[2] = ent
        elseif _targets[1]==_targets[3] then _targets[3] = ent
        elseif _targets[2]==_targets[3] then _targets[3] = ent
        end
    end
    
    
    timer.create("preparating", 0.25, 0, function()
        if not isValid(Prop_Base) or not isValid(Holo_Base) then return end
        
        if _isPreparating then
            setBodyColor(Holo_Spine:getColor() == Color(35,35,35) and Color(39, 54, 76) or Color(35,35,35))   
        else
            setBodyColor(Color(35,35,35))
            timer.remove("preparating")
        end
    end)
    
    
    timer.create("auto_heal", AutoHealDelay, 0, function()
        if not isValid(Prop_Base) or not isValid(Holo_Base) then return end
        
        if not _isAlive or _isPreparating or timer.systime() < _lastTakeDamage then return end
        _health = math.clamp(_health + AutoHealAmount, 0, Health)
        if _health > Health/2 then
            setEnableShield(false)
            _state = 1
        end
        sendHealth()
    end)
    
    
    timer.create("find_targets", 0.5, 0, function()
        if not isValid(Prop_Base) or _isPreparating or not _isAlive then return end
        
        if not isValidPlayerOrNPC(_targets[1]) or Holo_Base:getPos():getDistance(_targets[1]:getPos()) > Radius then _targets[1] = nil end
        if not isValidPlayerOrNPC(_targets[2]) or Holo_Base:getPos():getDistance(_targets[2]:getPos()) > Radius then _targets[2] = nil end
        if not isValidPlayerOrNPC(_targets[3]) or Holo_Base:getPos():getDistance(_targets[3]:getPos()) > Radius then _targets[3] = nil end
        
        local ents = find.inSphere(Holo_Base:getPos(), Radius, isValidPlayerOrNPC)
        
        for i, ent in ipairs(ents) do
            --print(ent)
            tryAddTarget(ent)
        end
    end)
    
    
    function setEyeContact(holoHead, ent)
        if not isValid(Prop_Base) or not isValid(Holo_Base) then return end
        
        if isValid(ent) and isValid(holoHead) then 
            --local attachmentIndex = Entity:lookupAttachment("head")
            holoHead:setAngles((ent:obbCenterW()-holoHead:getPos()):getNormalized():getAngle()) 
        end
    end

    
    local _nextTimeFire = timer.systime()
    hook.add("think", "heads", function()
        if isValid(ent) and isValid(Prop_Base) or not isValid(Holo_Base) then return end
        
        for i, head in ipairs(_activeHeadFires) do
            head:think()
            if head.isExploded or head.isRemoved then
                table.removeByValue(_activeHeadFires, head)
            end
        end
        
        if _isPreparating or not _isAlive then return end
        
        setEyeContact(Holo_Head1, _targets[1])
        setEyeContact(Holo_Head2, _targets[2])
        setEyeContact(Holo_Head3, _targets[3])
        
        if _nextTimeFire < timer.systime() then
            _nextTimeFire = timer.systime() + MinRandomFire + math.random() * (MaxRandomFire-MinRandomFire)
            local index = math.random(1, 3)
            if isValid(_targets[index]) then
                pcall(function()
                    local headFire = HeadFire:new(_heads[index]:getPos(), Prop_Base, _targets[index], PropDamageMode)
                    table.insert(_activeHeadFires, headFire)
                    net.start("fire")
                    net.send()
                end)
            end
        end
    end)


    local _killingHoloAngle = 0
    function killingScene()
        hook.add("think", "killingScene", function()
            if not isValid(Prop_Base) or not isValid(Holo_Base) then return end
            
            Holo_Base:setAngles(Prop_Base:localToWorldAngles(Angle(20,0,_killingHoloAngle)))
            
            _killingHoloAngle = _killingHoloAngle + 2
            if _killingHoloAngle > 90 then
                hook.remove("think", "killingScene")
                hideHolos()
                setEnableShield(false)
                local headFire = HeadFire:new(Prop_Base:getPos(), Prop_Base, owner(), true)
                headFire:explode()
            end
        end)
    end


    -- https://wiki.facepunch.com/gmod/Enums/DMG
    local _state2_avaliable_damagetypes = {
        64,
        4096,
        67108865,
        134217728,
    }
    function isEqualDamageType(type)
        for i, f in ipairs(_state2_avaliable_damagetypes) do
            if bit.band(type, f) != 0 then
                return true
            end
        end
        return false
    end
    
    
    hook.add("EntityTakeDamage", "dmg", function(target, attacker, inflictor, amount, type, position, force)
        if not isValid(Prop_Base) 
                or target != Prop_Base 
                or timer.systime() < _oldLockDamageTime 
                or _isPreparating 
                or not _isAlive
                or _state == 2 and not isEqualDamageType(type) then return end
                
        _oldLockDamageTime = timer.systime() + LockDamageTime
        --Prop_Base:emitSound('Explo.ww2bomb', 100, 100, 1)
        _health = math.max(0, _health - math.clamp(amount, 0, MaxTakeDamage))
        --print(Health)
        sendHealth()
        closeEyes()
        _lastTakeDamage = timer.systime() + AutoHealAfterTime
        
        if _health <= 0 then
            _isAlive = false
            killingScene()
            timer.simple(DeathTime, function()
                chip():remove()
            end)
        else
            timer.simple(LockDamageTime*0.9, function()
                openEyes()
            end)
            if _health < Health/2 then
                setEnableShield(true)
                _state = 2
            end
        end
        --print(type)
    end)
    
    
    local _HeightStep1 = 500
    local _HeightStep2 = 100
    
    function getTargetPos(ent)
        local heightStep = _state == 1 and _HeightStep1 or _HeightStep2
        local obbCentre = ent:obbCenterW()
        local tr = trace.trace(obbCentre, obbCentre + Vector(0,0,heightStep), nil, 24737, nil, false)
        if tr.Hit then
            heightStep = (tr.HitPos):getDistance(obbCentre) - 50
        end
        return ent:getPos() + Vector(0,0,heightStep)
    end
    
    
    local _oldDir = Vector()
    hook.add("think", "main", function()
        ---- tail
        if not isValid(Holo_Tail_Bone) or not isValid(Holo_Base) then return end
        
        local x = (timer.systime()*2) % 360
        Holo_Tail_Bone:setAngles(Holo_Base:localToWorldAngles(Angle(math.sin(x)*15, 0, 0)))
        ----
        
        local HeightStep1 = 500
        local HeightStep2 = 100
        ---- Fly
        if AiFlyEnabled and not _isPreparating and _isAlive then
            
            
            local target = isValidPlayerOrNPC(_targets[1]) and _targets[1] or chip()
            local targetPos = getTargetPos(target)
            local distance = targetPos:getDistance(Prop_Base:getPos())
            if distance < 10 then return end
            
            local currentDir = _oldDir
            local targetDir = (targetPos - Prop_Base:getPos()):getNormalized()
            local nextDir = math.lerpVector(FlyHomingAccuracy/10, currentDir, targetDir)
            _oldDir = nextDir
            
            local nextStepDistance = math.clamp(distance/100, 0, FlyVelocityMax)
            
            local nextAng = nextDir:getAngle()
            nextAng.p = 0
            
            Prop_Base:setAngles(nextAng)
            Prop_Base:setPos(Prop_Base:getPos() + nextDir * nextStepDistance * getFrameTime())
        end
        ----
    end)
    

    local _prepTime = timer.curtime()
    local _prepTimeEnd = timer.curtime() + PreparationTime
    timer.simple(PreparationTime, function()
        if not isValid(Prop_Base) or not isValid(Holo_Base) then return end
        
        local headFire = HeadFire:new(Prop_Base:getPos(), Prop_Base, owner(), true)
        headFire:explode()
        timer.simple(0.3, function()
            _isPreparating = false
            _health = Health
            setEnableShield(false)
        end)
    end)
    

    hook.add("ClientInitialized", "cl_init", function(ply)
        net.start("init")
        net.writeFloat(_prepTime)
        net.writeEntity(Holo_Base)
        net.send(ply)
    end)
    
    return
end

------------------------------------ CLIENT  --------------------------------------------------
--if owner() != player() then return end

local RenderOn = true
local _prepServerTime, _prepTimeEnd

local sounds_main = {}
local soundUrls_main = {
    idle1 = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/master/starfall/Resources/wither/idle1-wither.mp3",
    idle2 = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/master/starfall/Resources/wither/idle2-wither.mp3",
    idle3 = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/master/starfall/Resources/wither/idle3-wither.mp3",
    idle4 = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/master/starfall/Resources/wither/idle4-wither.mp3",
}

local sounds_hurt = {}
local soundUrls_hurt = {
    hurt1 = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/master/starfall/Resources/wither/hurt1-wither.mp3",
    hurt2 = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/master/starfall/Resources/wither/hurt2-wither.mp3",
    hurt3 = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/master/starfall/Resources/wither/hurt3-wither.mp3",
    hurt4 = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/master/starfall/Resources/wither/hurt4-wither.mp3",
}

local sounds_other = {}
local soundUrls_other = {
    spawn = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/master/starfall/Resources/wither/spawn-wither.mp3",
    death = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/master/starfall/Resources/wither/death---wither-By-tuna.voicemod.net.mp3",
    shoot = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/master/starfall/Resources/wither/shoot-wither.mp3",
}


net.receive("init", function(len)
    _prepServerTime = net.readFloat()
    _prepTimeEnd = _prepServerTime+ PreparationTime
    net.readEntity(function(ent)
        if ent==nil then error("Failed to get Hologram!") end
        Holo_Base = ent
    end)
    
    hook.add("think", "preparation", function()
        _health = math.clamp(Health * (1 - (_prepTimeEnd - timer.curtime()) / PreparationTime), 0, Health)
        if _health == Health then
            _isPreparating = false
            hook.remove("think", "preparation")
            
            sounds_other.spawn:setPos(chip():getPos())
            sounds_other.spawn:play()
        end
    end)
end)


net.receive("fire", function(len)
    local sound = sounds_other.shoot
    sound:setPos(Holo_Base:getPos())
    sound:pause()
    sound:setTime(0)
    sound:play()
end)


net.receive("hurt", function(len)
    if not isValid(Holo_Base) then return end
    
    local newHealth = net.readFloat()
    
    if newHealth > 0 then
        if newHealth < _health then
            local sound = table.random(sounds_hurt)
            sound:setPos(Holo_Base:getPos())
            sound:pause()
            sound:setTime(0)
            sound:play()
        end
    else
        _isAlive = false
        local sound = sounds_other.death
        sound:setPos(Holo_Base:getPos())
        sound:play()
    end
    _health = newHealth
end)


function loadUrl(name, url, ar, volume, temp, isDict, callback)
    if temp > 5 then 
        return 
    end
    
    bass.loadURL(url, "3d noblock noplay", function(Sound)
        if !isValid(Sound) then
            timer.simple(AgainLoadSoundDelay, function()
                loadUrl(name, url, ar, volume, temp + 1, isDict, callback)
            end)
            return 
        end
        
        if isDict then
            ar[name] = Sound
        else
            table.insert(ar, Sound)
        end
        
        Sound:setLooping(false)
        Sound:setPitch(Speed)
        Sound:setVolume(volume) 
        Sound:setFade(1000, 10000)
        
        if callback then
            callback(name, url, Sound)
        end
    end)
    
end


for k, url in pairs(soundUrls_main) do
    loadUrl(k, url, sounds_main, SoundVolumeMain, 0)
end
for k, url in pairs(soundUrls_hurt) do
    loadUrl(k, url, sounds_hurt, SoundVolumeHurt, 0)
end
loadUrl('spawn', soundUrls_other.spawn, sounds_other, SoundVolumeSpawn, 0, true)
loadUrl('death', soundUrls_other.death, sounds_other, SoundVolumeDeath, 0, true)
loadUrl('shoot', soundUrls_other.shoot, sounds_other, SoundVolumeShoot, 0, true)


timer.create("main", 10, 0, function()
    if not isValid(Holo_Base) or not _isAlive then return end
    
    local sound = table.random(sounds_main)
    sound:setPos(Holo_Base:getPos())
    sound:play()
    
end)

------------------------------------ Render  --------------------------------------------------

local text = render.createFont("Arial" -- font
                                    ,25 -- size
                                    ,100 -- weight
                                    ,false -- antialias
                                    ,false -- additive
                                    ,false -- shadow
                                    ,false -- outline
                                    ,false -- blur
                                    ,false -- extended
                                    )
render.createRenderTarget("template")
render.createRenderTarget("screen")
render.createRenderTarget("TargetScreen")
    
local m = material.create("VertexLitGeneric")
m:setTextureRenderTarget("$basetexture", "TargetScreen")

local VertexAlpha= false
local VertexColor= false
local AlphaTest= false
local Additive= HaveAlpha
local Translucent= false

local flags = 
    (VertexColor and 16 or 0) +
    (VertexAlpha and 32 or 0) +
    (Additive and 128 or 0) +
    (AlphaTest and 256 or 0) +
    (Translucent and 2097152 or 0)
    
    
if flags ~= 0 then
    m:setInt("$flags",  
        flags)    
end
m:recompute()


local holo = holograms.create(chip():getPos(), chip():getAngles(), "models/holograms/plane.mdl", Vector(1))
holo:setColor(Color(0,0,0,1))
holo:setMaterial("!" .. m:getName())
holo:suppressEngineLighting(true)


function filterImage()
    render.setFilterMin(1)
    render.setFilterMag(1)
end


local IsRect = true
local _oldFOV = 0
function fovHandler(newFOV)
    if _oldFOV == newFOV then return end
    _oldFOV = newFOV
    
    local ResK = Height / Width
    FovH = newFOV * math.pi / 180
    FovV = 2 * math.atan(math.tan(FovH/2) / ResK)
    
    local _w = 2 * RenderOffset * math.tan(FovV/2)
    local _h = 2 * RenderOffset * math.tan(FovH/2)
    
    local kk = IsRect and (Height/Width) or 1

    holo:setSize(Vector(_h*0.565, _w*0.565 * kk, 1))
end


hook.add("renderoffscreen", "InitTemplate", function()
    hook.remove("renderoffscreen", "InitTemplate")
    
    Width, Height = render.getGameResolution()
    
    render.selectRenderTarget("template")
    
    render.clear(Color(0,0,0,0))
    
    render.setFont(text)
    render.setColor(Color(255,255,255,255))
    render.drawText(512, 20, "Wither", 1)
    
    --render.drawRectOutline(512-150, 70, 300, 25, 2)
    local _k = 0.3
    render.setColor(Color(150*_k,100*_k,255*_k))
    render.drawRoundedBox(100, 512-200, 50, 400, 8)

end)


hook.add("renderoffscreen", "Camera", function()
    --if quota() > 0.4 then return end
    
    render.selectRenderTarget("screen")
    render.clear(Color(0,0,0,0))

    render.setRenderTargetTexture("template")
    filterImage()
    render.drawTexturedRect(0,0,1024,1024)
    
    render.setColor(Color(150,100,255))
    render.drawRoundedBox(100, 512-200, 50, 400*(_health/Health), 8)
    render.setColor(Color(255,255,255,255))
end)


hook.add("renderoffscreen", "", function()
    
    render.selectRenderTarget("TargetScreen")
    render.clear(Color(0, 0, 0, 0))
    
    render.setRenderTargetTexture("screen")
    filterImage()
    render.drawTexturedRect(0,0,1024,1024)
    render.setColor(Color(255,255,255,255))
end)


hook.add("renderscene", "setPos", function(origin, angles, fov)
    if not isValid(Holo_Base) then return end
    
    local inSphere = Holo_Base:getPos():getDistance(origin) < RenderRadius
    
    if RenderOn and inSphere then
        fovHandler(fov)
        
        local _, eyeA = localToWorld(Vector(), Angle(90,0,180), Vector(), angles)
        
        holo:setPos(origin + angles:getForward()*RenderOffset)
        holo:setAngles(eyeA)
        
        local distance = Holo_Base:getPos():getDistance(origin)
        local x = math.clamp((math.abs(distance-RenderRadius) / RenderRadius), 0, 0.99)*RenderMaxAlpha

        holo:setColor(Color(255,255,255, 255*x))
    else
        holo:setPos(Vector())
    end
end)

--------------------------------------------------------------------------------------
