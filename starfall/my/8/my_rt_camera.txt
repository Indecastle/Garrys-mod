--@name My RT Camera
--@author Markiz
--@client


local FPS = 60 -- frame rate

local FilterImageMin = TEXFILTER.NONE
local FilterImageMag = TEXFILTER.ANISOTROPIC


------------------------------------------
local frame = 0

local fontRec = render.createFont("Arial", 30, 300, true)
local text = render.createFont("Arial", 40, 300, true)
local small = render.createFont("Arial", 11, 400, true)

local startTime = timer.systime()


function quota()
    return math.max(quotaAverage(), quotaUsed()) / quotaMax()
end

------------------------------------------
render.createRenderTarget("myRTm")
local myRTm = material.create("gmodscreenspace")
myRTm:setTextureRenderTarget("$basetexture", "myRTm")
local m_portal_effect = material.load("effects/tp_eyefx/tpeye")
------------------------------------------

-----------------------------------------
local m2 = material.load("models/rendertarget")
--local m2 = render.createMaterial("effects/alyxmonitor_idle")

render.createRenderTarget("template")
render.createRenderTarget("screen")
    
local m = material.create("gmodscreenspace")
m:setTextureRenderTarget("$basetexture", "screen")


local VertexAlpha= false
local VertexColor= false
local AlphaTest= false
local Additive= false
local Translucent= false

local flags = 
    (VertexColor and 16 or 0) +
    (VertexAlpha and 32 or 0) +
    (Additive and 128 or 0) +
    (AlphaTest and 256 or 0) +
    (Translucent and 2097152 or 0)
    
    
if flags ~= 0 then
    m:setInt("$flags",  
        flags)    
end
m:recompute()
------------------------------------------


hook.add("render", "", function()
    local w, h = render.getResolution()
    
    render.clear(Color(0,0,0,0))
    render.setMaterial(myRTm)
    
    filterImage()
    render.drawTexturedRect(0,0,w,h)
    
    --render.clear(Color(0,0,0,0))
    --render.setMaterial(m_portal_effect)
    --render.drawTexturedRect(0,0,512,512)
    
    render.setRenderTargetTexture("screen")
    render.drawTexturedRect(0, 0, w, h)
end)


function renderCameraRect(size, lineWidth, lineLength)
    local rectStartXY = 512-size
    local rectEndXY = 512+size
    
    render.drawRect(rectStartXY, rectStartXY, lineWidth, lineLength) -- top-left
    render.drawRect(rectStartXY, rectStartXY, lineLength, lineWidth)

    render.drawRect(rectEndXY-lineWidth, rectEndXY-lineLength, lineWidth, lineLength) -- bottom-right
    render.drawRect(rectEndXY-lineLength, rectEndXY-lineWidth, lineLength, lineWidth)
    
    render.drawRect(rectEndXY-lineWidth, rectStartXY, lineWidth, lineLength) -- top-right
    render.drawRect(rectEndXY-lineLength, rectStartXY, lineLength, lineWidth)
    
    render.drawRect(rectStartXY, rectEndXY-lineLength, lineWidth, lineLength) -- bottom-left
    render.drawRect(rectStartXY, rectEndXY-lineWidth, lineLength, lineWidth)
end


function renderCameraCenterPlus(lineWidth, lineLength)
    local centerW = lineWidth / 2
    local centerL = lineLength / 2
    
    render.drawRect(512-centerW, 512-centerL, lineWidth, lineLength)
    render.drawRect(512-centerL, 512-centerW, lineLength, lineWidth)
end


function filterImage()
    render.setFilterMin(FilterImageMin)
    render.setFilterMag(FilterImageMag)
end


hook.add("renderoffscreen", "InitTemplate", function()
    hook.remove("renderoffscreen", "InitTemplate")
    
    render.selectRenderTarget("template")
    render.setLightingMode(0)
    
    render.clear(Color(0,0,0,0))
    render.setColor(Color(255,255,255))

    renderCameraRect(462, 2   , 100)
    renderCameraRect(60, 2, 30)
    renderCameraCenterPlus(2, 40)
    
    render.setFont(fontRec)
    render.setColor(Color(255,255,255))
    render.drawText(510, 55, "REC")
    
    render.setFont(text)
    render.drawText(380, 950, "1/60")
    render.drawText(495, 950, "f2,8")
    render.drawText(590, 950, "ISO 200")
    
    render.drawRectOutline(838, 70, 50, 40)
    render.drawText(840, 70, "4K")
    render.drawText(890, 70, tostring(FPS))
    render.setFont(fontRec)
    render.drawText(930, 75, "fps")
    
    render.drawRectOutline(60, 70, 90, 30, 2)
    render.drawRectOutline(148, 75, 7, 20, 2)
    render.drawRect(64, 74, 10, 22)
    render.drawRect(64+12*1, 74, 10, 22)
    render.drawRect(64+12*2, 74, 10, 22)
    render.drawRect(64+12*3, 74, 10, 22)
    render.drawRect(64+12*4, 74, 10, 22)
    render.drawRect(64+12*5, 74, 10, 22)
    render.drawRect(64+12*5, 74, 10, 22)
end)

hook.add("renderoffscreen", "", function()
    if quota() > 0.4 then return end
    
    render.selectRenderTarget("screen")
    render.setLightingMode(0)
    render.clear(Color(0,0,0,0))

    render.setRenderTargetTexture("template")
    filterImage()
    render.drawTexturedRect(0,0,1024,1024)
    
    render.setColor(Color(255,255,255))

    render.setFont(fontRec)
    render.setColor(Color(200,0,0, 255/2 + 255/2 * math.sin((timer.systime()*6) % 360)))
    render.drawFilledCircle(490, 70, 10)
    
    render.setColor(Color(255,255,255))
    render.setFont(text)
    local time = os.date('!%H:%M:%S', timer.systime() - startTime)
    local ms = string.match(tostring(os.clock()), "%d%.(%d+)") or ''
    render.drawText(430, 900, string.format("%s:%s", time, ms:sub(1,2)))
    
    
    local now = timer.systime()
    if frame > now then return end
    frame = now + 1/FPS
    
    render.selectRenderTarget("myRTm")
    render.clear(Color(0, 0, 0, 0))
    render.setMaterial(m2)
    render.setLightingMode(2)
    filterImage()
    render.drawTexturedRect(0,0,1024,1024)
end)