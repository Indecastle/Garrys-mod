--@name Minecraft Ghast
--@author Markiz
--@shared



local E = chip()
local _ghastActiveList = {}

if SERVER then
    
    local GhastClass = class("GhastClass")
    
    
    
    function GhastClass:initialize(pos)
        self.ID = ''..math.random(10000)..'_'..math.random(10000)..'_'..math.random(10000)
        self.model = "models/hunter/blocks/cube2x2x2.mdl"
        
        propBase = prop.create(pos, E:getAngles(), self.model, true)
        propBase:setAngles(E:getAngles())
        propBase:setColor(Color(0,0,0,0))
        propBase:setMaterial("models/debug/debugwhite")
    
        self.propBase = propBase or nil
        self.isDisposed = false
        
        self.forward = propBase:getForward()
        self.head = hologram.create(propBase:getPos(), self.forward and self.forward:getAngle() or Angle(), "models/hunter/blocks/cube2x2x2.mdl", Vector(1.0, 1.0, 1,0))
        self.head:setMaterial("models/debug/debugwhite")
        self.head:setParent(propBase)
        self.head:setColor(Color(240,240,240))
        
        self:buildHolosFireState()
        self:buildHolosNotFireState()
        self:setFireState(false)
        
        self.legSpeed = 3
        self.legConfigList = { // field "Length" between 0 and 80
            {TimeDegreeOffset = 0, X = -38, Y =  35, Length = 60},
            {TimeDegreeOffset = 0, X =  25, Y =  35, Length = 40},
            
            {TimeDegreeOffset = 90, X =  0, Y =  20, Length = 40},
            
            {TimeDegreeOffset = 120, X = -38, Y =  5, Length = 40},
            {TimeDegreeOffset = 120, X =  25, Y =  5, Length = 60},
            
            {TimeDegreeOffset = 140, X =  0, Y =  -10, Length = 40},
            
            {TimeDegreeOffset = 170, X = -38, Y =  -25, Length = 60},
            {TimeDegreeOffset = 170, X =  25, Y =  -25, Length = 40},
            
            {TimeDegreeOffset = 200, X =  0, Y =  -40, Length = 40},
        }
        self:buildLegs()
        
        _ghastActiveList[self.ID] = self
        
        net.start("AddGhast")
        net.writeString(self.ID)
        net.writeEntity(self.propBase)
        net.send()
    end
    
    function GhastClass:buildHolosNotFireState()
        self.head_eye1 = holograms.create(self.head:localToWorld(Vector(47,-18,20)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.11,2.0,0.45))
        self.head_eye2 = holograms.create(self.head:localToWorld(Vector(47, 18,20)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.11,2.0,0.45))
        self.head_mouth = holograms.create(self.head:localToWorld(Vector(47,0,-25)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.11,2.0,0.45))
        
        self.head_eye1:setParent(self.head)
        self.head_eye2:setParent(self.head)
        self.head_mouth:setParent(self.head)
        
        self.head_eye1:setColor(Color(70,70,70))
        self.head_eye2:setColor(Color(70,70,70))
        self.head_mouth:setColor(Color(70,70,70))
        
        self.holoNoFireList = {self.head_eye1, self.head_eye2, self.head_mouth}
    end
    
    function GhastClass:buildHolosFireState()
        local head_eye11 = holograms.create(self.head:localToWorld(Vector(47,-18,20)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.11,2.0,0.45))
        local head_eye12 = holograms.create(self.head:localToWorld(Vector(47,-18,24)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.11,1.0,0.6))
        local head_eye13 = holograms.create(self.head:localToWorld(Vector(47.2,-15,20)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.11,0.5,0.45))
        
        local head_eye21 = holograms.create(self.head:localToWorld(Vector(47, 18,20)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.11,2.0,0.45))
        local head_eye22 = holograms.create(self.head:localToWorld(Vector(47,18,24)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.11,1.0,0.6))
        local head_eye23 = holograms.create(self.head:localToWorld(Vector(47.2,15,20)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.11,0.5,0.45))
        
        local head_mouth1 = holograms.create(self.head:localToWorld(Vector(47,0,-24)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.11,2.0,1.3))
        local head_mouth2 = holograms.create(self.head:localToWorld(Vector(47,0,-25)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.11,1.0,2.3))
        local head_mouth3 = holograms.create(self.head:localToWorld(Vector(47.2,0,-26)), self.head:getAngles(), "models/holograms/cube.mdl", Vector(0.11,1.0,1.0))
        
        head_eye11:setParent(self.head)
        head_eye12:setParent(self.head)
        head_eye13:setParent(self.head)
        head_eye21:setParent(self.head)
        head_eye22:setParent(self.head)
        head_eye23:setParent(self.head)
        head_mouth1:setParent(self.head)
        head_mouth2:setParent(self.head)
        head_mouth3:setParent(self.head)
        
        head_eye11:setColor(Color(70,70,70))
        head_eye12:setColor(Color(70,70,70))
        head_eye13:setColor(Color(255,70,70))
        head_eye21:setColor(Color(70,70,70))
        head_eye22:setColor(Color(70,70,70))
        head_eye23:setColor(Color(255,70,70))
        
        head_mouth1:setColor(Color(70,70,70))
        head_mouth2:setColor(Color(70,70,70))
        head_mouth3:setColor(Color(255,70,70))
        
        self.holoFireList = {head_eye11, head_eye12, head_eye13, head_eye21, head_eye22, head_eye23, head_mouth1, head_mouth2, head_mouth3}
    end
    
    function GhastClass:buildLegs()
        local x = (timer.systime()*2) % 360
        for i, data in ipairs(self.legConfigList) do
            local localPos = Vector(data.X, data.Y+2, -47)
            local length = math.clamp(data.Length-40, -40, 40)
            local legBone = hologram.create(self.head:localToWorld(localPos), self.forward and self.head:localToWorldAngles(Angle(120,0,0)), "models/hunter/plates/plate.mdl", Vector(1.0, 1.0, 1,0))
            local leg = hologram.create(legBone:localToWorld(Vector(length,6,0)), self.forward and legBone:localToWorldAngles(Angle(0,90,0)), "models/hunter/blocks/cube025x2x025.mdl", Vector(1.0, 1.0, 1,0))
            leg:setClip(i, true, Vector(0, 0, -46), Vector(0,0,-1), self.head)
            legBone:setParent(self.head)
            leg:setParent(legBone)
            leg:setColor(Color(240,240,240))
            leg:setMaterial("models/debug/debugwhite")
            legBone:setNoDraw(true)
            
            data.HoloBone = legBone
        end
    end

    function GhastClass:think()
        if self.isDisposed then return end
        for i, data in ipairs(self.legConfigList) do
            local x = (timer.curtime()*self.legSpeed + math.rad(data.TimeDegreeOffset)) % math.pi*2
            data.HoloBone:setAngles(self.head:localToWorldAngles(Angle(110+math.sin(x)*15, 0, 0)))
        end
    end
    
    function GhastClass:destruct()
        if self.isDisposed then throw("Ghast is already disposed") end
        _ghastActiveList[self.ID] = nil
        self.propBase:remove()
        self.isDisposed = true
        
        net.start("RemoveGhast")
        net.writeString(self.ID)
        net.send()
    end
    
    function GhastClass:hide()
        if self.isDisposed then return end
        self.head_eye1:setColor(Color(0,0,0,0))
        self.head_eye2:setColor(Color(0,0,0,0))
        self.head_mouth:setColor(Color(0,0,0,0))
        self.head:setColor(Color(0,0,0,0))
    end
    
    function GhastClass:setFireState(isFire)
        if self.isDisposed then return end
        for i, h in ipairs(self.holoNoFireList) do
            h:setColor(h:getColor():setA(isFire and 0 or 255))
        end

        for i, h in ipairs(self.holoFireList) do
            h:setColor(h:getColor():setA(isFire and 255 or 0))
        end
    end
    
    -----------------------------------------------------------------------------
    
    local ghast1 = GhastClass:new(E:getPos() + Vector(0, 0, 140))
    
    hook.add("think", "main", function()
        for k, ghast in pairs(_ghastActiveList) do
            ghast:think()
        end
    end)
    
    local a1 = true

    ghast1:setFireState(false)
    timer.create("", 0.5, 0, function()
        a1 = !a1
        ghast1:setFireState(a1)
    end)
    
    timer.create("test", 0.5, 4, function()
        GhastClass:new(E:getPos() + Vector(math.random(200), math.random(200), 140 + math.random(200)))
    end)
    
    hook.add("ClientInitialized", "cl_init", function(ply)
        local tab = {}
        for k, ghast in pairs(_ghastActiveList) do
            tab[k] = ghast.propBase
        end
        net.start("ActiveGhasts")
        net.writeTable(tab)
        net.send(ply)
    end)
    
    timer.simple(4, function()
        ghast1:destruct()
    end)
    
    return
end





--============================ CLIENT ======================================================



local _fireballMaterial = "effects/exit1"

---------------------------------------------------------------

local GhastClientClass = class("GhastClientClass")
local SoundManager = class("SoundManager")
    
function GhastClientClass:initialize(id, propBase)
    self.ID = id
    self.propBase = propBase
    self.isDisposed = false

    self:buildSounds()
end

function GhastClientClass:buildSounds()
    self.soundManagerMoans = SoundManager:new("https://raw.githubusercontent.com/Indecastle/Garrys-mod/refs/heads/master/starfall/Resources/ghast/moan_all.mp3", {
        [1] = {Start = 0.0, End = 0.65 },
        [2] = {Start = 0.7, End = 1.45},
        [3] = {Start = 1.45, End = 2.3 },
        [4] = {Start = 2.3, End = 3.1 },
        [5] = {Start = 3.1, End = 4.7 },
        [6] = {Start = 4.7, End = 6.75 },
        [7] = {Start = 6.75, End = 7.7 },
    }, 4000)
end

function GhastClientClass:think()
end

function GhastClientClass:destruct()
    if self.isDisposed then throw("Ghast is already disposed") end
    self.isDisposed = true
end

function GhastClientClass:playSoundMoan()
    if self.isDisposed then return end
    self.soundManagerMoans:playRandom(self.propBase:getPos())
end

---------------------------------------------------------------
    
function SoundManager:initialize(url, items, fadeMax)
    /*schema: 
    {
        url: string,
        items: dict[string: {Start: float, End: float}]
    }*/
    
    self._timerKey = ''..math.random(10000)..'_'..math.random(10000)..'_'..math.random(10000)
    
    self.Url = url
    self.Items = items
    
    bass.loadURL(url, "3d noblock noplay", function(Sound)
        Sound:setLooping(false)
        Sound:setPitch(1)
        Sound:setVolume(1)
        Sound:setFade(50, fadeMax)
        self.Sound = Sound
        --print(Sound:getLength())
    end)
    
end

function SoundManager:isLoaded()
    return self.Sound != nil
end

function SoundManager:play(key, pos)
    if !self:isLoaded() then return end
    local data = self.Items[key]
    self.Sound:pause()
    self.Sound:setPos(pos)
    timer.remove(self._timerKey)
    timer.create(self._timerKey, data.End - data.Start, 1, function()
        self.Sound:pause()
    end)
    self.Sound:setTime(data.Start)
    self.Sound:play()
end

function SoundManager:playRandom(pos)
    if !self:isLoaded() then return end
    local v, k = table.random(self.Items)
    self:play(k, pos)
end

---------------------------------------------------------------


net.receive("ActiveGhasts", function(len)
    local tab = net.readTable()
    for id, propBase in pairs(tab) do
        if isValid(propBase) then
            _ghastActiveList[id] = GhastClientClass:new(id, propBase)
        end
    end
end)

net.receive("AddGhast", function(len)
    local id = net.readString()
    local propBase = net.readEntity(function(ent)
        _ghastActiveList[id] = GhastClientClass:new(id, ent)
    end)
end)

net.receive("RemoveGhast", function(len)
    local id = net.readString()
    _ghastActiveList[id]:destruct()
    _ghastActiveList[id] = nil
end)

hook.add("think", "GhastClient", function()
    for id, ghast in pairs(_ghastActiveList) do
        ghast:think()
    end
end)


--############ Custom logic ###################



timer.create("ghastSounds", 6, 0, function()
    local closestGhast, dist
    
    for id, ghast in pairs(_ghastActiveList) do
        local newDist = ghast.propBase:getPos():getDistance(player():getPos())
        if closestGhast == nil then
            closestGhast = ghast
            dist = newDist
            continue
        end
        if newDist < dist then
            closestGhast = ghast
            dist = newDist
        end
    end
    
    closestGhast:playSoundMoan()
end)

