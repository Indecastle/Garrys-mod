--@name Map Radar fail
--@author Markiz
--@shared


local Performance = 10 // Manage to perfomance
local Performance_SendData = 10 // Manage to perfomance
local Performance_Cpu_Limit = 0.2 // Manage to perfomance
local Detail = 1

local Res_ = 200
local HalfRes_ = Res_ / 2
local Size_ = math.floor(Res_ / Detail)
//local Zoom_ = 2 ^ Zoom - 1.8

-- Serverside holograms can be transmited to the client if needed
if SERVER then
    
    function send_subData(subData)
        
        //while net.isStreaming() do coroutine.yield() end
        local stream = bit.tableToString(subData)
        net.start("get_data")
        net.writeStream(stream)
        net.send(owner())
    end
    
    function get_coro()
        return coroutine.wrap(function()
                local I_ = 1
                local J_ = 1
                local subData = {}
                for y=1, Size_ do
                    subData[J_] = {}
                    for x=1, Size_ do
                        I_ = I_ + 1
                        if I_ == Performance then
                            I_ = 1
                            coroutine.yield()
                        end
                        subData[J_][x] = (y-1)*Size_ + x
                        
                    end
                    
                    J_ = J_ + 1
                    if J_ == Performance_SendData or y == Size_ then
                        J_ = 1
                        print(y)
                        send_subData(subData)
                        table.empty(subData)
                    end
                end
                return true
            end)
    end
    

    local executing_data = get_coro()
    

    hook.add("think","",function()
        while quotaAverage() < quotaMax() * Performance_Cpu_Limit do
            if executing_data() then
                hook.remove("think","")
                
                //net.start("run_radar")
                //net.send(owner())
                
                return
            end
        end
    end)
    
else
    local data = {}
    local paint
    
    
    net.receive("get_data", function (len)
        local stream = net.readStream(function(data) 
            //local subData = bit.stringToTable(stream)
            //table.add(data, subData)
            //print(subData)
        end)
        
        
    end)
    net.receive("run_radar", function (len)
        printTable(data)
        //initHooks()
    end)
    
    
    function get_coro()
        return coroutine.wrap(function()
                local I_ = 0
                local time1 = timer.curtime()
                for y=0, Res_ do
                    for x=0, Res_ do
                        I_ = I_ + 1
                        if I_ == Performance then
                            I_ = 0
                            coroutine.yield()
                        end
                        
                        //render.setColor(color)
                        //render.drawRectFast(x*Detail, y*Detail, Detail, Detail)
                        
                    end
                    //coroutine.yield()
                end
                //print(timer.curtime() - time1)
                return true
            end)
    end
    
    
    function initHooks()
        paint = get_coro()
        
        hook.add("renderoffscreen","",function()
            render.selectRenderTarget("myrendertarget")
            if  permissionSatisfied then
                while quotaAverage() < quotaMax() * Performance_Cpu_Limit do
                    if paint() then
                        //hook.remove("renderoffscreen","")
                        //return
                        paint = get_coro()
                    end
                end
            end
        end)
        
        hook.add("render","",function()
            if not permissionSatisfied then
                render.setColor(Color(255, 255, 255))
                render.setFont("DermaLarge")
                render.drawText(256, 256 - 32, "Use me", 1)
                return
            end
            //if timer.curtime() > time1 then
                //time1 = timer.curtime() + 0.1
                render.setRenderTargetTexture("myrendertarget")
                render.drawTexturedRect(0,0,512,512)
            //end
        end)        
    end
end
