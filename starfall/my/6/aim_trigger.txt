--@name Aim trigger
--@author
--@shared


local HeadDegree = 5
local WarnDiffDegree = 80
local WarnLimitDistance = 1000
local HoldOnHeadDelay = 0.1  -- sec



local OO = owner()

if SERVER then
    net.receive("WarnAim", function (len, ply)
        local degree = net.readFloat(16)
        print(Color(255,255,0), 'Warning:   ', Color(100,255,200), 'Player', Color(200,0,200), ' [', Color(200,100,0), ply:getName(), Color(200,0,200), '] ', Color(100,255,200), 'maybe use the AIM')
    end)
    return
end






local O = player()


--if O ~= OO then return end

local _oldAngles = eyeVector() --O:getEyeAngles():getForward()
local _oldPos = eyePos() --O:getEyeAngles():getForward()
local _oldStateInVehicle = O:inVehicle()
local _oldStateLookingAtHead = false
local _holdState = false

local _lastTime = 0
local _lastTimeLookingAtHead = 0
local _s1 = sounds.create(OO, "NPC_FloorTurret.AlarmPing", true)


function warn(v)
    if O ~= OO then return end
    net.start("WarnAim")
    net.writeFloat(v, 16)
    net.send()
    
    _s1:stop()
    _s1:play()
end

function isLookingAtHead()
    for i, v in ipairs(find.allPlayers()) do
        local dir = eyeAngles():getForward()
        local dir2 = (v:getEyePos() - eyePos()):getNormalized()
        local cos = dir:dot(dir2)
        local degree = math.acos(cos) / 3.14 * 180
        if degree < HeadDegree then
            return true
        end
    end
    return false
end


--timer.create("Anti Aim trigger", 0.01, 0, function()
hook.add("think", "Anti Aim trigger", function()
    local newAngles = eyeVector()
    local newPos = eyePos()
    local newStateInVehicle = O:inVehicle()
    
    local acos = math.acos(newAngles:dot(_oldAngles))
    local degree = acos / 3.14 * 180
    --warn(tostring(newAngles:dot(_oldAngles)))
    local now = timer.curtime()
    
    
    local isLooking = isLookingAtHead()
    if isLooking ~= _oldStateLookingAtHead and isLooking then
        _lastTimeLookingAtHead = now + HoldOnHeadDelay
    end
    if !isLooking then
        _holdState = false
    end
    _oldStateLookingAtHead = isLooking
    
    
    if _oldStateInVehicle ~= newStateInVehicle then
        _lastTime = now + 0.5
    end
    if _oldPos:getDistance(newPos) < WarnLimitDistance 
        and degree > WarnDiffDegree 
        and isLooking then
            _holdState = true
    end
    
    
    if _holdState
        and _lastTime < now 
        and _lastTimeLookingAtHead < now then

        warn(degree)

        _holdState = false
        _lastTime = now + 2
    end
    
    --print(acos / 3.14 * 360)
    _oldAngles = newAngles
    _oldPos = newPos
    _oldStateInVehicle = newStateInVehicle
end)
