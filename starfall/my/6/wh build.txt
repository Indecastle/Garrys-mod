--@name WH Build
--@author Markiz
--@model models/maxofs2d/thruster_propeller.mdl
--@shared

local IsOnlyPlayers = true 

local Radius = 500
local Delay = 5  -- seconds

local ColorAlphaTime = 40
local ColorAlphaDistance = 150


-------------------------------------------------

local DelayDiffTimer = 0.4  -- seconds
local DelayTimerFind = 0.2  -- seconds

-------------------------------------------------

local sounds = {}
local sound = nil
local alpha = 255
local E = chip()
local part = nil
local grenades = {}
local soundValues = {}
local HitedEntitiesData = {}

E:setColor(Color(255,255,0,255))
E:setMaterial("models/debug/debugwhite")

if SERVER then
    --E:setPos(E:localToWorld(Vector(0,0,4)))
    --E:setFrozen(false)
    
    --E:setNocollideAll(true)
    --E:setUnbreakable(false)
    --E:enableMotion(true)
    
    hook.add("ClientInitialized", "", function(ply)
        --print(ply)
    end)
    
    return
end

--if player() ~= owner() then return end

------------------------

local m = material.create("UnlitGeneric")
m:setTexture("$basetexture","effects/flashlight/soft") -- effects/spark

local VertexAlpha= true
local VertexColor= true
local AlphaTest= false
local Additive= true
local Translucent= false

local flags = 
    (VertexColor and 16 or 0) +
    (VertexAlpha and 32 or 0) +
    (Additive and 128 or 0) +
    (AlphaTest and 256 or 0) +
    (Translucent and 2097152 or 0)
    
    
if flags ~= 0 then
    m:setInt("$flags",  
        flags)    
end
m:recompute()

------------------------


function table.first(t, func)    
    for i=1, #t do
        if func(t[i]) then
            return t[i]
        end
    end
    return nil
end


function createParticle(pos)
    local emitter = particle.create(pos, true)
    emitter:setNoDraw(false)
    part = emitter:add( m, pos, 500, 0, 0, 0, 0, 255, 0.3 ) -- Create a new particle at pos
    part:setCollide(true)
    part:setBounce(0)
    --part:setColor(Color(0,math.rand(150,200),255))
    part:setGravity( Vector( 0, 0, 0 ) ) -- Gravity of the particle
    if emitter and emitter:isValid() then emitter:destroy() end
end


hook.add("hologrammatrix", "setPos", function()
    if part then
        local eyeAngle = (-eyeVector()):getAngle() + Angle(0,0,-90)
        part:setAngles(eyeAngle)
    end
end)


function start(pos)
    local hitedEnts = find.inSphere(pos, Radius, function(ent)
        return ent ~= player()
            and (not IsOnlyPlayers or ent:getClass() == 'player')
            and (IsOnlyPlayers or ent:getClass() == 'player' or ent:getClass() == 'prop_physics')
            --and ent and isValid(ent) and ent:getPhysicsObject():isValid()
    end)
    
    for i, ent in ipairs(hitedEnts) do
        local t = table.first(HitedEntitiesData, function(t) return t.ent == ent end)
        if not t then
            local holo = holograms.create(E:getPos(), Angle(), ent:getModel(), Vector(1))
            holo:setMaterial("debug/debugportals")
            holo:setColor(Color(255,255,0, 0))
            holo:setParent( ent )
            holo:addEffects( 1 )
            table.insert(HitedEntitiesData, 1, { ent = ent, holo = holo, time = timer.curtime() + Delay, spawnTime = timer.curtime(), myTime = 0 })
        else
            t.time = timer.curtime() + Delay
        end
    end
end


timer.create('FindAndUpdateHolo', DelayTimerFind, 0, function()
    start(E:getPos())
end)


--timer.create('FindAndRemoveGrenades', 0.1, 0, function()
local _lastTime = timer.curtime()
hook.add("think", "UpdateHolo", function()
    local curtime = timer.curtime()
    local diffMyTime = curtime - _lastTime
    _lastTime = curtime
    
    for i, t in ipairs(HitedEntitiesData) do
        local diffTime = t.time - curtime
        if t.ent and t.ent:isValid() and (not t.ent:isPlayer() or t.ent:isAlive()) and diffTime > 0 then
            t.myTime = t.myTime + (diffTime > Delay-DelayDiffTimer and diffMyTime or -diffMyTime)
            t.myTime = math.clamp(t.myTime, 0, Delay)
        
            local distance = E:getPos():getDistance(t.ent:getPos())
            local distanceReverse = math.clamp(Radius - distance, 0, Radius)
            --if distance < Radius then
            --    t.time = timer.curtime() + Delay
            --end
            local myTime = math.max(0, t.myTime - DelayDiffTimer)
            t.holo:setColor(t.holo:getColor():setA(ColorAlphaTime*(myTime/Delay) + ColorAlphaDistance*(distanceReverse/Radius) ))
        else
            t.holo:setColor(Color(0,0,0,0))
            t.holo:remove()
            table.removeByValue(HitedEntitiesData, t)
        end
    end
end)
