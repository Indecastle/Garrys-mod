--@name Grenade WH 2
--@author Markiz
--@model models/items/grenadeammo.mdl
--@shared

local IsOnlyAttackerVisible = false
local IsOnlyPlayers = true 

local Radius = 300
local Delay = 2.5  -- seconds
local HeadDegree = 90

local Wait2 = 0.5
local DieTime = 10
local alphaVel = 5

local IsCreateHolo2 = true

local EnableSound = false
local Volume = 2

local soundPaths = {
    "sound/weapons/flashbang/flashbang_explode1.wav",
    "sound/weapons/flashbang/flashbang_explode2.wav",
}
local SoundBouncePath = "Flashbang.Bounce"


-------------------------------------------------

local sounds = {}
local sound = nil
local alpha = 255
local E = chip()
local part = nil
local grenades = {}
local soundValues = {}
local HitedPlayersData = {}


if SERVER then
    E:setPos(E:localToWorld(Vector(0,0,4)))
    E:setFrozen(false)
    E:setMaterial("models/debug/debugwhite")
    
    hook.add("ClientInitialized", "", function(ply)
        --print(ply)
    end)
    
    function sendMessage(netPlayer, target, position)
        if netPlayer == target then return end  
        net.start("EntityTakeDamage")
        net.writeEntity(target)
        net.writeVector(position)
        net.send(netPlayer)
    end
    
    hook.add('EntityTakeDamage', '', function(target, attacker, inflictor, amount, type, position, force)
        if false
            or IsOnlyAttackerVisible and attacker ~= player()
            or inflictor:getClass() ~= 'npc_grenade_frag'
            or type ~= 64 -- explosion
            or IsOnlyPlayers and target:getClass() ~= 'player'
            --or target == attacker 
            then return end
        
        if IsOnlyAttackerVisible then
            sendMessage(attacker, target, position)
        else
            for i, ply in ipairs(find.allPlayers()) do
                sendMessage(ply, target, position)
            end
        end
    end)
    
    return
end

--if player() ~= owner() then return end

------------------------

local m = material.create("UnlitGeneric")
m:setTexture("$basetexture","effects/flashlight/soft") -- effects/spark

local VertexAlpha= true
local VertexColor= true
local AlphaTest= false
local Additive= true
local Translucent= false

local flags = 
    (VertexColor and 16 or 0) +
    (VertexAlpha and 32 or 0) +
    (Additive and 128 or 0) +
    (AlphaTest and 256 or 0) +
    (Translucent and 2097152 or 0)
    
    
if flags ~= 0 then
    m:setInt("$flags",  
        flags)    
end
m:recompute()

------------------------


function table.first(t, func)    
    for i=1, #t do
        if func(t[i]) then
            return t[i]
        end
    end
    return nil
end


if EnableSound then
    E:emitSound(SoundBouncePath, 75, 100, Volume, 0)
    
    for i, path in ipairs(soundPaths) do
        bass.loadFile(path, '3d mono noplay', function(snd)
            if snd then
                sound = snd
                snd:setPitch(1.5)
                snd:setVolume(Volume)
                soundValues[#soundValues+1] = snd
            end
        end)
    end
    
    
end


function createParticle(pos)
    local emitter = particle.create(pos, true)
    emitter:setNoDraw(false)
    part = emitter:add( m, pos, 500, 0, 0, 0, 0, 255, 0.3 ) -- Create a new particle at pos
    part:setCollide(true)
    part:setBounce(0)
    --part:setColor(Color(0,math.rand(150,200),255))
    part:setGravity( Vector( 0, 0, 0 ) ) -- Gravity of the particle
    if emitter and emitter:isValid() then emitter:destroy() end
end


hook.add("hologrammatrix", "setPos", function()
    if part then
        local eyeAngle = (-eyeVector()):getAngle() + Angle(0,0,-90)
        part:setAngles(eyeAngle)
    end
end)


function start(ply, pos)
    if EnableSound and snd then
        --grenade:emitSound(SoundExplodePath, 75, 100, Volume, 0)
        local snd, _ = table.random(soundValues)
        snd:setPos(pos)
        snd:play()
    end
    
    --createParticle(pos)
    
    local t = table.first(HitedPlayersData, function(t) return t.player == ply end)
    if t then
        t.time = timer.curtime() + Delay
    else
        local holo = holograms.create(chip():getPos(), Angle(), ply:getModel(), Vector(1))
        holo:setMaterial("debug/debugportals")
        holo:setColor(Color(255,255,0, 255))
        holo:setParent( ply )
        holo:addEffects( 1 )
        table.insert(HitedPlayersData, 1, { player = ply, holo = holo, time = timer.curtime() + Delay })
    end
end


net.receive("EntityTakeDamage", function (len)
    local target = net.readEntity()
    local pos = net.readVector()
    start(target, pos)
end)


--timer.create('FindAndRemoveGrenades', 0.1, 0, function()
hook.add("tick", "FindAndRemoveGrenades", function()
    local curtime = timer.curtime()
    for i, t in ipairs(HitedPlayersData) do
        local diffTime = t.time - curtime
        if t.player and t.player:isValid() and diffTime > 0 then
            t.holo:setColor(t.holo:getColor():setA(255 * (diffTime / Delay) ))
        else
            t.holo:setColor(Color(0,0,0,0))
            t.holo:remove()
            table.removeByValue(HitedPlayersData, t)
        end
    end
end)
