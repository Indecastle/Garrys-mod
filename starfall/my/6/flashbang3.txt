--@name FlashBang 3
--@author Markiz
--@model models/items/grenadeammo.mdl
--@shared


local Radius = 1000
local HeadDegree = 90

local IsHookMode = true

local Wait2 = 1
local DieTime = 10
local alphaVel = 150

local EnableSound = false
local Volume = 2

local soundPaths = {
    "sound/weapons/flashbang/flashbang_explode1.wav",
    "sound/weapons/flashbang/flashbang_explode2.wav",
}
local SoundBouncePath = "Flashbang.Bounce"


-------------------------------------------------

--if player() ~= owner() then return end

local sounds = {}
local sound = nil
local holo = nil
local alpha = 255
local E = chip()
local part = nil
local grenades = {}
local soundValues = {}


if SERVER then
    E:setPos(E:localToWorld(Vector(0,0,4)))
    E:setFrozen(false)
    --E:setColor(Color(255,255,255,255))
    E:setMaterial("models/debug/debugwhite")
    --E:setNocollideAll(true)
    --E:setUnbreakable(false)
    --E:enableMotion(true)
    
    --timer.simple(DieTime, function()
    --    E:remove()
    --end)
    
    hook.add("ClientInitialized", "", function(ply)
        --print(ply)
    end)
    
    return
end

------------------------

local Material = "models/screenspace"
local Offset = 8
local _imageRatioH, _imageRatioW = 1, 1

local m2 = material.load(Material)

render.createRenderTarget("TargetScreen")
    
local m = material.create("VertexLitGeneric")
m:setTextureRenderTarget("$basetexture", "TargetScreen")


local VertexAlpha= false
local VertexColor= false
local AlphaTest= false
local Additive= HaveAlpha
local Translucent= false

local flags = 
    (VertexColor and 16 or 0) +
    (VertexAlpha and 32 or 0) +
    (Additive and 128 or 0) +
    (AlphaTest and 256 or 0) +
    (Translucent and 2097152 or 0)
    
    
if flags ~= 0 then
    m:setInt("$flags",  
        flags)    
end
m:recompute()


local holo = holograms.create(chip():getPos(), chip():getAngles(), "models/holograms/plane.mdl", Vector(1))
holo:setMaterial("!" .. m:getName())
holo:suppressEngineLighting(true)
holo:setColor(Color(255,255,255, 0))


local _oldFOV = 0
function fovHandler(newFOV)
    if _oldFOV == newFOV then return end
    _oldFOV = newFOV
    
    Width, Height = render.getGameResolution()
    
    local ResK = Height / Width
    FovH = newFOV * math.pi / 180
    FovV = 2 * math.atan(math.tan(FovH/2) / ResK)
    
    local _w = 2 * Offset * math.tan(FovV/2)
    local _h = 2 * Offset * math.tan(FovH/2)

    holo:setSize(Vector(_h*0.565*_imageRatioW, _w*0.565*_imageRatioH, 1))
end

------------------------

if EnableSound then
    E:emitSound(SoundBouncePath, 75, 100, Volume, 0)
    
    for i, path in ipairs(soundPaths) do
        bass.loadFile(path, '3d mono noplay', function(snd)
            if snd then
                sound = snd
                snd:setPitch(1.5)
                snd:setVolume(Volume)
                soundValues[#soundValues+1] = snd
            end
        end)
    end
    
    
end


function wait2()
    alpha = 255
    local oldTime = timer.systime()
    hook.add("think", "FlashBang", function()
        local newTime = timer.systime() 
        local diff = newTime - oldTime
        oldTime = newTime
        
        alpha = alpha - diff*alphaVel
        if alpha < 0 then 
            alpha = 0
            hook.remove("think", "FlashBang") 
            holo:setColor(Color(255,255,255,alpha))
            return
        end
        
        local color = holo:getColor()
        holo:setColor(color:setA(alpha))
    end)
end

function createParticle(pos)
    local emitter = particle.create(Vector(), true)
    emitter:setNoDraw(false)
    part = emitter:add( m, pos, 200, 0, 0, 0, 0, 255, 0.1 ) -- Create a new particle at pos
    part:setCollide(true)
    part:setBounce(0)
    --part:setColor(Color(0,math.rand(150,200),255))
    part:setGravity( Vector( 0, 0, 0 ) ) -- Gravity of the particle
    if emitter and emitter:isValid() then emitter:destroy() end
end

function enableHolo()
    alpha = 255
    holo:setColor(Color(255,255,255, 255))
    --holo:setParent(player())
end

--hook.add("hologrammatrix", "setPos", function()
hook.add("renderscene", "setPos", function(origin, angles, fov)
    if holo:getColor().a != 0 then
        fovHandler(fov)
        local _, eyeA = localToWorld(Vector(), Angle(90,0,180), Vector(), angles)
        holo:setPos(origin + angles:getForward()*Offset)
        holo:setAngles(eyeA)
    end
end)

function table.first(t, func)    
    for i=1, #t do
        if func(t[i]) then
            return t[i]
        end
    end
    return nil
end

function wait(pos)
    if EnableSound and snd then
        --grenade:emitSound(SoundExplodePath, 75, 100, Volume, 0)
        local snd, _ = table.random(soundValues)
        snd:setPos(pos)
        snd:play()
    end
    
    hook.add("renderoffscreen", "DrawImage", function()
        render.selectRenderTarget("TargetScreen")
        render.setLightingMode(2)
        render.clear(Color(0, 0, 0, 0))
        
        render.setMaterial(m2)
        render.drawTexturedRect(0,0,1024,1024)
        hook.remove("renderoffscreen", "DrawImage")
        
        createParticle(pos)
    
        if pos:getDistance(player():getPos()) > Radius then return end
        
        hook.remove("think", "FlashBang")
        enableHolo()
        
        local dir = eyeAngles():getForward()
        local dir2 = (pos - eyePos()):getNormalized()
        local cos = dir:dot(dir2)
        local degree = math.deg(math.acos(cos))
        if degree < HeadDegree then
            timer.remove('part2')
            timer.create('part2', Wait2, 1, function()
                wait2()
            end)
        else
            wait2()
        end
    end)
end


if IsHookMode then
    hook.add('EntityRemoved', '', function(ent)
        if not ent or not ent:isValid() or ent:getClass() ~= 'npc_grenade_frag' then return end
        wait(ent:getPos())
    end)
else
    hook.add('OnEntityCreated', '', function(ent)
        if ent:getClass() == 'npc_grenade_frag' then
            local t = table.first(grenades, function(t) return t.e == ent end)
            if not t then
                table.insert(grenades, 1, { e = ent, p = ent:getPos() })
                --ent:addCollisionListener(function(colData, collider)
                --    print(colData.Speed)
                --    print(colData.OurOldVelocity:Length())
                --end)
            end
        end
    end)
end
