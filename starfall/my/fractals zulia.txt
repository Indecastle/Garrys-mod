--@name fractals zulia
--@author Sparky
--@client
--@include my/complex.txt
complex = require("my/complex.txt")

-- This chip draws pixels to a rendertarget and then displays the result

render.createRenderTarget("myrendertarget")

//local time1 = 0


local Performance = 100 // Manage to perfomance
local Performance_Cpu_Limit = 0.7 // Manage to perfomance
local Detail = 5
local CountSet = 200

local Zoom = 1
local OffsetX = 500
local OffsetY = 100


// ##### don't touch !!! ########
local Res_ = 1024
local HalfRes_ = Res_ / 2
local Zoom_ = 2 ^ Zoom - 1.5

local MinX_ = -1.5
local MinY_ = -1.5
local MaxX_ = 1.5
local MaxY_ = 1.5
local dx_ = (MaxX_ - MinX_) / Res_ * Detail
local dy_ = (MaxY_ - MinY_) / Res_ * Detail

local oldIsPressed_MOUSE1 = false
local oldIsPressed_MOUSE2 = false
local oldIsPressed_UP = false
local oldIsPressed_DOWN = false
local oldIsPressed_Up_time = -1
local oldIsPressed_Down_time = -1
local oldIsPressed_LEFT = false
local oldIsPressed_RIGHT = false

local mouse = {
    { x=0, y=0 },
    { x=3, y=2 },
    { x=1.1, y=2 },
    { x=2.1, y=3.9 },
    { x=1.9, y=4 },
    { x=0.9, y=2.1 },
    { x=0.1, y=4 },
}
// ##### don't touch !!! ########


setupPermissionRequest({ "render.screen", "input" }, "See an example of render.screen.", true)

local permissionSatisfied = hasPermission("render.screen") and hasPermission("input")

hook.add("permissionrequest", "fractal_Markiz", function()
    permissionSatisfied = hasPermission("render.screen") and hasPermission("input")
    //if hasPermission("render.screen") then
    //    initHooks()
    //end
end)


function get_coro()
    return coroutine.wrap(function()
        local I_ = 0
        for y=0, Res_ / Detail do
            for x=0, Res_ / Detail do
            
                local I = 0
                local Z = complex.new((MinX_ + x*dx_) / Zoom_ + OffsetX/Res_,
                                      (MinY_ + y*dy_) / Zoom_ + OffsetY/Res_)
                
                while I < CountSet and complex.abs(Z) < 2 do
                    local Z1 = complex.pow(Z,2)
                    Z = complex.add(Z1, complex.new(-0.66, -0.3842))
                    I = I + 1
                    I_ = I_ + 1
                    if I_ == Performance then
                        I_ = 0
                        coroutine.yield()
                    end
                end
                
                if complex.abs(Z) >= 2 then
                    if complex.abs(Z) >= 2 then
                        Col = (CountSet - I) / CountSet
                        //Color = hsv2rgb(Col*120 + 150, 1, 1)
                        //W[X+Y*Res_]=rgb2digi(Color,3)
                        render.setColor(Color(Col*360*2 + Zoom + 100,1,1):hsvToRGB())
                        render.drawRectFast(x*Detail, y*Detail, Detail, Detail)
                    end
                else 
                    render.setColor(Color(0,0,0))
                    render.drawRectFast(x*Detail, y*Detail, Detail, Detail)
                end
            end
            //coroutine.yield()
        end
        return true
    end)
end


local paint = get_coro()


function reload_render()
    paint = get_coro()
    initHooks()
end

function zoom_handler(curx, cury, nearler)
    curx = curx*2 - HalfRes_
    cury = cury*2 - HalfRes_
    if nearler then
        OffsetX = OffsetX + curx * (MaxX_ - MinX_) / Zoom_
        OffsetY = OffsetY + cury * (MaxY_ - MinY_) / Zoom_
        Zoom = Zoom + 1
        Zoom_ = 2 ^ Zoom - 1.5
    else
        Zoom = Zoom - 1
        Zoom_ = 2 ^ Zoom - 1.5
    end
        
    reload_render()
end

function getMouse(curX, curY, scale)
    local copyMouse = table.copy(mouse)
    for i=1, #copyMouse do
        copyMouse[i].x = copyMouse[i].x*scale + curX
        copyMouse[i].y = copyMouse[i].y*scale + curY
    end
    return copyMouse
end

function drawMouse(curX, curY)
    render.setRenderTargetTexture()

    copyMouse = getMouse(curX, curY, 4)
    render.setColor(Color(255, 255, 255))
    render.drawPoly(copyMouse)
end


function initHooks()
    hook.add("renderoffscreen","",function()
        render.selectRenderTarget("myrendertarget")
        if permissionSatisfied then
            while math.max(quotaAverage(), quotaUsed()) < quotaMax() * Performance_Cpu_Limit do
                if paint() then
                    hook.remove("renderoffscreen","")
                    return
                end
            end
        end
    end)
    
    hook.add("render","",function()
        if not permissionSatisfied then
            render.setColor(Color(255, 255, 255))
            render.setFont("DermaLarge")
            render.drawText(256, 256 - 32, "Use me", 1)
            return
        end
        //if timer.curtime() > time1 then
            //time1 = timer.curtime() + 0.1
            render.setRenderTargetTexture("myrendertarget")
            render.drawTexturedRect(0,0,512,512)
        //end
        
        render.setColor(Color(255, 255, 255))
        render.setFont("DermaLarge")
        render.drawText(12, 0, "Zoom: 1:"..Zoom)
        render.drawText(500, 0, "CountSet: "..CountSet, 2)
        render.drawText(500, 480, "Detail: "..Detail, 2)
        
        
        
        
        local curx,cury = render.cursorPos(player())
        
        if curx then
            drawMouse(curx, cury)
            
            local newIsPressed_MOUSE1 = input.isMouseDown(MOUSE.MOUSE1)
            local newIsPressed_MOUSE2 = input.isMouseDown(MOUSE.MOUSE2)
            local newIsPressed_UP = input.isKeyDown(KEY.UP)
            local newIsPressed_DOWN = input.isKeyDown(KEY.DOWN)
            local newIsPressed_RIGHT = input.isKeyDown(KEY.RIGHT)
            local newIsPressed_LEFT = input.isKeyDown(KEY.LEFT)
            
            if oldIsPressed_MOUSE1 != newIsPressed_MOUSE1 then
                oldIsPressed_MOUSE1 = newIsPressed_MOUSE1
                if newIsPressed_MOUSE1 then
                    zoom_handler(curx, cury, true)
                end
            end
            
            if oldIsPressed_MOUSE2 != newIsPressed_MOUSE2 then
                oldIsPressed_MOUSE2 = newIsPressed_MOUSE2
                if newIsPressed_MOUSE2 then
                    if Zoom != 1 then
                        zoom_handler(curx, cury, false)
                    end
                end
            end
            
            
            if oldIsPressed_UP != newIsPressed_UP then
                oldIsPressed_UP = newIsPressed_UP
                if newIsPressed_UP then
                    if CountSet >= 100 then
                        CountSet = CountSet + 10
                    else
                        CountSet = CountSet + 1
                    end
                    reload_render()
                    oldIsPressed_Up_time = timer.curtime() + 1
                else
                    oldIsPressed_Up_time = -1
                end
            end
            
            if oldIsPressed_Up_time != -1 and timer.curtime() > oldIsPressed_Up_time  then
                if CountSet >= 100 then
                    CountSet = CountSet + 10
                else
                    CountSet = CountSet + 1
                end
            end
            
            if oldIsPressed_DOWN != newIsPressed_DOWN then
                oldIsPressed_DOWN = newIsPressed_DOWN
                if newIsPressed_DOWN then
                    if CountSet > 100 then
                        CountSet = CountSet - 10
                    elseif CountSet != 1 then
                        CountSet = CountSet - 1
                    end
                    reload_render()
                    oldIsPressed_Down_time = timer.curtime() + 1
                else
                    oldIsPressed_Down_time = -1
                end
            end
            
            if oldIsPressed_Down_time != -1 and timer.curtime() > oldIsPressed_Down_time  then
                if CountSet > 100 then
                    CountSet = CountSet - 10
                elseif CountSet != 1 then
                    CountSet = CountSet - 1
                end
            end
            
            if oldIsPressed_LEFT != newIsPressed_LEFT then
                oldIsPressed_LEFT = newIsPressed_LEFT
                if newIsPressed_LEFT then
                    if Detail != 1 then
                        Detail = Detail - 1
                        dx_ = (MaxX_ - MinX_) / Res_ * Detail
                        dy_ = (MaxY_ - MinY_) / Res_ * Detail
                    end
                    reload_render()
                end
            end
            
            if oldIsPressed_RIGHT != newIsPressed_RIGHT then
                oldIsPressed_RIGHT = newIsPressed_RIGHT
                if newIsPressed_RIGHT then
                    Detail = Detail + 1
                    dx_ = (MaxX_ - MinX_) / Res_ * Detail
                    dy_ = (MaxY_ - MinY_) / Res_ * Detail
                    reload_render()
                end
            end
        end
    end)

end

initHooks()



