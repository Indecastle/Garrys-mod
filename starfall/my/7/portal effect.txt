--@name Portal Effect
--@author
--@shared


local RadiusMode = true
local Radius = 500


local Material = "effects/tp_eyefx/tpeye" -- "matsys_regressiontest/background"
local HaveAlpha = true

local Offset = 8
local Resolution = 27


local Width, Height
local Fov = player():getFOV()

local Target
local On = false

local _NoEntity = entity(0)


if SERVER then
    local inputs = {
        On="number"
    }
    if !RadiusMode then
        inputs.Target = "entity"
    end
    wire.adjustPorts(
        inputs,
        {})
    
    hook.add("ClientInitialized", "cl_init", function(ply)
        local target = wire.ports.Target
        local on = wire.ports.On
        net.start("init")
        net.writeEntity(target and target:isValid() and target or _NoEntity)
        net.writeBool(on != 0)
        net.send(ply)
    end)
    
    hook.add("input","",function(inp, value)
        if inp == "Target" then
            net.start("wire_Target")
            net.writeEntity(value:isValid() and value or _NoEntity)
            net.send()
        elseif inp == "On" then
            net.start("wire_On")
            net.writeBool(value != 0)
            net.send()
        end
    end)
    
    return
end

net.receive("init", function(len)
    net.readEntity(function(ent)
        Target = ent
    end)
    On = net.readBool()
end)

net.receive("wire_Target", function (len)
    Target = net.readEntity()
    --print("!!"..tostring(Target))
end)
net.receive("wire_On", function (len)
    On = net.readBool()
    --print("!!"..tostring(On))
end)


local m2 = material.load(Material)

render.createRenderTarget("TargetScreen")
    
local m = material.create("VertexLitGeneric")
m:setTextureRenderTarget("$basetexture", "TargetScreen")


local VertexAlpha= false
local VertexColor= false
local AlphaTest= false
local Additive= HaveAlpha
local Translucent= false

local flags = 
    (VertexColor and 16 or 0) +
    (VertexAlpha and 32 or 0) +
    (Additive and 128 or 0) +
    (AlphaTest and 256 or 0) +
    (Translucent and 2097152 or 0)
    
    
if flags ~= 0 then
    m:setInt("$flags",  
        flags)    
end
m:recompute()


local holo = holograms.create(chip():getPos(), chip():getAngles(), "models/holograms/plane.mdl", Vector(1))
holo:setMaterial("!" .. m:getName())
holo:suppressEngineLighting(true)


hook.add("renderoffscreen", "Resolution", function()
    hook.remove("renderoffscreen", "Resolution")
    Width, Height = render.getGameResolution()
    --print(Width, Height, ' - ', Fov)
    
    local ResK = Height / Width
    local FovK = Fov / 100
    
    holo:setSize(Vector(Resolution * ResK * FovK, Resolution * FovK, 1000))
end)

hook.add("renderoffscreen", "", function()
    render.selectRenderTarget("TargetScreen")
    render.clear(Color(0, 0, 0, 0))
    
    render.setMaterial(m2)
    --render.setColor(Color(255,255,255,255))
    --render.setLightingMode(0)
    render.drawTexturedRect(0,0,1024,1024)
end)


--if owner() == player() then
hook.add("hologrammatrix", "setPos", function()
    local inSphere = chip():getPos():getDistance(player():getPos()) < Radius
    
    if On and (RadiusMode and inSphere or Target == player()) then
        local vehicle = player():getVehicle()
        local eyeP = eyePos()
        local eyeA = eyeAngles()
        if vehicle == nil or !vehicle:isValid() then
            eyeA.r = -eyeA.r
        else
            local va = vehicle:getAngles()
            
            --va.p = -va.p/2
            --va.r = -va.r/2
            --print(va)
            eyeA = eyeA + va
        end
        holo:setPos(eyeP + eyeA:getForward()*Offset)
        --holo:setAngles((-eyeD):getAngle() + Angle(90,0,0))
        holo:setAngles(eyeA + Angle(90,0,180))
        
        local distance = chip():getPos():getDistance(player():getPos())
        local x = math.min(1, ((Radius-distance) / Radius))
        holo:setColor(Color(255*x,255*x,255*x))
    else
        holo:setPos(Vector())
    end
end)
--end