--@name Skibidi DISSOLVE
--@author Markiz
--@shared

local Respawn = false
local SpawnCounts = 1

local Radius = 1000

local Force = 35--65
local ForceUp = 250
local IsDissolving = true

----- music ------
local Volume = 1.5
local MusicSpeed = 1
local IsLooping = true
local SoundFadeMax = 500
----- music ------

local HeadModels = {
    "models/gman_high.mdl",
    "models/Kleiner.mdl",
    "models/Humans/Group03/Male_01.mdl",
    "models/Humans/Group01/Male_05.mdl",
}

local PropScaleData = {
    { Model = "models/xqm/rails/gumball_1.mdl", PropRadius = 15, Scale = 1, Health = 60},
    { Model = "models/hunter/misc/sphere1x1.mdl", PropRadius = 23.0, Scale = 2, Health = 100},
    { Model = "models/hunter/misc/sphere2x2.mdl", PropRadius = 47.0, Scale = 4, Health = 200 },
}

------------------------------------------------------------------------------------

local SoundData = {
    { Speed = 1, Url = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/refs/heads/master/starfall/Resources/Skibidi/skibidi_remix.mp3" },
    { Speed = 1, Url = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/refs/heads/master/starfall/Resources/Skibidi/skibidi_remix.mp3" },
    { Speed = 1, Url = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/refs/heads/master/starfall/Resources/Skibidi/skibidi_remix.mp3" },
    { Speed = 1, Url = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/refs/heads/master/starfall/Resources/Skibidi/skibidi.mp3" },
    { Speed = 1, Url = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/refs/heads/master/starfall/Resources/Skibidi/skibidi_only.mp3" },
    { Speed = 0.65, Url = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/refs/heads/master/starfall/Resources/Skibidi/skibidi_slowed.mp3" },
    { Speed = 0.7, Url = "https://raw.githubusercontent.com/Indecastle/Garrys-mod/refs/heads/master/starfall/Resources/Skibidi/skibidi_starwars.mp3" },
}

-- =================================================================================

local ExplodeModels = {
    "models/props_phx/ww2bomb.mdl",
    "models/props_phx/misc/potato_launcher_explosive.mdl",
    "models/props_junk/propane_tank001a.mdl",
    "models/props_phx/oildrum001_explosive.mdl",
    "models/props_c17/oildrum001_explosive.mdl",
}


function getFrameTime()
    return timer.frametime() * 30
end

function getNewId()
    return ''..math.random(10000)..'_'..math.random(10000)..'_'..math.random(10000)
end

local E = chip()
local _skibidiActiveList = {}

if SERVER then
    
    local SkibidiClass = class("SkibidiClass")
    
    ToiletData = {
        --{ Model = "models/hunter/plates/plate.mdl", OffsetToilet = 0, OffsetHead = 0 },
        { Model = "models/props_wasteland/prison_toilet01.mdl", OffsetToilet = 14, OffsetHead = -19 },
        { Model = "models/props_c17/FurnitureToilet001a.mdl", OffsetToilet = 47, OffsetHead = -47},
    }
    
    function explodeTo(pos)
        while #ExplodeModels > 0 do
            local succeed = pcall(function()
                local p = prop.create(pos, Angle(), ExplodeModels[1])
                p._isMySF = true
                p:setNoDraw(true)
                p:breakEnt()
            end)
            
            if succeed then return end
            table.remove(ExplodeModels, 1)
        end
    end
    
    function isValidPlayerOrNPC(ent)
        if not isValid(ent) then return false end
        return ent ~= nil and ent:isValid() and ent:isValidPhys()
            and (ent:isPlayer() and ent:isAlive() and !ent:hasGodMode() and !ent:inVehicle()
                or ent:isNPC()) 
    end
    
    local players = find.allPlayers()
    
    function SkibidiClass:initialize(pos, headModel, toiletDataIndex, propScaleType, soundItemIndex)
        self.ID = getNewId()
        _skibidiActiveList[self.ID] = self
        self._toiletDataItem = ToiletData[toiletDataIndex]
        self._propScaleDataIndex = propScaleType
        self._propScaleDataItem = PropScaleData[propScaleType]
        self._soundItemIndex = soundItemIndex
        
        self._health = self._propScaleDataItem.Health
        self._isAlive = true
        self.isDisposed = false
        
        self._propBase = prop.create(pos, Angle(), self._propScaleDataItem.Model, false)
        self._propBase:setFrozen(false)
        self._propBase:setColor(Color(0,0,0,0))
        self._propBase:setPhysMaterial("gmod_silent")
        --self._propBase:setUnbreakable(true)
        self._physEnt = self._propBase:getPhysicsObject()
        if IsDissolving then
            self._physEnt:addGameFlags(FVPHYSICS.DMG_DISSOLVE)
        end
        self._physEnt:addGameFlags(FVPHYSICS.NO_PLAYER_PICKUP)
        --self._physEnt:enableGravity(false)
        self._forceUp = Vector(0,0,self._propBase:getMass()*ForceUp)
        
        self._baseHolo = hologram.create(chip():getPos(), chip():getAngles(), "models/holograms/cube.mdl", Vector(1))
        self._baseHolo:setNoDraw(true)
        self._toiletHolo = hologram.create(self._baseHolo:getPos(), self._baseHolo:getAngles(), self._toiletDataItem.Model, Vector(self._propScaleDataItem.Scale))
        self._headHolo = hologram.create(self._toiletHolo:localToWorld(Vector(3, 0, self._toiletDataItem.OffsetHead*self._propScaleDataItem.Scale)), self._baseHolo:getAngles(), headModel)
        self._headHolo:setNoDraw(true)
        self._headHolo:setScale(Vector(0.2 * self._propScaleDataItem.Scale))
        self._headHolo:setParent(self._toiletHolo)
        --self._toiletHolo:setParent(Base)
        self._headHolo:setClip(1, true, Vector(0, 0, 5 + self._toiletDataItem.OffsetHead) * self._propScaleDataItem.Scale, Vector(0,0,1), self._toiletHolo)
            
        self._baseHolo:setPos(self._propBase:getPos())
        self._baseHolo:setParent(self._propBase)
        
        self._timerScreamingKey = self.ID .. "_timerScreamingKey"
        self._closestPlayer = nil
        
        net.start("AddSkibidi")
        net.writeString(self.ID)
        net.writeInt(self._soundItemIndex, 8)
        net.writeInt(self._propScaleDataIndex, 8)
        net.writeEntity(self._propBase)
        net.writeEntity(self._headHolo)
        net.send()
    end
    
    
    function SkibidiClass:destruct()
        --if self.isDisposed then throw("Skibidi is already disposed") end
        if self.isDisposed then return end
        _skibidiActiveList[self.ID] = nil
        self._propBase:remove()
        self._toiletHolo:remove()
        self.isDisposed = true
        self._isAlive = false
        
        net.start("RemoveGhast")
        net.writeString(self.ID)
        net.send()
    end
    
    
    function SkibidiClass:isAlive()
        return self._isAlive and not self.isDisposed and isValid(self._propBase)
    end
    
    
    function SkibidiClass:think02sec()
        if not self:isAlive() then return end
        self:findTarget()
    end
    
    
    function SkibidiClass:think2sec()
        if self._propBase ~= nil and self._propBase:isValid() and self._propBase:isValidPhys()  and isValidPlayerOrNPC(self._closestPlayer) then
            self._propBase:applyForceCenter(self._forceUp)
        end
    end
    
    
    function SkibidiClass:think()
        if not self:isAlive() then return end
        if self._propBase ~= nil and self._propBase:isValid() and isValidPlayerOrNPC(self._closestPlayer) then
            local targetPos = self._closestPlayer:obbCenterW()
            local dir = (targetPos - self._propBase:getPos()):getNormalized()
            dir = dir:setZ(0):getNormalized()
            local xyVel = self._propBase:getVelocity()
            xyVel.z = 0
            self._physEnt:applyForceCenter(dir * self._propBase:getMass() * Force - xyVel*(self._propBase:getMass()/8))
        end
        
        if isValid(self._propBase) then
            --local scale = 20 + math.sin(timer.systime()*0.5)*10
            --self._toiletHolo:setScale(Vector(scale))
            self._toiletHolo:setPos(self._propBase:getPos() + Vector(0, 0, -self._propScaleDataItem.PropRadius + self._toiletDataItem.OffsetToilet * self._propScaleDataItem.Scale))
            local ang = self._propBase:getVelocity():getAngle()
            ang:setP(0)
            self._toiletHolo:setAngles(ang)
        end
    end
    
    
    function SkibidiClass:findTarget()
        if self._propBase ~= nil and self._propBase:isValid() then
            self._propBase:setNocollideAll(false)
            local validPlayers = find.inSphere(self._propBase:getPos(), Radius, isValidPlayerOrNPC)
            validPlayers = find.sortByClosest(validPlayers, self._propBase:getPos())
            self._closestPlayer = #validPlayers ~= nil and validPlayers[1] or nil
        else
            self._closestPlayer = nil
        end
    end
    
    
    function SkibidiClass:entityTakeDamage(target, attacker, amount, type)
        if not self._isAlive or not isValid(self._propBase) then return end
        if not isValid(attacker) or attacker._isMySF or type == 67108865 or type == 134217792 then return end -- 67108865 (DMG_CRUSH + DMG_DISSOLVE), 134217792 (DMG_BLAST + DMG_BLAST_SURFACE)
        
        self._health = math.max(0, self._health - amount)
        
        self:setScreamState(true)
        
        if self._health <= 0 then
            self._isAlive = false
            local pos = self._propBase:getPos()
            explodeTo(pos)
            self:destruct()
        else
            timer.create(self._timerScreamingKey, 0.3, 1, function()
                self:setScreamState(false)
            end)
        end
    end
    
    function SkibidiClass:setScreamState(isScreaming)
        if not self:isAlive() then return end
        local color = isScreaming and Color(250, 170, 170) or Color(255)
        self._toiletHolo:setColor(color)
    end
    
    -------------------------------------------------------------------------
    
    timer.create("findPlayer", 0.2, 0, function()
        for k, ent in pairs(_skibidiActiveList) do
            ent:think02sec()
        end
    end)
    
    timer.create("jump", 2, 0, function()
        for k, ent in pairs(_skibidiActiveList) do
            ent:think2sec()
        end
    end)
    
    hook.add("think", "run", function()
        for k, ent in pairs(_skibidiActiveList) do
            ent:think()
        end
    end)
    
    hook.add("EntityTakeDamage", "dmg", function(target, attacker, inflictor, amount, type, position, force)
        for k, ent in pairs(_skibidiActiveList) do
            if ent._propBase == target then
                ent:entityTakeDamage(target, attacker, amount, type)
            end
        end
    end)
    
    hook.add("EntityRemoved", "", function(ent)
        for k, skibidi in pairs(_skibidiActiveList) do
            if ent == skibidi._propBase then
                skibidi:destruct()
                return
            end
        end 
    end)
    
    hook.add("ClientInitialized", "cl_init", function(ply)
        local tab = {}
        for k, ent in pairs(_skibidiActiveList) do
            tab[k] = {
                PropBase = ent._propBase,
                HeadHolo = ent._headHolo,
                SoundItemIndex = ent._soundItemIndex,
                PropScaleDataIndex = ent._propScaleDataIndex
            }
        end
        net.start("ActiveEnts")
        net.writeTable(tab)
        net.send(ply)
    end)
    
    
    --================= CUSTOME CODE ================================================
    
    function testSpawnEnt()
        local headModel, _ = table.random(HeadModels)
        local toiletDataindex, _ = math.random(1, #ToiletData)
        local propScaleDataIndex, _ = math.random(1, #PropScaleData)
        local soundDataIndex, _ = math.random(1, #SoundData)
        return SkibidiClass:new(E:getPos() + Vector(math.random(-50, 50), math.random(-50, 50), 50), headModel, toiletDataindex, propScaleDataIndex, soundDataIndex)
        --return SkibidiClass:new(E:getPos() + Vector(math.random(-50, 50), math.random(-50, 50), 50), HeadModels[1], 2, 3, 6)
    end
    
    if Respawn then
        timer.create("", 0.5, 0, function()
            if #table.getKeys(_skibidiActiveList) < SpawnCounts then
                testSpawnEnt()
            end
        end)
    else
        local ents = { testSpawnEnt() }
        local i = 1
        timer.create("test123", 0.5, 0, function()
            if i < SpawnCounts then
                i = i + 1
                table.insert(ents, testSpawnEnt())
            end
            local allDisposed = true
            for i, ent in ipairs(ents) do
                if not ent.isDisposed then
                    allDisposed = false
                    break
                end
            end
            if allDisposed then
                timer.remove("test123")
                timer.simple(1.5, function()
                    chip():remove()
                end)
            end
        end)
    end
    
    return
end

--=================================================================



---------- CLIENT ---------------------------------------------------------------

local SkibidiClientClass = class("SkibidiClientClass")


function SkibidiClientClass:initialize(id, soundItemIndex, propScaleDataIndex, propBase, headHolo)
    self.ID = id
    self._soundDataItem = SoundData[soundItemIndex]
    self._propBase = propBase
    self._headHolo = headHolo
    timer.simple(0.2, function()
        if isValid(self._headHolo) then
            self._headHolo:setNoDraw(false)
        end
    end)
    self._propScaleDataItem = PropScaleData[propScaleDataIndex]
    self._health = self._propScaleDataItem.Health
    self.isDisposed = false
    self._isAlive = true
    self._headScale = 12

    self._i1 = 0
    self._i2 = 0
    self._i3 = 0
    self._maxI1 = 40
    self._maxI3 = 5.0
    self._move1 = 8 * self._soundDataItem.Speed
    self._move2 = 20 * self._soundDataItem.Speed
    self._move3 = 1.0 * self._soundDataItem.Speed
    self._index1 = 0
    self._index2 = 0
    self._index3 = 0
    
    self._callbackState = self.PositionState
    
    self._headBone = self._headHolo:lookupBone("ValveBiped.Bip01_Head1")
        
    local spine4_bone = self._headHolo:lookupBone("ValveBiped.Bip01_Spine4")
    local neck1_bone = self._headHolo:lookupBone("ValveBiped.Bip01_Neck1")
    local rClavicle_bone = self._headHolo:lookupBone("ValveBiped.Bip01_R_Clavicle")
    local lClavicle_bone = self._headHolo:lookupBone("ValveBiped.Bip01_L_Clavicle")
    local lUpperArm = self._headHolo:lookupBone("ValveBiped.Bip01_L_UpperArm")
    local rUpperArm = self._headHolo:lookupBone("ValveBiped.Bip01_R_UpperArm")
    
    self._headHolo:manipulateBoneScale(spine4_bone, Vector(0))
    self._headHolo:manipulateBoneScale(neck1_bone, Vector(0))
    self._headHolo:manipulateBoneScale(lClavicle_bone, Vector(0))
    self._headHolo:manipulateBoneScale(lClavicle_bone, Vector(0))
    local bonesCount = self._headHolo:getBoneCount()
    for i=1, bonesCount do
        pcall(function()
            local name = self._headHolo:getBoneName(i)
            local bone = self._headHolo:lookupBone(name)
            self._headHolo:manipulateBoneScale(bone, Vector(0))
        end)
    end
    self._headHolo:manipulateBonePosition(lUpperArm, Vector(0,-100,0))
    self._headHolo:manipulateBonePosition(rUpperArm, Vector(0,-100,0))
    self._headHolo:manipulateBoneScale(self._headBone, Vector(self._headScale))
    
    self:buildSounds()
end


function SkibidiClientClass:buildSounds()
    self.soundManagerData = getSoundManagerData(self._soundDataItem.Url, self._propScaleDataItem.Scale)
end

function SkibidiClientClass:isAlive()
    return self._isAlive and not self.isDisposed and isValid(self._propBase) and isValid(self._headHolo)
end


function SkibidiClientClass:think()
    self:processSounds()
    self:manipulateBone()
end

function SkibidiClientClass:processSounds()
    local snd = self.soundManagerData.Sounds.Sound
    if not self:isAlive() or not isValid(snd) then return end
    snd:setPos(self._propBase:getPos())
end

function SkibidiClientClass:destruct()
    --if self.isDisposed then throw("Skibidi is already disposed") end
    if self.isDisposed then return end
    self.isDisposed = true
    self._isAlive = false
    self.soundManagerData.IsAvailable = true
    _skibidiActiveList[self.ID] = nil

    if isValid(self.soundManagerData.Sounds.Sound) then
        self.soundManagerData.Sounds.Sound:pause()
        self.soundManagerData.Sounds.Sound:setTime(0)
    end
end


function SkibidiClientClass:playSound()
    if self.isDisposed then return end

end


function SkibidiClientClass:manipulateBone()
    if not isValid(self._headHolo) then return end
    self:_callbackState()
end
    
function SkibidiClientClass:PositionState()
    self._i1 = self._i1 + self._move1 * getFrameTime()
    if self._i1 > self._maxI1 then
        self._i1 = self._maxI1
        self._move1 = -self._move1
        self._index1 = self._index1 + 1
    end
    if self._i1 < 0 then
        self._i1 = 0
        self._move1 = -self._move1
    end
    
    if self._index1 == 2 then
        self._index1 = 0
        self._callbackState = math.random() < 0.75 and self.AngleState or self.ScaleState
    end
    
    self._headHolo:manipulateBonePosition(self._headBone, Vector(30+self._i1, 30+self._i1, 0))
end
    
    
function SkibidiClientClass:AngleState()
    self._i2 = self._i2 + self._move2 * getFrameTime()
    if self._i2 > 360 then
        self._i2 = 0
        self._callbackState = self.PositionState
        self._index2 = math.random(0, 3)
    end
    
    local ang
    if self._index2 == 0 then ang = Angle(self._i2, 0, 0)
    elseif self._index2 == 1 then ang = Angle(-self._i2, 0, 0)
    elseif self._index2 == 2 then ang = Angle(0, 0, self._i2)
    elseif self._index2 == 3 then ang = Angle(0, 0, -self._i2)
    end
    self._headHolo:manipulateBoneAngles(self._headBone, ang)
end

function SkibidiClientClass:ScaleState()
    self._i3 = self._i3 + self._move3 * getFrameTime()
    if self._i3 > self._maxI3 then
        self._i3 = self._maxI3
        self._move3 = -self._move3
    end
    if self._i3 < 0 then
        self._i3 = 0
        self._move3 = -self._move3
        self._index3 = self._index3 + 1
    end
    
    if self._index3 == 2 then
        self._index3 = 0
        self._callbackState = self.PositionState
    end
    
    self._headHolo:manipulateBoneScale(self._headBone, Vector(self._headScale + self._i3))
end


------------------ SoundManagers ---------------------------------------------------------

local SoundManagers = {}

function getSoundManagerData(url, scale)
    for i, v in ipairs(SoundManagers) do
        if v.IsAvailable and v.Url == url then
            v.IsAvailable = false
            v.Sounds.Sound:play()
            return v
        end
    end
    
    local newManagerData = { 
        Sounds = { },
        Url = url,
        IsAvailable = false
    }
    
    bass.loadURL(url, "3d noblock noplay", function(Sound)
        newManagerData.Sounds.Sound = Sound
        Sound:setVolume(Volume)
        Sound:setLooping(IsLooping)
        Sound:setPitch(MusicSpeed)
        Sound:setFade(50, SoundFadeMax + 50*scale)
        
        Sound:play()
    end)
    
    
    table.insert(SoundManagers, newManagerData)
    return newManagerData
end

---------------------------------------------------------------------------

net.receive("ActiveEnts", function(len)
    local tab = net.readTable()
    for id, data in pairs(tab) do
        if isValid(data.PropBase) and isValid(data.HeadHolo) then
            _skibidiActiveList[id] = SkibidiClientClass:new(id, data.SoundItemIndex, data.PropScaleDataIndex, data.PropBase, data.HeadHolo)
        end
    end
end)

net.receive("AddSkibidi", function(len)
    local id = net.readString()
    local soundItemIndex = net.readInt(8)
    local propScaleDataIndex = net.readInt(8)
    local propBase, headHolo
    local handle = function()
        if propBase and headHolo then
            _skibidiActiveList[id] = SkibidiClientClass:new(id, soundItemIndex, propScaleDataIndex, propBase, headHolo)
        end
    end
    net.readEntity(function(ent)
        propBase = ent
        handle()
    end)
    net.readEntity(function(ent)
        headHolo = ent
        handle()
    end)
end)

net.receive("RemoveGhast", function(len)
    local id = net.readString()
    if not _skibidiActiveList[id] then return end
    _skibidiActiveList[id]:destruct()
end)

hook.add("think", "SkibidiClient", function()
    for id, ent in pairs(_skibidiActiveList) do
        ent:think()
    end
end)
