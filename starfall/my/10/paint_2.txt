--@name Paint 2
--@author Markiz
--@shared
--owneronly

--@include https://raw.githubusercontent.com/Jacbo1/Public-Starfall/main/SafeNet/safeNet.lua as SafeNet
--@include https://raw.githubusercontent.com/Jacbo1/Public-Starfall/refs/heads/main/Spawn%20Blocking/spawn_blocking.lua as SpawnBlocking
local oldNet = net
local net = require("SafeNet")
require("SpawnBlocking")


local IsAutoSyncScreen = false

local MouseScale = 3
local WorkRadius = 1000
local LineThickness = 1
local EraserBigSize = 30
local EraserSmallSize = 8
local CleanColor = Color(220,220,220)
local ToolbarBackgroundColor = Color(200,200,200, 255)

local ServerQuotaP, ClientQuotaP = 0.4, 0.4

----------------------------------------------------------------------------

function checkQuota(maxQuota)
    return math.max(quotaAverage(), quotaUsed()) < maxQuota
end

function checkQuotaP(maxQuota)
    return math.max(quotaAverage(), quotaUsed()) < quotaMax() * maxQuota
end

function validQuota(maxQuota)
    while !checkQuota(maxQuota) do
        coroutine.yield()
    end
end

function validQuotaP(maxQuota)
    while !checkQuotaP(maxQuota) do
        coroutine.yield()
    end
end


local _locks = {}
function isLockEvent(name, sec)
    local curtime = timer.curtime()
    _locks[name] = _locks[name] or curtime
    local isLock = curtime < _locks[name]
    if sec ~= nil and !isLock then
        _locks[name] = curtime + sec
    end

    return isLock
end

function setLockEvent(name, sec)
    _locks[name] = timer.curtime() + sec
end



corWrap(function()
--------------------------------------------------

local _o, _e = owner(), chip()

local _screenSize = 512
local _chunkCount = 1
local _chunkSize = _screenSize / _chunkCount


function compressColorData(colorData, startRow, rowCount)
    local binaryData = {}
    for y = startRow+1, startRow + rowCount do
        for x = 1, _screenSize do
            local color = colorData[y][x]
            table.insert(binaryData, string.char(color.r, color.g, color.b))
        end
        validQuotaP(ServerQuotaP)
    end
    
    local result = table.concat(binaryData)
    --printConsole('server - ' .. #result)
    return result
end


function decompressColorData(compressedData, rowCount, maxQuotaP)
    local binaryData = compressedData
    --printConsole('client - ' .. #compressedData)
    if not binaryData then return {} end
       
    local colorData = {}
    local index = 1
    
    for y = 1, rowCount do
        table.insert(colorData, {})
        for x = 1, _screenSize do
            if index + 2 <= #binaryData then
                local r = binaryData:byte(index)
                local g = binaryData:byte(index + 1)
                local b = binaryData:byte(index + 2)
                
                table.insert(colorData[y], Color(r, g, b, 255))
                index = index + 3
            else
                table.insert(colorData[y], Color(0,0,0))
            end
        end
        validQuotaP(maxQuotaP)
    end
    return colorData
end


local function drawLine(x0, y0, x1, y1, thickness, color, drawCircleCallback)
    local dx = math.abs(x1 - x0)
    local dy = math.abs(y1 - y0)
    local sx = x0 < x1 and 1 or -1
    local sy = y0 < y1 and 1 or -1
    local err = dx - dy

    while true do
        drawCircleCallback(x0, y0, thickness, color)

        if x0 == x1 and y0 == y1 then break end

        local e2 = 2 * err
        if e2 > -dy then
            err = err - dy
            x0 = x0 + sx
        end
        if e2 < dx then
            err = err + dx
            y0 = y0 + sy
        end
    end
end
    
    
if SERVER then
    
    local screenData = {}
    local maxCount = _screenSize*_screenSize
    --for i=1, maxCount do
    --    screenData[i] = 0
        --for j=1, _screenSize do
        --    screenData[i][j] = 0
        --end
    --end
    
    local _dataColor = {}
    local _currentSendId = nil
    local _chunkIndex = 0
    
    local WW = chip():getWirelink()
    
    wire.adjustPorts(
        {
            Reset = "number",
            Admins = "array"
        },
        {})


    function initScreenData()
        for y=1, _screenSize do
            if #_dataColor == _screenSize then return end
            table.insert(_dataColor, {})
            for x=1, _screenSize do
                table.insert(_dataColor[y], CleanColor)
            end
            validQuotaP(ServerQuotaP)
        end
    end
    
    function isCleanScreen(dataColor)
        for y=1, _screenSize do
            for x=1, _screenSize do
                if dataColor[y][x].r != CleanColor.r or dataColor[y][x].g != CleanColor.g or dataColor[y][x].b != CleanColor.b then
                    return false
                end
            end
        end
        return true
    end
    
    
    function stopSyncScreen()
        timer.remove("syncScreen")
    end
    
    
    function runSyncScreen()
        _chunkIndex = 0
        timer.create("syncScreen", 2.9, 0, function()
            --if net.isSending() then return end
            
            --while !checkQuota(0.0005) do
                --printConsole(math.round(quotaAverage() * 10^6, 0))
                --coroutine.yield()
            --end
            
            local startIndex = _chunkIndex * _chunkSize
            local endIndex = startIndex + _chunkSize
            _chunkIndex = (_chunkIndex + 1) % _chunkCount
            
            coroutine.yield()
            
            local compressedData = compressColorData(_dataColor, startIndex, _chunkSize)
            --printConsole(#compressedData)
            --net.cancel(_currentSendId)
            net.start("syncRow")
            net.writeInt32(startIndex)
            net.writeInt32(_chunkSize)
            net.writeData2(compressedData)
            _currentSendId = net.send(nil, false, true)
            
            if !IsAutoSyncScreen and _chunkIndex == 0 then
                stopSyncScreen()
            end
        end)
    end
    
    
    local _lastCleanTime = 0
    function cleanScreen()
        if isLockEvent('cleanScreen', 1) then return end
        
        for x=1, _screenSize do
            for y=1, _screenSize do
                _dataColor[y][x] = CleanColor
            end
        end
        stopSyncScreen()
        net.start("cleanScreen")
        net.send()
    end
    
    
    hook.add("think", "saveDupe", function()
        if isLockEvent('saveDupe') then return end
        
        --printConsole("START saveDupe")
        if #_dataColor != _screenSize then return end
        local compressedData =  compressColorData(_dataColor, 0, _screenSize)
        local compress = bit.compress(compressedData)
        setUserdata(compress)
        --printConsole(#compressedData)
        --printConsole(#compress)
        setLockEvent('saveDupe', 4)
    end)
    
    
    hook.add("DupeFinished", "", function(entTbl)
        corWrap(function()
            --printConsole("DupeFinished Start")
            local compressedData = bit.decompress(getUserdata())
            if !compressedData then return end
            
            _dataColor = decompressColorData(compressedData, _screenSize, ServerQuotaP)
            if !IsAutoSyncScreen and !isCleanScreen(_dataColor) then
                runSyncScreen()
            end
            --printConsole("DupeFinished End - " .. #compressedData)
        end)
    end)


    initScreenData()
    
    net.syncVars.Admins = wire.ports.Admins
    
    hook.add("input","",function(inp, value)
        if inp == "Reset" and value != 0 then
            cleanScreen()
        end
        if inp == "Admins" then
            net.syncVars.Admins = value
        end
    end)
    
    
    net.receive("cleanScreen", function(size, ply)
        cleanScreen()
    end)
    
    
    if IsAutoSyncScreen then
        runSyncScreen()
    end

    ----------- Buffer Data Server --------
    local _bufferNewData = {}
    
    
    function drawCircle(x, y, radius, color)
        --printConsole("start Circle")
        local r2 = radius*radius
        
        for dx = -radius, radius do
            for dy = -radius, radius do
                local px = x + dx - 0
                local py = y + dy - 0
                if px > 0 and px < _screenSize and py > 0 and py < _screenSize then
                    local dx1 = dx >= 0 and dx+1 or dx
                    local dy1 = dy --< 0 and dy-1 or dy
                    --dy1 = dy < 0 and dy1+1 or dy1
                    if dx1*dx1 + dy1*dy1 <= r2 then
                        _dataColor[py][px] = color
                    end
                end
            end
        end
        --printConsole("end Circle")
    end

    
    function drawRect(x0, y0, w, h, color)
        local hw = w / 2
        local hh = h / 2
        for y=math.floor(y0 - hh), math.floor(y0 + hh-1) do
            for x=math.floor(x0 - hw), math.floor(x0 + hw-1) do
                if y < 1 or y > _screenSize or x < 1 or x > _screenSize then continue end
                _dataColor[y][x] = color
            end
        end
    end
    
    function drawRect2(x, y, size, color)
        drawRect(x, y, size, size, color)
    end
    
    
    local drawHandlers = {
        Rect = function(data)
            drawRect(data.X, data.Y, data.W, data.H, data.Color)
        end,
        LineRect = function(data)
            drawLine(data.X0, data.Y0, data.X1, data.Y1, data.Thickness, data.Color, drawRect2)
        end,
        LineCircle = function(data)
            drawLine(data.X0, data.Y0, data.X1, data.Y1, data.Thickness, data.Color, drawCircle)
        end,
    }
    
    
    net.receive("addNewClientData", function(size, ply)
        local newBufferData = net.readTable()
        --printTable(newBufferData)
        for i, data in ipairs(newBufferData) do
            drawHandlers[data.Type](data)
            validQuotaP(ServerQuotaP)
            table.insert(_bufferNewData, data)
        end
    end)
    
    timer.create("addNewServerData", 1.0, 0, function()
        if #_bufferNewData == 0 then return end
        
        net.start("addNewServerData")
        net.writeTable(_bufferNewData)
        net.send(nil, false, true)
        _bufferNewData = {}
    end)
    ----------- Buffer Data Server -------- END
    
    return
end


-------------- CLIENT --------------------------------------

local _p = player()
local _userId = _p:getUserID()

local _mousePoly = {
    { x=0, y=0 },
    { x=3, y=2 },
    { x=1.1, y=2 },
    { x=2.1, y=3.9 },
    { x=1.9, y=4 },
    { x=0.9, y=2.1 },
    { x=0.1, y=4 },
}

function getMouse(curX, curY, scale)
    local copyMouse = table.copy(_mousePoly)
    for i=1, #copyMouse do
        copyMouse[i].x = copyMouse[i].x*scale + curX
        copyMouse[i].y = copyMouse[i].y*scale + curY
    end
    return copyMouse
end

function drawMouse(curX, curY, fillColor, scale)
    scale = scale or 4
    local c = scale/4
    render.setRenderTargetTexture()

    local copyMouse = getMouse(curX, curY, scale)
    render.setColor(Color(50, 50, 50))
    render.drawPoly(copyMouse)
    
    copyMouse = getMouse(curX + 1.15*c, curY + 2.5*c, scale/2)
    render.setColor(fillColor)
    render.drawPoly(copyMouse)
end

function filterImage()
    render.setFilterMin(1)
    render.setFilterMag(1)
end

------------------------------


--local _dataColor = {}


local _syncRenderId = 0
local _rowIndex = 0

local _bufferNewData = {}
local _syncRowIndex = nil

local _rainbowSaturation = 1
local _rainbowBrightness = 1
local _toolbarCogMaterial = material.createFromImage("icon16/cog.png","")
local font1 = render.createFont("Roboto", 16, 900, true)

---------- Functions ----------------

-------------------------- END

----------- Buffer Data Client --------
local _ownColor = Color(math.random(0, 360), 1, 0.8):hsvToRGB()

local renderHandlers = {
    Rect = {
        build = function(x, y, scale, color)
            return {
                Type = "Rect",
                X = x*2,
                Y = y*2,
                W = scale,
                H = scale,
                Color = color
            }
        end,
        draw = function(data)
            render.setColor(data.Color)
            render.drawRectFast(data.X - data.W/2, data.Y - data.H/2, data.W, data.H)
        end,
    },
    LineRect = {
        build = function(x0, y0, x1, y1, thickness, color)
            if thickness % 2 == 1 then
                --thickness = thickness + 1
            end
            return {
                Type = "LineRect",
                X0 = math.ceil(x0*2),
                Y0 = math.ceil(y0*2),
                X1 = math.ceil(x1*2),
                Y1 = math.ceil(y1*2),
                Thickness = thickness,
                Color = color
            }
        end,
        draw = function(data)
            render.setColor(data.Color)
            drawLine(data.X0, data.Y0, data.X1, data.Y1, data.Thickness, data.Color, function(x, y, radius, color)
                render.drawRectFast(x - radius/2, y - radius/2, radius, radius)
            end)
        end,
    },
    LineCircle = {
        build = function(x0, y0, x1, y1, color)
            return {
                Type = "LineCircle",
                X0 = x0*2,
                Y0 = y0*2,
                X1 = x1*2,
                Y1 = y1*2,
                Thickness = LineThickness,
                Color = color
            }
        end,
        draw = function(data)
            render.setColor(data.Color)
            drawLine(data.X0, data.Y0, data.X1, data.Y1, data.Thickness, data.Color, function(x, y, radius, color)
                render.drawFilledCircle(x, y, radius)
            end)
        end,
    },
}


local _keyPressedData = {
    [MOUSE.MOUSE1] = { Pressed = false, IsFirst = false, IsMouse = true },
    [MOUSE.MOUSE2] = { Pressed = false, IsFirst = false, IsMouse = true },
    [KEY.LALT] = { Pressed = false, IsFirst = false },
}

-- ================================================================================

function getTextButton(x, y, w, h, text, adminOnly, callback)
    return {
        X = x,
        Y = y,
        W = w,
        H = h,
        InitRender = function(self, isPressed)
            render.setColor(Color(255,255,255))
            render.drawRectFast(self.X, self.Y, self.W, self.H)
            render.setColor(isPressed and Color(100,100,100) or Color(0, 0, 0))
            render.drawRectOutline(self.X, self.Y, self.W, self.H)
            render.setFont(font1)
            render.drawText(self.X+3, self.Y, text)
        end,
        AdminOnly = adminOnly,
        Handler = function(self, cur, keyPressedData)
            if keyPressedData[MOUSE.MOUSE1].IsFirst then
                callback(self, cur, keyPressedData)
            end
            if keyPressedData[MOUSE.MOUSE1].Pressed then
                render.selectRenderTarget()
                self.InitRender(self, true)
            end
        end,
    }
end

function getLineThicknessData(x, y, w, h, text, thickness)
    return getTextButton(x, y, w, h, text, false, function(self, cur, keyPressedData)
        LineThickness = thickness
    end)
end


function hasButtonRights(buttonData)
    return (!buttonData.AdminOnly and !net.syncVars.OnlyAdminDraw) or _o == _p or (net.syncVars.Admins and table.hasValue(net.syncVars.Admins, _p))
end

function hasRights()
    return !net.syncVars.OnlyAdminDraw or _o == _p or (net.syncVars.Admins and table.hasValue(net.syncVars.Admins, _p))
end


local _toolbarButtonsData = {}
_toolbarButtonsData = {
    RainBow = {
        X = 30,
        Y = 30,
        W = 256,
        H = 18,
        InitRender = function(self)
            for i=0, 255 do
                render.setColor(Color(i/255*360, _rainbowSaturation, _rainbowBrightness):hsvToRGB())
                render.drawRectFast(30+i, 30, 1, 18)
            end
            render.setColor(ToolbarBackgroundColor)
            render.drawRectFast(self.X + self.W + 5, self.Y, 70, self.H)
            render.setColor(Color(230,230,230, 255))
            render.drawText(self.X + self.W + 5, self.Y, '' .. _ownColor.r .. ' ' .. _ownColor.g .. ' ' .. _ownColor.b)
        end,
        Handler = function(self, cur, keyPressedData)
            if !keyPressedData[MOUSE.MOUSE1].IsFirst then return end
            render.capturePixels()
            _ownColor = render.readPixel(cur.X, cur.Y)
            --printConsole('' .. cur.X .. ' - ' .. cur.Y)
            self.InitRender(self)
        end,
    },
    SetRainBowS = {
        X = 30,
        Y = 49,
        W = 256,
        H = 18,
        InitRender = function(self)
            render.setColor(Color(255,255,255))
            render.drawRectFast(self.X, self.Y, self.W, self.H)
            render.setColor(Color(0, 0, 0))
            render.drawRectOutline(self.X, self.Y, self.W, self.H)
            render.setColor(Color(100, 100, 100))
            render.drawRectFast(self.X + 1, self.Y+1, math.ceil((self.W - 2) * _rainbowSaturation), self.H-2)
        end,
        Handler = function(self, cur, keyPressedData)
            if !keyPressedData[MOUSE.MOUSE1].Pressed then return end
            _rainbowSaturation = math.ceil(math.min((cur.X - self.X - 1) / (self.W-2) * 100, 100)) / 100
            _toolbarButtonsData.RainBow.InitRender(_toolbarButtonsData.RainBow)
            self.InitRender(self)
        end,
    },
    SetRainBowV = {
        X = 30,
        Y = 68,
        W = 256,
        H = 18,
        InitRender = function(self)
            render.setColor(Color(255,255,255))
            render.drawRectFast(self.X, self.Y, self.W, self.H)
            render.setColor(Color(0, 0, 0))
            render.drawRectOutline(self.X, self.Y, self.W, self.H)
            render.setColor(Color(100, 100, 100))
            render.drawRectFast(self.X + 1, self.Y+1, (self.W - 2) * _rainbowBrightness, self.H-2)
        end,
        Handler = function(self, cur, keyPressedData)
            if !keyPressedData[MOUSE.MOUSE1].Pressed then return end
            _rainbowBrightness = math.ceil(math.min((cur.X - self.X - 1) / (self.W-2) * 100, 100)) / 100
            _toolbarButtonsData.RainBow.InitRender(_toolbarButtonsData.RainBow)
            self.InitRender(self)
        end,
    },
    LineThickness1 = getLineThicknessData(30, 87, 20, 18, "X1", 1),
    LineThickness2 = getLineThicknessData(51, 87, 20, 18, "X2", 5),
    LineThickness3 = getLineThicknessData(72, 87, 20, 18, "X3", 10),
    LineThickness4 = getLineThicknessData(93, 87, 20, 18, "X4", 20),
    CleanScreen = getTextButton(30, 356, 81, 18, "Clear Screen", true, function(self, cur, keyPressedData)
        net.start("cleanScreen")
        net.send()
    end),
    SwitchOnlyAdminDraw = {
        X = 30, Y = 375, W = 142, H = 18,
        InitRender = function(self, isPressed)
            local text = net.syncVars.OnlyAdminDraw and "Only Admin Draw (On)" or "Only Admin Draw (Off)"
            render.setColor(Color(255,255,255))
            render.drawRectFast(self.X, self.Y, self.W, self.H)
            render.setColor(isPressed and Color(100,100,100) or Color(0, 0, 0))
            render.drawRectOutline(self.X, self.Y, self.W, self.H)
            render.setFont(font1)
            render.drawText(self.X+3, self.Y, text, TEXT_ALIGN.LEFT)
        end,
        AdminOnly = true,
        Handler = function(self, cur, keyPressedData)
            if keyPressedData[MOUSE.MOUSE1].IsFirst then
                net.syncVars.OnlyAdminDraw = !net.syncVars.OnlyAdminDraw
                self.InitRender(self)
            end
            if keyPressedData[MOUSE.MOUSE1].Pressed then
                render.selectRenderTarget()
                self.InitRender(self, true)
            end
        end,
    },
}
-- ================================================================================


net.addSyncVarCallback("OnlyAdminDraw", function(value)
    hook.add("renderoffscreen", "OnlyAdminDraw", function()
        render.selectRenderTarget("toolBar")
        filterImage()
        _toolbarButtonsData.SwitchOnlyAdminDraw.InitRender(_toolbarButtonsData.SwitchOnlyAdminDraw)
        hook.remove("renderoffscreen","OnlyAdminDraw")
    end)
end)


function renderBufferHandler(type, ...)
    local newData = renderHandlers[type].build(...)
    newData._userId = _userId
    table.insert(_bufferNewData, newData)
    render.selectRenderTarget("myrendertarget")
    filterImage()
    renderHandlers[type].draw(newData)
    render.selectRenderTarget()
end


net.receive("addNewServerData", function(size, ply)
    local newBufferData = net.readTable()
    
    _syncRenderId = (_syncRenderId + 1) % 1000
    local hookName = 'draw_' .. tostring(_syncRenderId)
    
    hook.add("renderoffscreen", hookName, function()
        render.selectRenderTarget("myrendertarget")
        filterImage()
        --printConsole(#newBufferData)
        for i, data in ipairs(newBufferData) do
            if data._userId == _userId then continue end
            renderHandlers[data.Type].draw(data)
        end
        render.selectRenderTarget()
        hook.remove("renderoffscreen", hookName)
    end)
end)
    
timer.create("addNewClientData", 0.5, 0, function()
    if #_bufferNewData == 0 then return end
    
    net.start("addNewClientData")
    net.writeTable(_bufferNewData)
    net.send(nil, false, true)
    _bufferNewData = {}
end)
----------- Buffer Data Client -------- END


net.receive("syncRow", function()
    local startRow = net.readInt32()
    local rowCount = net.readInt32()
    local binaryData = net.readData2()
    local arColor = decompressColorData(binaryData, rowCount, ClientQuotaP)
    --print(#arColor)
    
    _syncRenderId = (_syncRenderId + 1) % 1000
    local hookName = 'syncRow_' .. tostring(_syncRenderId)
    --printConsole(hookName)
    
    hook.add("renderoffscreen", hookName, function()
        filterImage()
        local ar = arColor
        for i = 1, #arColor do
            --_dataColor[startRow + i] = arColor[i]
            render.selectRenderTarget("myrendertarget")
            for j = 1, _screenSize do
                render.setViewPort(j, startRow + i, 1, 1)
                render.clear(arColor[i][j])
            end
            _syncRowIndex = startRow + i
            validQuotaP(ClientQuotaP)
            _syncRowIndex = nil
            --printConsole(hookName .. ' - ' .. (startRow + i))
        end
        --render.drawPixelsRGB(_y, _screenSize, dataR, dataG, dataB)
        hook.remove("renderoffscreen", hookName)
    end)
end)


function cleanScreen()
    hook.add("renderoffscreen", "init", function()
        render.selectRenderTarget("myrendertarget")
        filterImage()
        --render.clear(Color(230, 230, 230, 230), false, false)
        render.setColor(CleanColor)
        render.drawRectFast(0, 0, _screenSize, _screenSize)
        
        hook.remove("renderoffscreen","init")
    end)
end


net.receive("cleanScreen", function()
    _syncRowIndex = nil
    cleanScreen()
end)


function toolbarHandler(cur, keyPressedData)
    for name, data in pairs(_toolbarButtonsData) do
        if !hasButtonRights(data) or cur.X < data.X or cur.X >= data.X+data.W  or  cur.Y < data.Y or cur.Y >= data.Y+data.H then
            continue
        end
        
        render.selectRenderTarget("toolBar")
        data.Handler(data, cur, keyPressedData)
        render.selectRenderTarget()
        
        return true
    end
    
    return false
end


function initToolBar()
    hook.add("renderoffscreen", "initToolBar", function()
        render.selectRenderTarget("toolBar")
        render.clear(Color(0,0,0, 0))
        render.setColor(Color(100,100,100, 255))
        render.drawRoundedBox(10, 25, 25, 462, 462)
        render.setColor(ToolbarBackgroundColor)
        render.drawRoundedBox(10, 26, 26, 460, 460)
        
        render.setColor(Color(100,100,100, 255))
        render.drawLine(25, 350, 486, 350)
        
        render.setFont(font1)
        render.drawText(206, 350, "Admin Panel")
        
        for name, data in pairs(_toolbarButtonsData) do
            data.InitRender(data)
        end

        hook.remove("renderoffscreen","initToolBar")
    end)
end


render.createRenderTarget("myrendertarget")
render.createRenderTarget("toolBar")
cleanScreen()
initToolBar()


function getNewButtonsPressedData()
    for k, v in pairs(_keyPressedData) do
        local newPressed = v.IsMouse and input.isMouseDown(k) or input.isKeyDown(k)
        v.IsFirst = v.Pressed != newPressed and newPressed
        v.Pressed = newPressed
    end
    return _keyPressedData
end


local prevLinePoint = nil
local _isOpenToolbar = false

function drawSyncRow()
    --printConsole(_syncRowIndex)
    if _syncRowIndex ~= nil then
        render.selectRenderTarget()
        render.setColor(Color(255,0,0, 150))
        render.drawRectFast(0, _syncRowIndex, 512, 2)
    end
end


function renderMainHandler(curx, cury)
    local x, y = curx, cury
    --printConsole(x)
    local keyPressedData = getNewButtonsPressedData()
    
    if keyPressedData[MOUSE.MOUSE1].Pressed and x < 20 and y < 20 then
        if keyPressedData[MOUSE.MOUSE1].IsFirst then
            _isOpenToolbar = !_isOpenToolbar
        end
        return
    end
    
    if !hasRights() then
        return end
    
    if _isOpenToolbar then
        toolbarHandler({X=x, Y=y}, keyPressedData)
        return
    end
    
    if !keyPressedData[MOUSE.MOUSE1].Pressed then
        prevLinePoint = nil
    end
    
    if keyPressedData[MOUSE.MOUSE2].Pressed then
        local scale = keyPressedData[KEY.LALT].Pressed and EraserBigSize or EraserSmallSize
        renderBufferHandler("Rect", x/2, y/2, scale, CleanColor)
    elseif keyPressedData[MOUSE.MOUSE1].Pressed then
        if !prevLinePoint then
            prevLinePoint = { x, y }
            return
        end
        --printConsole(math.floor(Vector(prevLinePoint[1], prevLinePoint[2], 0):getDistance(Vector(x,y,0))))
        --printTable(prevLinePoint)
        renderBufferHandler("LineRect", prevLinePoint[1]/2, prevLinePoint[2]/2, x/2, y/2, LineThickness, _ownColor)
        prevLinePoint = { x, y }
    end
end


hook.add("render","",function()
    filterImage()
    render.setRenderTargetTexture("myrendertarget")
    render.drawTexturedRect(0,0,1024,1024)
    
    drawSyncRow()
    
    if _isOpenToolbar then
        render.setColor(Color(0,0,0,150))
        render.drawRectFast(0,0,1023,1023)
        filterImage()
        render.setRenderTargetTexture("toolBar")
        render.setColor(Color(255,255,255,255))
        render.drawTexturedRect(0,0,1023,1023)
    end
    
    --render.setColor(Color(0,0,0,255))
    --render.drawRectOutline(0, 0, 20, 20)
    --render.setColor(Color(0,0,0,255))
    --render.drawRectOutline(0, 0, 20, 20)
    render.setMaterial(_toolbarCogMaterial)
    render.setColor(Color(150,150,150, 255))
    render.drawTexturedRect(0,0,20,20)
    
    local curx, cury = render.cursorPos()
    local tr = _p:getEyeTrace()
        
    if curx and tr.Entity == render.getScreenEntity() and tr.Entity:getPos():getDistance(eyePos()) < WorkRadius then
        --render.drawText(curx, cury, "" .. math.round(curx, 1) .. ', ' .. math.round(cury, 1))
        renderMainHandler(curx, cury)
        drawMouse(curx, cury, _ownColor, MouseScale)
    end
end)




----------------------------------------------------------
end) -- corWrap end
