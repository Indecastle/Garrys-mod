--@name Paint 2
--@author Markiz
--@shared
--owneronly

--@include https://raw.githubusercontent.com/Jacbo1/Public-Starfall/main/SafeNet/safeNet.lua as SafeNet
--@include https://raw.githubusercontent.com/Jacbo1/Public-Starfall/refs/heads/main/Spawn%20Blocking/spawn_blocking.lua as SpawnBlocking
local oldNet = net
local net = require("SafeNet")
require("SpawnBlocking")


local MouseScale = 3
local WorkRadius = 1000
local LineThickness = 1
local EraserBigSize = 15
local EraserSmallSize = 4
local CleanColor = Color(220,220,220)
local ToolbarBackgroundColor = Color(200,200,200, 255)

local ServerQuotaP, ServerQuota = 0.4, 0.010
local ClientQuotaP, ClientQuota = 0.4, 0.010

----------------------------------------------------------------------------

local _screenSize = 512


local _maxQuota = SERVER and math.min(ServerQuota, quotaMax() * ServerQuotaP) or math.min(ClientQuota, quotaMax() * ClientQuotaP)

function checkQuota()
    return math.max(quotaAverage(), quotaUsed()) < _maxQuota
end

function validQuota()
    while !checkQuota() do
        coroutine.yield()
    end
end


local _locks = {}
function isLockEvent(name, sec)
    local curtime = timer.curtime()
    _locks[name] = _locks[name] or curtime
    local isLock = curtime < _locks[name]
    if sec ~= nil and !isLock then
        _locks[name] = curtime + sec
    end

    return isLock
end

function setLockEvent(name, sec)
    _locks[name] = timer.curtime() + sec
end


corWrap(function()
--------------------------------------------------

local _o, _e = owner(), chip()


function getBinaryColorData(colorData, startRow, rowCount)
    local binaryData = {}
    for y = startRow+1, startRow + rowCount do
        for x = 1, _screenSize do
            local color = colorData[y][x]
            table.insert(binaryData, string.char(color.r, color.g, color.b))
        end
        validQuota()
    end
    
    local result = table.concat(binaryData)
    --printConsole('server - ' .. #result)
    return result
end


function getCompressedScreenData(progressCallback)
    local binaryData = {}
    for y = 0, _screenSize-1 do
        progressCallback(math.clamp(y/_screenSize, 0, 100))
        render.selectRenderTarget("myrendertarget")
        render.capturePixels()
        for x = 0, _screenSize-1 do
            local color = render.readPixel(x, y)
            table.insert(binaryData, string.char(color.r, color.g, color.b))
        end
        validQuota()
    end
    
    local result = table.concat(binaryData)
    --printConsole('server - ' .. #result)
    return bit.compress(result)
end


function decompressColorData(binaryData, rowCount)
    --printConsole('client - ' .. #compressedData)
    if not binaryData then return {} end
       
    local colorData = {}
    local index = 1

    for y = 1, rowCount do
        table.insert(colorData, {})
        for x = 1, _screenSize do
            if index + 2 <= #binaryData then
                local r = binaryData:byte(index)
                local g = binaryData:byte(index + 1)
                local b = binaryData:byte(index + 2)
                table.insert(colorData[y], Color(r, g, b, 255))
                index = index + 3
            else
                table.insert(colorData[y], Color(0,0,0))
            end
        end
        validQuota()
    end
    return colorData
end


local function drawLine(x0, y0, x1, y1, thickness, color, drawCircleCallback)
    local dx = math.abs(x1 - x0)
    local dy = math.abs(y1 - y0)
    local sx = x0 < x1 and 1 or -1
    local sy = y0 < y1 and 1 or -1
    local err = dx - dy

    while true do
        drawCircleCallback(x0, y0, thickness, color)

        if x0 == x1 and y0 == y1 then break end

        local e2 = 2 * err
        if e2 > -dy then
            err = err - dy
            x0 = x0 + sx
        end
        if e2 < dx then
            err = err + dx
            y0 = y0 + sy
        end
    end
end
    
    
if SERVER then
    
    local _compressedScreenData = getUserdata()
    --local _dataColor = {}

    local WW = chip():getWirelink()
    
    wire.adjustPorts(
        {
            Reset = "number",
            Admins = "array"
        },
        {})


    function isCleanScreen(dataColor)
        for y=1, _screenSize do
            for x=1, _screenSize do
                if dataColor[y][x].r != CleanColor.r or dataColor[y][x].g != CleanColor.g or dataColor[y][x].b != CleanColor.b then
                    return false
                end
            end
        end
        return true
    end

    
    function stopSyncScreen()
        timer.remove("syncScreen")
    end
    
    
    function runSyncScreen(ply)
        net.start("syncScreen")
        net.writeData2(_compressedScreenData)
        net.send(ply)
    end
    
    
    local _lastCleanTime = 0
    function cleanScreen()
        if isLockEvent('cleanScreen', 1) then return end
        
        stopSyncScreen()
        net.start("cleanScreen")
        net.send()
    end
    
    
    net.receive("saveScreenForDupeClient", function(size, ply)
        _compressedScreenData = net.readData2()
        setUserdata(_compressedScreenData)
        net.syncVars.hasSavedDupe = true
    end)
    
    
    net.receive("syncScreenFromDupe", function(size, ply)
        runSyncScreen()
    end)
    
    
    net.syncVars.hasSavedDupe = _compressedScreenData != ""
    net.syncVars.Admins = wire.ports.Admins


    hook.add("input","",function(inp, value)
        if inp == "Reset" and value != 0 then
            cleanScreen()
        end
        if inp == "Admins" then
            net.syncVars.Admins = value
        end
    end)
    
    
    net.receive("cleanScreen", function(size, ply)
        cleanScreen()
    end)
    
    
    net.receive("cleanDupeData", function(size, ply)
        _compressedScreenData = ""
        net.syncVars.hasSavedDupe = nil
        setUserdata('')
    end)
    
    
    net.receive("drawFromDupe", function(size, ply)
        if _compressedScreenData == '' or isLockEvent("drawFromDupe", 3) then return end
        runSyncScreen()
    end)
    
    
    hook.add("DupeFinished", "", function(entTbl)
        timer.simple(1, function()
            if _compressedScreenData == '' then return end
            runSyncScreen()
        end)
    end)
    
    
    hook.add("ClientInitialized", "cl_init", function(ply)
        --if _compressedScreenData == '' then return end
        --runSyncScreen(ply)
    end)

    ----------- Buffer Data Server --------
    local _bufferNewData = {}

    
    net.receive("addNewClientData", function(size, ply)
        local newBufferData = net.readTable()
        --printTable(newBufferData)
        for i, data in ipairs(newBufferData) do
            validQuota()
            table.insert(_bufferNewData, data)
        end
    end)
    
    timer.create("addNewServerData", 1.0, 0, function()
        if #_bufferNewData == 0 then return end
        
        net.start("addNewServerData")
        net.writeTable(_bufferNewData)
        net.send(nil, false, true)
        _bufferNewData = {}
    end)
    ----------- Buffer Data Server -------- END
    
    return
end


-------------- CLIENT --------------------------------------

local _p = player()
local _userId = _p:getUserID()

--local _dataColor = {}
local _syncRenderId = 0
local _isSavingForDupe = false
local _savingProgress = 0

local _bufferNewData = {}
local _syncRowIndex = nil

local _rainbowSaturation = 1
local _rainbowBrightness = 1
local _toolbarCogMaterial = material.createFromImage("icon16/cog.png","")
local _pipetteMouseMaterial = material.createFromImage("icon16/paintbrush.png","")
local font1 = render.createFont("Roboto", 16, 900, true)
local _prevLinePoint = nil
local _isOpenToolbar = false
local _isLockPressed = false

local drawMouseCallback = function(curX, curY, fillColor, scale) end
local drawMainMouseHandler, drawPalleteMouseHandler

local eventMouseCallback = function(x, y, keyPressedData) end
local eventMainMouseHandler, eventMousePalleteHandler

local _mousePoly = {
    { x=0, y=0 },
    { x=3, y=2 },
    { x=1.1, y=2 },
    { x=2.1, y=3.9 },
    { x=1.9, y=4 },
    { x=0.9, y=2.1 },
    { x=0.1, y=4 },
}




function getMouse(x, y, scale)
    local copyMouse = table.copy(_mousePoly)
    for i=1, #copyMouse do
        copyMouse[i].x = copyMouse[i].x*scale + x
        copyMouse[i].y = copyMouse[i].y*scale + y
    end
    return copyMouse
end


function drawMainMouseHandler(x, y, fillColor, scale)
    scale = scale or 4
    local c = scale/4
    render.setRenderTargetTexture()

    local copyMouse = getMouse(x, y, scale)
    render.setColor(Color(50, 50, 50))
    render.drawPoly(copyMouse)
    
    copyMouse = getMouse(x + 1.15*c, y + 2.5*c, scale/2)
    render.setColor(fillColor)
    render.drawPoly(copyMouse)
end


function drawPalleteMouseHandler(x, y, fillColor, scale)
    render.setColor(Color(255,255,255))
    render.setMaterial(_pipetteMouseMaterial)
    render.drawTexturedRect(x, y-12, 4*scale, 4*scale)
end


function filterImage()
    render.setFilterMin(1)
    render.setFilterMag(1)
end

------------------------------


----------- Buffer Data Client --------
local _ownColor = Color(math.random(0, 360), 1, 0.8):hsvToRGB()

local renderHandlers = {
    Rect = {
        build = function(x, y, scale, color)
            return {
                Type = "Rect",
                X = x*2,
                Y = y*2,
                W = scale,
                H = scale,
                Color = color
            }
        end,
        draw = function(data)
            render.setColor(data.Color)
            render.drawRectFast(data.X - data.W/2, data.Y - data.H/2, data.W, data.H)
        end,
    },
    Circle = {
        build = function(x, y, thickness, color)
            return {
                Type = "Circle",
                X = math.round(x*2, 0),
                Y = math.round(y*2, 0),
                Thickness = thickness,
                Color = color
            }
        end,
        draw = function(data)
            render.setColor(data.Color)
            render.drawFilledCircle(data.X, data.Y, data.Thickness)
        end,
    },
    LineRect = {
        build = function(x0, y0, x1, y1, thickness, color)
            return {
                Type = "LineRect",
                X0 = math.ceil(x0*2),
                Y0 = math.ceil(y0*2),
                X1 = math.ceil(x1*2),
                Y1 = math.ceil(y1*2),
                Thickness = thickness,
                Color = color
            }
        end,
        draw = function(data)
            render.setColor(data.Color)
            drawLine(data.X0, data.Y0, data.X1, data.Y1, data.Thickness, data.Color, function(x, y, radius, color)
                render.drawRectFast(x - radius/2, y - radius/2, radius, radius)
            end)
        end,
    },
    LineCircle = {
        build = function(x0, y0, x1, y1, thickness, color)
            return {
                Type = "LineCircle",
                X0 = math.round(x0*2, 0),
                Y0 = math.round(y0*2, 0),
                X1 = math.round(x1*2, 0),
                Y1 = math.round(y1*2, 0),
                Thickness = thickness,
                Color = color
            }
        end,
        draw = function(data)
            render.setColor(data.Color)
            drawLine(data.X0, data.Y0, data.X1, data.Y1, data.Thickness, data.Color, function(x, y, radius, color)
                render.drawFilledCircle(x, y, radius)
            end)
        end,
    },
}


local _keyPressedData = {
    [MOUSE.MOUSE1] = { Pressed = false, IsFirst = false, IsMouse = true },
    [MOUSE.MOUSE2] = { Pressed = false, IsFirst = false, IsMouse = true },
    [KEY.LALT] = { Pressed = false, IsFirst = false },
    [KEY.E] = { Pressed = false, IsFirst = false },
}

-- ================================================================================


function saveScreenForDupeClient()
    if !_isSavingForDupe and isLockEvent("saveScreenForDupeClient", 2) then return end
    _isSavingForDupe = true

    hook.add("renderoffscreen", "saveScreenForDupeClient", function()
        local compressedData = getCompressedScreenData(function(value)
            _savingProgress = value
        end)
        net.start("saveScreenForDupeClient")
        net.writeData2(compressedData)
        net.send()
        hook.remove("renderoffscreen", "saveScreenForDupeClient")
        _isSavingForDupe = false
    end)
end


function getTextButton(x, y, w, h, text, adminOnly, callback, callbackInitRender)
    return {
        X = x,
        Y = y,
        W = w,
        H = h,
        InitRender = function(self, isPressed, noCallback)
            render.setColor(Color(255,255,255))
            render.drawRectFast(self.X, self.Y, self.W, self.H)
            render.setColor(isPressed and Color(100,100,100) or Color(0, 0, 0))
            render.drawRectOutline(self.X, self.Y, self.W, self.H)
            render.setFont(font1)
            render.drawText(self.X+3, self.Y, text)
            if !noCallback and callbackInitRender then
                callbackInitRender(self, isPressed)
            end
        end,
        AdminOnly = adminOnly,
        Handler = function(self, cur, keyPressedData)
            if keyPressedData[MOUSE.MOUSE1].IsFirst then
                callback(self, cur, keyPressedData)
            end
            if keyPressedData[MOUSE.MOUSE1].Pressed then
                render.selectRenderTarget()
                self.InitRender(self, true)
            end
        end,
    }
end

function getLineThicknessData(x, y, w, h, text, thickness)
    return getTextButton(x, y, w, h, text, false, function(self, cur, keyPressedData)
        LineThickness = thickness
        _isOpenToolbar = false
    end)
end


function hasButtonRights(buttonData)
    return (!buttonData.AdminOnly and !net.syncVars.OnlyAdminDraw) or _o == _p or (net.syncVars.Admins and table.hasValue(net.syncVars.Admins, _p))
end

function hasRights()
    return !net.syncVars.OnlyAdminDraw or _o == _p or (net.syncVars.Admins and table.hasValue(net.syncVars.Admins, _p))
end


local _toolbarButtonsData = {}
_toolbarButtonsData = {
    RainBow = {
        X = 30,
        Y = 30,
        W = 256,
        H = 18,
        InitRender = function(self)
            for i=0, 255 do
                render.setColor(Color(i/255*360, _rainbowSaturation, _rainbowBrightness):hsvToRGB())
                render.drawRectFast(30+i, 30, 1, 18)
            end
            render.setColor(ToolbarBackgroundColor)
            render.drawRectFast(self.X + self.W + 5, self.Y, 80, self.H)
            render.setColor(Color(230,230,230, 255))
            render.drawText(self.X + self.W + 5, self.Y, '' .. _ownColor.r .. ' ' .. _ownColor.g .. ' ' .. _ownColor.b)
        end,
        Handler = function(self, cur, keyPressedData)
            if !keyPressedData[MOUSE.MOUSE1].IsFirst then return end
            render.capturePixels()
            _ownColor = render.readPixel(cur.X, cur.Y)
            --printConsole('' .. cur.X .. ' - ' .. cur.Y)
            self.InitRender(self)
        end,
    },
    SetRainBowS = {
        X = 30,
        Y = 49,
        W = 256,
        H = 18,
        InitRender = function(self)
            render.setColor(Color(255,255,255))
            render.drawRectFast(self.X, self.Y, self.W, self.H)
            render.setColor(Color(0, 0, 0))
            render.drawRectOutline(self.X, self.Y, self.W, self.H)
            render.setColor(Color(100, 100, 100))
            render.drawRectFast(self.X + 1, self.Y+1, math.ceil((self.W - 2) * _rainbowSaturation), self.H-2)
        end,
        Handler = function(self, cur, keyPressedData)
            if !keyPressedData[MOUSE.MOUSE1].Pressed then return end
            _rainbowSaturation = math.ceil(math.min((cur.X - self.X - 1) / (self.W-2) * 100, 100)) / 100
            _toolbarButtonsData.RainBow.InitRender(_toolbarButtonsData.RainBow)
            self.InitRender(self)
        end,
    },
    SetRainBowV = {
        X = 30,
        Y = 68,
        W = 256,
        H = 18,
        InitRender = function(self)
            render.setColor(Color(255,255,255))
            render.drawRectFast(self.X, self.Y, self.W, self.H)
            render.setColor(Color(0, 0, 0))
            render.drawRectOutline(self.X, self.Y, self.W, self.H)
            render.setColor(Color(100, 100, 100))
            render.drawRectFast(self.X + 1, self.Y+1, (self.W - 2) * _rainbowBrightness, self.H-2)
        end,
        Handler = function(self, cur, keyPressedData)
            if !keyPressedData[MOUSE.MOUSE1].Pressed then return end
            _rainbowBrightness = math.ceil(math.min((cur.X - self.X - 1) / (self.W-2) * 100, 100)) / 100
            _toolbarButtonsData.RainBow.InitRender(_toolbarButtonsData.RainBow)
            self.InitRender(self)
        end,
    },
    LineThickness1 = getLineThicknessData(30, 87, 20, 18, "X1", 1),
    LineThickness2 = getLineThicknessData(51, 87, 20, 18, "X2", 3),
    LineThickness3 = getLineThicknessData(72, 87, 20, 18, "X3", 6),
    LineThickness4 = getLineThicknessData(93, 87, 20, 18, "X4", 10),
    LineThickness5 = getLineThicknessData(114, 87, 20, 18, "X5", 20),
    SetPalleteMouse = {
        X = 30, Y = 106, W = 18, H = 18,
        InitRender = function(self, isPressed)
            render.setColor(Color(255,255,255))
            render.setMaterial(_pipetteMouseMaterial)
            render.drawTexturedRect(self.X, self.Y, self.W, self.H)
        end,
        AdminOnly = false,
        Handler = function(self, cur, keyPressedData)
            if keyPressedData[MOUSE.MOUSE1].IsFirst then
                drawMouseCallback = drawPalleteMouseHandler
                eventMouseCallback = eventPalleteMouseHandler
                _isOpenToolbar = false
            end
        end,
    },
    SwitchOnlyAdminDraw = {
        X = 30, Y = 355, W = 142, H = 18,
        InitRender = function(self, isPressed)
            local text = net.syncVars.OnlyAdminDraw and "Only Admin Draw (On)" or "Only Admin Draw (Off)"
            render.setColor(Color(255,255,255))
            render.drawRectFast(self.X, self.Y, self.W, self.H)
            render.setColor(isPressed and Color(100,100,100) or Color(0, 0, 0))
            render.drawRectOutline(self.X, self.Y, self.W, self.H)
            render.setFont(font1)
            render.drawText(self.X+3, self.Y, text, TEXT_ALIGN.LEFT)
        end,
        AdminOnly = true,
        Handler = function(self, cur, keyPressedData)
            if keyPressedData[MOUSE.MOUSE1].IsFirst then
                net.syncVars.OnlyAdminDraw = !net.syncVars.OnlyAdminDraw
                self.InitRender(self)
            end
            if keyPressedData[MOUSE.MOUSE1].Pressed then
                render.selectRenderTarget()
                self.InitRender(self, true)
            end
        end,
    },
    CleanScreen = getTextButton(30, 375, 81, 18, "Clear Screen", true, function(self, cur, keyPressedData)
        net.start("cleanScreen")
        net.send()
    end),
    SaveScreenToDupe = getTextButton(30, 395, 90, 18, "Save for dupe", true, function(self, cur, keyPressedData)
        saveScreenForDupeClient()
    end),
    CleanDupe = getTextButton(30, 415, 72, 18, "Clear Dupe", true, function(self, cur, keyPressedData)
        net.start("cleanDupeData")
        net.send()
    end),
    DrawFromDupe = getTextButton(122, 395, 106, 18, "Draw From Dupe", true, function(self, cur, keyPressedData)
        if !net.syncVars.hasSavedDupe or isLockEvent("drawFromDupe", 3) then return end
        net.start("drawFromDupe")
        net.send()
    end,
        function(self, isPressed)
            local text = net.syncVars.hasSavedDupe and "Duped" or "Not duped"
            if net.syncVars.hasSavedDupe then
                self.InitRender(self, isPressed, true)
            else
                render.setColor(ToolbarBackgroundColor)
                render.drawRectFast(self.X, self.Y, self.W, self.H)
            end
    end),
}
-- ================================================================================


net.addSyncVarCallback("OnlyAdminDraw", function(value)
    hook.add("renderoffscreen", "OnlyAdminDraw", function()
        render.selectRenderTarget("toolBar")
        filterImage()
        _toolbarButtonsData.SwitchOnlyAdminDraw.InitRender(_toolbarButtonsData.SwitchOnlyAdminDraw)
        hook.remove("renderoffscreen","OnlyAdminDraw")
    end)
end)


net.addSyncVarCallback("hasSavedDupe", function(value)
    hook.add("renderoffscreen", "HasSavedDupe", function()
        render.selectRenderTarget("toolBar")
        filterImage()
        _toolbarButtonsData.DrawFromDupe.InitRender(_toolbarButtonsData.DrawFromDupe)
        hook.remove("renderoffscreen","HasSavedDupe")
    end)
end)


function renderBufferHandler(type, ...)
    local newData = renderHandlers[type].build(...)
    newData._userId = _userId
    table.insert(_bufferNewData, newData)
    render.selectRenderTarget("myrendertarget")
    filterImage()
    renderHandlers[type].draw(newData)
    render.selectRenderTarget()
end


net.receive("addNewServerData", function(size, ply)
    local newBufferData = net.readTable()
    
    _syncRenderId = (_syncRenderId + 1) % 1000
    local hookName = 'draw_' .. tostring(_syncRenderId)
    
    hook.add("renderoffscreen", hookName, function()
        render.selectRenderTarget("myrendertarget")
        filterImage()
        --printConsole(#newBufferData)
        for i, data in ipairs(newBufferData) do
            if data._userId == _userId then continue end
            renderHandlers[data.Type].draw(data)
        end
        render.selectRenderTarget()
        hook.remove("renderoffscreen", hookName)
    end)
end)
    
    
timer.create("addNewClientData", 0.5, 0, function()
    if #_bufferNewData == 0 then return end
    
    net.start("addNewClientData")
    net.writeTable(_bufferNewData)
    net.send(nil, false, true)
    _bufferNewData = {}
end)
----------- Buffer Data Client -------- END


net.receive("syncScreen", function()
    local binaryData = net.readData2()
    local compressedData = bit.decompress(binaryData)
    local arColor = decompressColorData(compressedData, _screenSize)
    --print(#arColor)

    hook.add("renderoffscreen", "syncScreen", function()
        filterImage()
        for i = 1, _screenSize do
            render.selectRenderTarget("myrendertarget")
            for j = 1, _screenSize do
                render.setViewPort(j-1, i-1, 1, 1)
                render.clear(arColor[i][j])
            end
            _syncRowIndex = i
            validQuota()
            --printConsole(hookName .. ' - ' .. (i))
        end
        _syncRowIndex = nil
        hook.remove("renderoffscreen", "syncScreen")
    end)
end)


function cleanScreen()
    hook.add("renderoffscreen", "init", function()
        render.selectRenderTarget("myrendertarget")
        filterImage()
        --render.clear(Color(230, 230, 230, 230), false, false)
        render.setColor(CleanColor)
        render.drawRectFast(0, 0, _screenSize, _screenSize)
        
        hook.remove("renderoffscreen","init")
    end)
end


net.receive("cleanScreen", function()
    _syncRowIndex = nil
    cleanScreen()
end)


function toolbarHandler(cur, keyPressedData)
    for name, data in pairs(_toolbarButtonsData) do
        if !hasButtonRights(data) or cur.X < data.X or cur.X >= data.X+data.W  or  cur.Y < data.Y or cur.Y >= data.Y+data.H then
            continue
        end
        
        render.selectRenderTarget("toolBar")
        data.Handler(data, cur, keyPressedData)
        render.selectRenderTarget()
        _isLockPressed = true
        
        return true
    end
    
    return false
end


function initToolBar()
    hook.add("renderoffscreen", "initToolBar", function()
        render.selectRenderTarget("toolBar")
        render.clear(Color(0,0,0, 0))
        render.setColor(Color(100,100,100, 255))
        render.drawRoundedBox(10, 25, 25, 462, 462)
        render.setColor(ToolbarBackgroundColor)
        render.drawRoundedBox(10, 26, 26, 460, 460)
        
        render.setColor(Color(100,100,100, 255))
        render.drawLine(25, 350, 486, 350)
        
        render.setFont(font1)
        render.drawText(206, 350, "Admin Panel")
        
        for name, data in pairs(_toolbarButtonsData) do
            data.InitRender(data)
        end

        hook.remove("renderoffscreen","initToolBar")
    end)
end


render.createRenderTarget("myrendertarget")
render.createRenderTarget("toolBar")
cleanScreen()
initToolBar()


function getNewButtonsPressedData()
    for k, v in pairs(_keyPressedData) do
        local newPressed = v.IsMouse and input.isMouseDown(k) or input.isKeyDown(k)
        v.IsFirst = v.Pressed != newPressed and newPressed
        v.Pressed = newPressed
    end
    _keyPressedData[MOUSE.MOUSE1].Pressed = _keyPressedData[MOUSE.MOUSE1].Pressed or _keyPressedData[KEY.E].Pressed
    _keyPressedData[MOUSE.MOUSE1].IsFirst = _keyPressedData[MOUSE.MOUSE1].IsFirst or _keyPressedData[KEY.E].IsFirst
    return _keyPressedData
end


function drawSyncRow()
    --printConsole(_syncRowIndex)
    if _syncRowIndex ~= nil then
        render.selectRenderTarget()
        render.setColor(Color(255,0,0, 150))
        render.drawRectFast(0, _syncRowIndex * 512/_screenSize, 512, 2)
    end
end


function eventMainMouseHandler(x, y, keyPressedData)
    if !keyPressedData[MOUSE.MOUSE1].Pressed then
        _prevLinePoint = nil
        _isLockPressed = false
    end
    
    if _isLockPressed then return end
    
    if keyPressedData[MOUSE.MOUSE2].Pressed then
        local thickness = keyPressedData[KEY.LALT].Pressed and EraserBigSize or EraserSmallSize
        renderBufferHandler("Circle", x/2, y/2, thickness, CleanColor)
    elseif keyPressedData[MOUSE.MOUSE1].Pressed then
        if !_prevLinePoint then
            _prevLinePoint = { x, y }
            return
        end
        --printConsole(math.floor(Vector(_prevLinePoint[1], _prevLinePoint[2], 0):getDistance(Vector(x,y,0))))
        --printTable(_prevLinePoint)
        local renderType = LineThickness == 1 and "LineRect" or "LineCircle"
        renderBufferHandler(renderType, _prevLinePoint[1]/2, _prevLinePoint[2]/2, x/2, y/2, LineThickness, _ownColor)
        _prevLinePoint = { x, y }
    end
end


local function colorEqual(c1, c2)
    return c1.r == c2.r and c1.g == c2.g and c1.b == c2.b and c1.a == c2.a
end


function screenFloodFill(startX, startY, newColor)
    render.capturePixels() --   

    local width, height = _screenSize, _screenSize

    --    
    local targetColor = render.readPixel(startX, startY)

    --      
    if colorEqual(targetColor, newColor) then return end

    -- BFS 
    local queue = {{x = startX, y = startY}}
    local visited = {} --   

    --      
    local function getKey(x, y)
        return x .. "," .. y
    end

    render.setColor(newColor)

    while #queue > 0 do
        local point = table.remove(queue, 1)
        local x, y = point.x, point.y

        --  
        if x < 0 or y < 0 or x >= width or y >= height then continue end

        -- ,     
        local key = getKey(x, y)
        if visited[key] then continue end

        --   
        local currentColor = render.readPixel(x, y)
        if not colorEqual(currentColor, targetColor) then continue end

        --   
        visited[key] = true

        --  
        render.drawRectFast(x, y, 1, 1)

        --  
        table.insert(queue, {x = x + 1, y = y})
        table.insert(queue, {x = x - 1, y = y})
        table.insert(queue, {x = x, y = y + 1})
        table.insert(queue, {x = x, y = y - 1})
    end
end


function eventPalleteMouseHandler(x, y, keyPressedData)
    if keyPressedData[MOUSE.MOUSE1].IsFirst then
        render.selectRenderTarget("myrendertarget")
        
        --screenFloodFill(x, y, _ownColor)
        
        render.capturePixels()
        local color = render.readPixel(x, y)
        _ownColor = color
        --print(string.fromColor(_ownColor))
        
        local hsvColor = color:rgbToHSV()
        _rainbowSaturation = hsvColor.g
        _rainbowBrightness = hsvColor.b
        
        render.selectRenderTarget("toolBar")
        _toolbarButtonsData.RainBow.InitRender(_toolbarButtonsData.RainBow)
        _toolbarButtonsData.SetRainBowS.InitRender(_toolbarButtonsData.SetRainBowS)
        _toolbarButtonsData.SetRainBowV.InitRender(_toolbarButtonsData.SetRainBowV)
        
        drawMouseCallback = drawMainMouseHandler
        eventMouseCallback = eventMainMouseHandler
        render.selectRenderTarget()
    end
end


drawMouseCallback = drawMainMouseHandler
eventMouseCallback = eventMainMouseHandler

local _c = _screenSize / 512
local _w1 = 1024 / _c

function renderMainHandler(curx, cury)
    local x, y = curx, cury
    --printConsole(x)
    local keyPressedData = getNewButtonsPressedData()
    
    if keyPressedData[MOUSE.MOUSE1].Pressed and x < 20 and y < 20 then
        if keyPressedData[MOUSE.MOUSE1].IsFirst then
            _isOpenToolbar = !_isOpenToolbar
        end
        return
    end
    
    if !hasRights() then
        return end
    
    if _isOpenToolbar then
        toolbarHandler({X=x, Y=y}, keyPressedData)
        return
    end
    
    eventMouseCallback(x * _c, y * _c, keyPressedData)
end


hook.add("render","",function()
    filterImage()
    render.setRenderTargetTexture("myrendertarget")
    
    render.drawTexturedRect(0, 0, _w1, _w1)
    
    drawSyncRow()
    
    if _isOpenToolbar then
        render.setColor(Color(0,0,0,150))
        render.drawRectFast(0,0,1023,1023)
        filterImage()
        render.setRenderTargetTexture("toolBar")
        render.setColor(Color(255,255,255,255))
        render.drawTexturedRect(0,0,1023,1023)
    end
    
    render.setMaterial(_toolbarCogMaterial)
    render.setColor(Color(150,150,150, 255))
    render.drawTexturedRect(0,0,20,20)
    
    if _isSavingForDupe then
        render.setColor(Color(100,100,100,255))
        render.drawRectFast(40,256,432,20)
        render.setColor(Color(240,50,50,255))
        render.drawRectFast(44,260,_savingProgress*424,12)
        return
    end
    
    local curx, cury = render.cursorPos()
    local tr = _p:getEyeTrace()
        
    if curx and tr.Entity == render.getScreenEntity() and tr.Entity:getPos():getDistance(eyePos()) < WorkRadius then
        --render.drawText(curx, cury, "" .. math.round(curx, 1) .. ', ' .. math.round(cury, 1))
        renderMainHandler(curx, cury)
        drawMouseCallback(curx, cury, _ownColor, MouseScale)
    end
end)




----------------------------------------------------------
end) -- corWrap end
