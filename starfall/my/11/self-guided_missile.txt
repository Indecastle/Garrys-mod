--@name Self-guided missile
--@author Markiz
-- author STEAM_0:1:54066003
--@shared
-- version 1.1.15

local FindRadiusMin = 500
local FindRadiusMax = 10000

local RocketVelocity = 4000
local RocketLerpRatio = 0.11
local TrailTime = 2
local RockeForceTime = 10
local RocketAutoRemoveTime = 20

local AutoExplodeMaxDistance = 150
local MarkIsCloseTargetMaxDistance = 700
local CounterMeasureTriggerRadius = 500

local ExplodeDamage = 110
local ExplodeRadius = 500

local FireDelay = 5
local FindInBoxSize = 240

local OnlyVehicle = false
local OnlyUngod = true

local EyeFromChip = true
local WaitFindingTarget = false
local HasCenterDot = true

local RocketModel = "models/weapons/w_missile_closed.mdl" -- "models/weapons/w_missile_closed.mdl"
local RocketStartOffset = Vector(0,0,50)
local TrailRocketStartOffset = 15

local RocketStartForcingSoundUrl = "weapons/rpg/rocketfire1.wav"
local RocketForcingSoundUrl = "weapons/rpg/rocket1.wav" -- "thrusters/rocket04.wav"

local KeyBindData = { -- The value can be both the number and the list from the numbers
    Fire = MOUSE.MOUSE1,
    ChooseTarget = MOUSE.MOUSE2,
}


-----------------------------------------------------------------------


function table.filter(t, func)
    local maped = {}
    local j = 1
    for i=1, #t do
        if func(t[i]) then
            maped[j] = t[i]
            j = j + 1
        end
    end
    return maped
end

function table.map(t, func, ExcludeNil)
    local maped = {}
    if ExcludeNil == nil then ExcludeNil = false end
    for i=1, #t do
        local result = func(i, t[i])
        if !ExcludeNil or result ~= nil then
            maped[#maped + 1] = func(i, t[i])
        end
    end
    return maped
end


function isValidTarget_(ent)
    return ent != player() and !ent._isRocket and (ent:getClass() == 'prop_physics' or ent:isPlayer())
end


function isEntityVisible(startPos, targetEnt)
    local targetPos = targetEnt:obbCenterW()
    local dir = (targetPos - startPos):getNormalized()
    
    
    local tr = trace.line(startPos, startPos + dir*FindRadiusMax, isValidTarget_, MASK.ALL, nil, false)
    local dist = startPos:getDistance(tr.HitPos)
    if isValid(tr.Entity) then
        --printConsole(tr.Entity)
    end
    
    if tr.Entity == targetEnt then
        return true
    end
    
    local pos2 = trace.intersectRayWithOBB(startPos, dir*dist, targetPos, Angle(), Vector(-100,-100,-100), Vector(100,100,100))
    
    --local boxMin = Vector(0, 0, 0)
    --local boxMax = Vector(100, 100, 100)

    return !!pos2
end


function angleBetweenVectors(a, b)
    local dot = a:dot(b)
    local lenA = a:getLength()
    local lenB = b:getLength()
    local cosTheta = dot / (lenA * lenB)
    return math.deg(math.acos(cosTheta))
end


function getBaseHolo(pos)
    local holo =  hologram.create(pos, Angle(), "models/holograms/cube.mdl", Vector(1))
    holo:setNoDraw(true)
    return holo
end

---------------------------------------------------

local _locks = {}
function isLockEvent(name, sec)
    local curtime = timer.curtime()
    _locks[name] = _locks[name] or curtime
    local isLock = curtime < _locks[name]
    if sec ~= nil and !isLock then
        _locks[name] = curtime + sec
    end

    return isLock
end

function setLockEvent(name, sec)
    _locks[name] = timer.curtime() + sec
end

---------------------------------------------------
local _o, _e = owner(), chip()

if SERVER then
    
    wire.adjustPorts(
        {
            Seat = "entity",
        },
        {}
    )
    
    local _rockets = {}
    
    function sendExplodeBulletScene(pos)
        net.start("explodeBulletScene")
        net.writeVector(pos)
        net.send()
    end
    
    
    function explodeWireTo(pos, damage, radius)
        if !prop.canSpawn() then return end
    
        local ent = prop.createSent(pos, Angle(), "gmod_wire_explosive", true, {
            damage = damage,
            radius = radius,
            removeafter = true,
            Model = "models/bull/gates/logic_nano.mdl",
        })
        ent._isSF = true
        ent:setSolid(false)
        ent:setNoDraw(true)
        ent:getWirelink()['Detonate'] = 1
    end
    
    
    function explodeRocketScene(rocket)
        local holo = rocket._rocketHoloBase
        holo:setParent(nil)
        holo:emitSound("weapons/mortar/mortar_explode" .. math.random(1,3) .. ".wav", 120, nil, 1)
        timer.simple(TrailTime, function()
            if !isValid(holo) then return end
            holo:remove()
        end)
        sendExplodeBulletScene(holo:getPos())
    end
    
    
    function tryExplodeRocket(rocket)
        pcall(function()
            if !isValid(rocket) then return end
            explodeRocketScene(rocket)
            explodeWireTo(rocket:getPos(), ExplodeDamage, ExplodeRadius)
            --game.blastDamage(rocket:getPos(), ExplodeRadius, ExplodeDamage)
        end)
        rocket:remove()
    end
    
    
    --function notifyTarget(target)
    --    local holo = getBaseHolo(target:getPos())
    --    holo:setParent(target)
    --    timer.simple(2, function()
    --        if isValid(holo) then
    --            holo:remove()
    --        end
    --    end)
    --    -- vehicles/junker/radar_ping_friendly1.wav
    --    holo:emitSound("vehicles/junker/radar_ping_friendly1.wav", 75, 100, 1)
    --end
    
    
    function fireRocket(startPos, startAng, target)
        local rocket = prop.create(startPos, startAng, RocketModel, false)
        rocket:enableGravity(false)
        rocket:setHealth(10000000)
        --rocket:setMass(0)
        rocket:getPhysicsObject():setDragCoefficient(-10000)
        rocket:getPhysicsObject():setVelocity(rocket:getForward() * RocketVelocity)
        rocket._rocketHoloBase = getBaseHolo(rocket:getPos())
        rocket._rocketHoloBase:setNoDraw(true)
        --rocket._rocketHoloBase:setTrails(50, 0, TrailTime, "trails/smoke", Color(255,255,255))
        rocket._rocketHoloBase:setParent(rocket)
        rocket._isRocket = true
        rocket._target = target
        rocket._isForce = true
        rocket._lastLifeTime = timer.curtime() + RockeForceTime
        --rocket:emitSound(RocketForcingSoundUrl, 85, 100, 1, 0)
        _e:emitSound(RocketStartForcingSoundUrl, 85, 100, 1, 0)
        --rocket_isRocket = true
        rocket:addCollisionListener(function(data)
            tryExplodeRocket(rocket)
        end)
        timer.simple(RocketAutoRemoveTime, function()
            if isValid(rocket) then
                tryExplodeRocket(rocket)
            end
        end)
        
        --notifyTarget(target)
        table.insert(_rockets, rocket)
        
        net.start("sendRocketToClient")
        net.writeBool(!!target)
        if target then net.writeEntity(target) end
        net.writeEntity(rocket)
        net.send()
    end
    
    
    --timer.create("fire", 2, 0, function()
    --    fireRocket(chip():localToWorld(Vector(0,0,50)), chip():localToWorldAngles(Angle(-90, 00, 0)), owner())
    --end)
    
    
    hook.add("think", "ForceRockets", function()
        local curtime = timer.curtime()
        
        for i, rocket in ipairs(_rockets) do
            if !isValid(rocket) then
                table.removeByValue(_rockets, rocket)
                continue
            end
            
            if rocket._isForce and rocket._lastLifeTime < curtime then
                rocket:enableGravity(true)
                rocket._isForce = false
                net.start("setRocketNoForce")
                net.writeEntity(rocket)
                net.send()
            end
            
            local targetPos = rocket._target and rocket._target:obbCenterW() or (rocket:getPos() + rocket:getForward())
            
            local phys = rocket:getPhysicsObject()
            
            local diff = targetPos - rocket:getPos()
            local distance = diff:getLength()
            local dirTarget = diff:getNormalized()
            
            local rocketVelocity = phys:getVelocity()
            local rocketVelDir = rocketVelocity:getAngle()
            local mass = phys:getMass()
            
            local resultAngle = math.lerpAngle(RocketLerpRatio, rocketVelDir, dirTarget:getAngle())
            
            if rocket._isForce then
                phys:setVelocity(resultAngle:getForward() * RocketVelocity)
                phys:setAngleVelocity(Vector())
                phys:setAngles(resultAngle)
            end
            
            if rocket._target then
                if distance < AutoExplodeMaxDistance then
                    tryExplodeRocket(rocket)
                end
                
                if distance < MarkIsCloseTargetMaxDistance then
                    rocket._isTargetClose = true
                end

                if rocket._isTargetClose and distance >= MarkIsCloseTargetMaxDistance then
                    rocket._target = nil
                    --print(rocket)
                end
            end
            
        end
    end)
    
    timer.create("trigger_counter_measures", 0.1, 0, function()
        local countermeasurePosList = table.map(find.byClass("glide_flare"), function(i, ent)
            return ent:getPos()
        end)
        for _, rocket in ipairs(_rockets) do
            for _, mPos in ipairs(countermeasurePosList) do
                if rocket:getPos():getDistance(mPos) < CounterMeasureTriggerRadius then
                    tryExplodeRocket(rocket)
                end
            end
        end
    end)
    
    
    net.receive("fire", function(len, ply)
        local hasTarget = net.readBool()
        local target = hasTarget and net.readEntity() or nil
        if (target != nil and !isValid(target)) or isLockEvent("canFire", FireDelay) then return end
        
        fireRocket(chip():localToWorld(RocketStartOffset), chip():localToWorldAngles(Angle(-90, 00, 0)), target)
    end)
        
    -------------------------------------------------
    
    function userHasGodMode(user)
        if user:hasGodMode() then
            return true
        end
        local isKyleBuilder = user:getNWVar("_Kyle_Buildmode")
        return isKyleBuilder != nil and isKyleBuilder
    end
    
    
    timer.create("check_players", 1, 0, function()
        local players = find.allPlayers(function(ent)
            return !OnlyUngod or !userHasGodMode(ent)
        end)
        
        net.start("conecting_players")
        net.writeTable(players)
        net.send()
    end)
    
    
    hook.add("EntityTakeDamage", "", function(target, attacker, inflictor, amount, type, position, force)
        --local driver = _vehicle:getDriver()
        if isValid(inflictor)
                and inflictor._isSF
                and isValid(target)
                and target:isPlayer()
                and target:isAlive()
                and (!OnlyUngod or !userHasGodMode(target)) then
            net.start("entityTakeDamage")
            net.writeVector(target:getPos())
            net.writeInt(math.round(amount, 0), 32)
            net.send()
        end
    end)
    
    ---------------------------------------------------------
    
    function syncInitData(ply)
        --if !isValid(wire.ports.Seat) then return end
        
        net.start("init")
        net.writeEntity(isValid(wire.ports.Seat) and wire.ports.Seat or entity(0))
        net.send(ply)
    end
    
    
    hook.add("input","",function(inp, value)
        if inp == "Seat" then
            syncInitData()
            if isValid(value) then
                local hud = chip():getLinkedComponents()[1]
                if isValid(hud) then
                    hud:linkComponent(value)
                end
            end
        end
    end)
    
    
    hook.add("ClientInitialized", "cl_init", function(ply)
        syncInitData(ply)
    end)
    
    ---------------------------------------------------------
        
    return
end


-- =================== CLIENT ====================================================================================================================

local _p = player()

render.createRenderTarget("template")
local m = material.load("particle/smokesprites_0004")
local m2 = material.load("particles/flamelet5")
local _smallFont = render.createFont("Arial", 21, 400, true)
local _notifySound = sound.create(_p, "vehicles/junker/radar_ping_friendly1.wav")
local _triSound --= sound.create(_p, "synth/tri.wav")

local _damageInfo = {}
local _validPlayers, _resultPlayers = {}, {}
local _rockets = {}
local _vehicle = nil
local _inited = false

local _width, _height = render.getGameResolution()
local _centerPos = Vector(_width/2, _height/2, 0)
local _target, _waitingTarget = nil, nil

------------------ Mouse
local mouseKeys = {}
for k, v in pairs(MOUSE) do
    mouseKeys[v] = true
end

local _keyPressedData = {}
for _, keys in pairs(KeyBindData) do
    if type(keys) == 'table' then
        for _, key in pairs(keys) do
            if _keyPressedData[key] == nil then
                _keyPressedData[key] = {}
            end
        end
    else
        if _keyPressedData[keys] == nil then
            _keyPressedData[keys] = {}
        end
    end
end
for k, data in pairs(_keyPressedData) do
    data.IsMouse = mouseKeys[k]
end
------------------

bass.loadFile("sound/synth/tri.wav", "3d mono noblock noplay", function(snd, errorCode, errorName)
    _triSound = snd
    snd:setLooping(true)
    snd:setPitch(1.6)
    snd:setVolume(0.2)
    snd:setFade(0, 10000, true)
    --print(errorCode, errorName)
end)


function getBindCb_(bindKey)
    if type(KeyBindData[bindKey]) == 'table' then
        result = {Pressed = false, IsFirst = false}
        for i, key in ipairs(KeyBindData[bindKey]) do
            result.IsFirst = result.IsFirst or _keyPressedData[key].IsFirst
            result.Pressed = result.Pressed or _keyPressedData[key].Pressed
            if result.IsFirst and result.Pressed then
                break
            end
        end
        return result
    else
        return _keyPressedData[KeyBindData[bindKey]]
    end
end


function getBindCbHandler()
    for k, v in pairs(_keyPressedData) do
        local newPressed = v.IsMouse and input.isMouseDown(k) or input.isKeyDown(k)
        v.IsFirst = v.Pressed != newPressed and newPressed
        v.Pressed = newPressed
    end
    
    return getBindCb_
end


function isActive()
    return _inited and render.isHUDActive() and (!isValid(_vehicle) or _vehicle:getDriver() == _p)
end


net.receive("init", function(len)
    _inited = true
    _vehicle = net.readEntity()
end)


----------------------------------------------------

function handleDamageInfo()
    local now = timer.curtime()
    for i, data in ipairs(_damageInfo) do
        if data.DieTime < now then
            table.removeByValue(_damageInfo, data)
        end
    end
end


net.receive("entityTakeDamage", function()
    local pos = net.readVector()
    local amount = net.readInt(32)
    table.insert(_damageInfo, 1, {
        Pos = pos,
        Amount = amount,
        DieTime = timer.curtime() + 2
    })
end)


timer.create("200 ms", 0.2, 0, function()
    handleDamageInfo()
end)

----------------------------------------------------------

net.receive("conecting_players", function (len)
    _validPlayers = net.readTable()
end)


timer.create("findVisiblePlayers", 0.4, 0, function()
    if !isActive() then return end
    local startPos = EyeFromChip and (chip():getPos() + chip():getForward()*42) or eyePos()
    _resultPlayers = table.filter(_validPlayers, function(ent)
        if !isValid(ent) or ent:getPos():getDistance(startPos) < FindRadiusMin then return false end
        if OnlyVehicle and !ent:inVehicle() then
            return false
        end
        return isEntityVisible(startPos, ent)
    end)
    --rintConsole(#_resultPlayers)
end) 

----------------------------------------------------------

function notifyTarget(target)
    if target != _p then return end
    -- vehicles/junker/radar_ping_friendly1.wav
    _notifySound:stop()
    _notifySound:play()
end

    
function createParticle(emitter, pos, mat, lifeTime)
    local dir = Vector(math.rand(-1, 1), math.rand(-1, 1), math.rand(0, 1)):getNormalized()
    -- (Material material, Vector position, number startSize, number endSize, number startLength, number endLength, number startAlpha, number endAlpha, number dieTime)
    local part = emitter:add( mat, pos + dir*math.random(0, 50), 100, 1000, 0, 0, 50, 0, lifeTime )
    part:setCollide(true)
    part:setBounce(0)
    part:setVelocity( dir*500 )
    part:setAirResistance(100)
end


net.receive("explodeBulletScene", function(len)
    local explodePos = net.readVector()
    local emitter = particle.create(Vector(), false)
    
    for i=1, 5 do
        createParticle(emitter, explodePos, m, 5)
    end
    for i=1, 5 do
        createParticle(emitter, explodePos, m2, 5)
    end
    emitter:destroy()
end)


net.receive("sendRocketToClient", function(len)
    local hasTarget = net.readBool()
    local target = hasTarget and net.readEntity() or nil
    net.readEntity(function(rocket)
        if !isValid(rocket) then return end
        rocket._isRocket = true
        rocket._isForce = true
        rocket._target = target
        rocket._holo = getBaseHolo(rocket:getPos())
        rocket._holo:setParent(rocket)
        rocket._holo:emitSound(RocketForcingSoundUrl, 85, 100, 1, 0)
        table.insert(_rockets, rocket)
    end)
    
    notifyTarget(target)
end)

hook.add("EntityRemoved", "removeHolo", function(ent)
    if isValid(ent) and isValid(ent._holo) then
        ent._holo:remove()
    end
end)


net.receive("setRocketNoForce", function(len)
    net.readEntity(function(rocket)
        if !isValid(rocket) then return end
        rocket._isForce = false
    end)
end)


hook.add("think", "particleRockets", function()
    local emitter = particle.create(Vector(), false)
    local curtime = timer.curtime()
    
    for i, rocket in ipairs(_rockets) do
        if !isValid(rocket) then
            table.removeByValue(_rockets, rocket)
            continue
        end
        if not rocket._isForce then
            continue
        end
        
        local maxSize = 150
        local startAlpha = 200
        local part = emitter:add( m, rocket:getPos() - rocket:getForward()*TrailRocketStartOffset, 5, maxSize, 0, 0, startAlpha, 0, TrailTime )
        part:setColor(Color(100,100,100))
        part:setRollDelta(2)
        part:setAirResistance(30)
        part:setVelocity(-rocket:getForward():rotateAroundAxis(Vector(1,0,0), math.random(-20, 20))*400)
    end
    emitter:destroy()
end)


--------------------------------------------------------------------------------------------

function renderCameraRect(x, y, size, lineWidth, lineLength)
    offset = offset or 0
    local rectStartX, rectStartY = x-size, y-size
    local rectEndX, rectEndY = x+size, y+size
    
    render.drawRect(rectStartX, rectStartY, lineWidth, lineLength) -- top-left
    render.drawRect(rectStartX, rectStartY, lineLength, lineWidth)

    render.drawRect(rectEndX-lineWidth, rectEndY-lineLength, lineWidth, lineLength) -- bottom-right
    render.drawRect(rectEndX-lineLength, rectEndY-lineWidth, lineLength, lineWidth)
    
    render.drawRect(rectEndX-lineWidth, rectStartY, lineWidth, lineLength) -- top-right
    render.drawRect(rectEndX-lineLength, rectStartY, lineLength, lineWidth)
    
    render.drawRect(rectStartX, rectEndY-lineLength, lineWidth, lineLength) -- bottom-left
    render.drawRect(rectStartX, rectEndY-lineWidth, lineLength, lineWidth)
end


hook.add("renderoffscreen", "InitTemplate", function()
    hook.remove("renderoffscreen", "InitTemplate")
    
    render.selectRenderTarget("template")
    render.setLightingMode(0)
    
    render.clear(Color(0,0,0,0))
    render.setColor(Color(0,0,0))
    renderCameraRect(514, 514, FindInBoxSize, 2, 40)
    render.setColor(Color(255,255,255))
    renderCameraRect(512, 512, FindInBoxSize, 2, 40)
    --renderCameraRect(60, 2, 30)
end)

--------------------------------------------------------------------------------------------


function filterImage()
    render.setFilterMin(1)
    render.setFilterMag(1)
end


function inBox(pos)
    return math.abs(pos.x - _centerPos.x) < FindInBoxSize and math.abs(pos.y - _centerPos.y) < FindInBoxSize
end


local _waitingState, _state, _nextStateTime = 0, 0, 0

function waitingTargetToResultTarget()
    local curtime = timer.curtime()
    _triSound:setPos(eyePos() + Vector(0,0,1000))
    
    if curtime < _nextStateTime then return end
    _state = _state + 1
    
    --printConsole(_state)
    if _state == 1 then
        _nextStateTime = curtime + 0.3
    elseif _state == 2 then
        _nextStateTime = curtime + 0.05
        _triSound:play()
    elseif _state == 3 then
        _nextStateTime = curtime + 0.2
        _triSound:pause()
    elseif _state == 4 then
        _nextStateTime = curtime + 0.05
        _triSound:play()
    elseif _state == 5 then
        _nextStateTime = curtime + 0.2
        _triSound:pause()
    elseif _state == 6 then
        _waitingState = 1
        _nextStateTime = curtime + 0.05
        _triSound:play()
    elseif _state == 7 then
        _nextStateTime = curtime + 0.1
        _triSound:pause()
    elseif _state == 8 then
        _nextStateTime = curtime + 0.05
        _triSound:play()
    elseif _state == 9 then
        _nextStateTime = curtime + 0.1
        _triSound:pause()
    elseif _state == 10 then
        _nextStateTime = curtime + 0.05
        _triSound:play()
    elseif _state == 11 then
        _nextStateTime = curtime + 0.1
        _triSound:pause()
    elseif _state == 12 then
        _nextStateTime = curtime + 0.05
        _triSound:play()
    elseif _state == 13 then
        _nextStateTime = curtime + 0.1
        _triSound:pause()
    elseif _state == 14 then
        _nextStateTime = curtime + 0.05
        _triSound:play()
    elseif _state == 15 then
        _nextStateTime = curtime + 0.1
        _triSound:pause()
    elseif _state == 16 then
        _nextStateTime = curtime + 0.05
        _triSound:play()
    elseif _state == 17 then
        _nextStateTime = curtime + 0.1
        _triSound:pause()
    elseif _state == 18 then
        _waitingState = 2
        _nextStateTime = curtime + 0.8
        _target = _waitingTarget
        _triSound:play()
    else
        _state = -1
        _triSound:pause()
    end
    
end

local prevWaitingTarget
hook.add("think", "waitState", function()
    if _waitingTarget and isValid(_triSound) and _state >= 0 then
        waitingTargetToResultTarget()
    end
end)


function resetWaitingData()
    _nextStateTime = 0
    _state = 0
    _waitingState = 0
    if isValid(_triSound) then
        _triSound:pause()
    end
    
    _waitingTarget = nil
    _target = nil
end


function findClosestTarget(bindCb)
    if !bindCb('ChooseTarget').Pressed then
        resetWaitingData()
        return
    end
    
    
    if isLockEvent("isFindTarget", 0.5) then
        if isValid(_waitingTarget) and table.hasValue(_resultPlayers, _waitingTarget) then
            local pos = _waitingTarget:obbCenterW():toScreen()
            if inBox(pos) then
                return
            end
        end
        
        
        local closestPly, closestDist = nil, 999999999
        
        for i, p in ipairs(_resultPlayers) do
            if p == _p or !isValid(p) or !p:isAlive() then continue end
            
            local pos = p:obbCenterW():toScreen()
            if !pos.visible or !inBox(pos) then continue end
            
            --printConsole(pos.x, pos.y, pos.visible)
            local dist = _centerPos:getDistance(Vector(pos.x, pos.y, 0))
            if dist < closestDist then
                closestPly, closestDist = p, dist
            end
        end
        _waitingTarget = closestPly
        
        if prevWaitingTarget != _waitingTarget then
            prevWaitingTarget = _waitingTarget
            resetWaitingData()
        end
    end
end


function drawRect(bindCb)
    if !bindCb('ChooseTarget').Pressed then
        return
    end
    
    render.setRenderTargetTexture("template")
    --filterImage()
    local IsRect = true
    local kk = IsRect and (_height/_width) or 1
    render.drawTexturedRect(_width/2 - _width*kk/2, 0, _width*kk, _height)
end


function drawCenterDot(bindCb)
    if !HasCenterDot or !bindCb('ChooseTarget').Pressed or isValid(_target) then return end
    
    local startPos = _e:getPos()
    local tr = trace.line(startPos, startPos + _e:getUp()*9999999999, isValidTarget_, MASK.ALL, nil, false)
    local pos = tr.HitPos:toScreen()
    render.setColor(Color(255,255,255, 150))
    render.drawRectFast(pos.x, pos.y, 5, 5)
end


function drawVisiblePlayers(bindCb)
    if !bindCb('ChooseTarget').Pressed then
        return
    end
    
    for i, p in ipairs(_resultPlayers) do
        if isValid(p) and p ~= _p and p:isAlive() then
            local pos = p:obbCenterW():toScreen()
            if !inBox(pos) then continue end
            
            --local color = p:isPlayer() and p:inVehicle() and Color(255,100,100) or Color(255,255,100)
            local color = _waitingTarget == p and Color(255,100,100) or Color(255,255,100)
            
            --render.setFont(font)
            --render.setColor(team.getColor(p:getTeam()))
            render.setColor(color)
            --render.drawText(pos.x, pos.y, p:inVehicle() and p:getVehicle():getClass() or "", 1)
            local BoxSize = 5
            render.drawRect(pos.x-BoxSize, pos.y-BoxSize, BoxSize*2, BoxSize*2)
        end
    end
end


function getWaitingTargetColor()
    if _waitingState == 0 then return Color(255,255,255) end
    if _waitingState == 1 then return Color(0,255,0) end
    if _waitingState == 2 then return Color(255,0,0) end
end


function drawClosestPlayer()
    if !isValid(_waitingTarget) then return end
    if OnlyVehicle and !isValid(_waitingTarget:getVehicle()) then return end
    
    local pos = (OnlyVehicle and _waitingTarget:getVehicle() or _waitingTarget):obbCenterW():toScreen()
    render.setColor(Color(0,0,0))
    renderCameraRect(pos.x+2, pos.y+2, 33, 2, 10)
    render.setColor(getWaitingTargetColor())
    renderCameraRect(pos.x, pos.y, 33, 2, 10)
end


function drawDamageInfo()
    render.setColor(Color(255,255,0, 150))
    --render.setFont(_smallFont)
    for i, data in ipairs(_damageInfo) do
        local pos = data.Pos:toScreen()
        render.drawSimpleText(pos.x, pos.y, '-' .. data.Amount)
    end
end


function eventMouseHandler(bindCb)
    local target = _target
    --local target = owner()
    if bindCb('ChooseTarget').Pressed and bindCb('Fire').IsFirst and (!WaitFindingTarget and target == nil or isValid(target)) then
        net.start("fire")
        net.writeBool(!!target)
        if target then
            net.writeEntity(target)
        end
        net.send()
    end
end


hook.add("DrawHUD", "", function()
    if !isActive() then return end
    
    local bindCb = getBindCbHandler()
    drawRect(bindCb)
    drawCenterDot(bindCb)
    findClosestTarget(bindCb)
    --drawVisiblePlayers(bindCb)
    drawClosestPlayer()
    drawDamageInfo()
    eventMouseHandler(bindCb)
end)

