@name CDU's integated Boat E2
@inputs Active Base:entity [Pod,Cam,EGP]:wirelink PrevWeapon Guns:array String:string Speed
@outputs 
@persist Seat:entity Interval Res:vector2 Zoom CamDistance Q [,Position,CrosshairColor, PointerColor]:vector 
@trigger Active PrevWeapon


#-----CDU's Boat integrated E2-----ChunderDownUndeR-----v1.0!'
#Make sure this E2 faces the direction of your boat, this is because i dont know angle commands it gets the heading from the E2 itself istead of the base
#This acts as a camera and hud for your boat

if(first()){

#---Setup---

    #general
    Interval = 200 # Update tick for HUD

    #Cam
    CamDistance = 500
    Position = vec(0,0,300)
    
    #CDU HUD Settings
    HUD = 1 # Inbuilt HUD. 0 Disable.
    CrosshairColor = vec(130,220,130)
    PointerColor = vec(255,255,255)
    
    rangerPersist(1)
    rangerFilter(Guns)


#---Setup finished---   
    
}

if(changed(PrevWeapon)&PrevWeapon){Zoom = !Zoom ,Cam["FOV",normal] = 90-(60*Zoom) }
if(changed(String)){EGP:egpSetText(31,String)
    if(String=="Full Ahead"){EGP:egpPos(20,Res+vec2(-400,-110))}
    elseif(String=="2/3 Forward"){EGP:egpPos(20,Res+vec2(-400,-110*0.66))}
    elseif(String=="1/3 Forward"){EGP:egpPos(20,Res+vec2(-400,-110*0.33))}
    elseif(String=="Stop"){EGP:egpPos(20,Res+vec2(-400,0))}
    elseif(String=="1/3 Backwards"){EGP:egpPos(20,Res+vec2(-400,55))}
    else{EGP:egpPos(20,Res+vec2(-400,110))}  
}

if (~Active){
    
    
    Seat = Pod["Entity",entity]
    Cam["Activated",normal]=Active
    Cam["Parent",entity]=Base
    Cam["Distance",normal]=CamDistance
    Cam["Position",vector]=Base:toWorld(Position)
    Res = egpScrSize(Seat:driver())/2  
    
    if(Active){
        
        #Hud
        EGP:egpBox(1,Res+vec2(60,0),vec2(2,30))
        EGP:egpBox(2,Res+vec2(-60,0),vec2(2,30))
        EGP:egpBox(3,Res+vec2(100,0),vec2(2,20))
        EGP:egpBox(4,Res+vec2(-100,0),vec2(2,20))
        EGP:egpBox(5,Res+vec2(-140,0),vec2(160,2))
        EGP:egpBox(6,Res+vec2(140,0),vec2(160,2))
        EGP:egpBox(7,Res+vec2(140,0),vec2(2,30))
        EGP:egpBox(8,Res+vec2(-140,0),vec2(2,30))
        EGP:egpBox(9,Res+vec2(180,0),vec2(2,20))
        EGP:egpBox(10,Res+vec2(-180,0),vec2(2,20))  
        EGP:egpBox(11,Res+vec2(0,40),vec2(60,2))
        EGP:egpBox(12,Res+vec2(0,60),vec2(45,2))          
        EGP:egpBox(13,Res+vec2(0,80),vec2(32.5,2))
        EGP:egpBox(14,Res+vec2(0,100),vec2(18,2)) 
        EGP:egpBox(15,Res+vec2(0,120),vec2(12,2))
        EGP:egpBox(16,Res+vec2(0,140),vec2(9,2)) 
        EGP:egpBox(17,Res+vec2(220,0),vec2(2,30))
        EGP:egpBox(18,Res+vec2(-220,0),vec2(2,30))
        EGP:egpBox(19,Res,vec2(2))
        
        EGP:egpBox(21,Res+vec2(-350,0),vec2(2,250))           
        EGP:egpBox(22,Res+vec2(-380,110),vec2(35,2))
        EGP:egpBox(23,Res+vec2(-380,55),vec2(35,2)) 
        EGP:egpBox(24,Res+vec2(-380,0),vec2(35,2)) 
        EGP:egpBox(25,Res+vec2(-380,-55),vec2(35,2)) 
        EGP:egpBox(26,Res+vec2(-380,-110),vec2(35,2))         
        EGP:egpBox(27,Res+vec2(-380,82.5),vec2(20,2)) 
        EGP:egpBox(28,Res+vec2(-380,-82.5),vec2(20,2))  
        EGP:egpBox(29,Res+vec2(-380,27.5),vec2(20,2))  
        EGP:egpBox(30,Res+vec2(-380,-27.5),vec2(20,2)) 
        EGP:egpText(31,"Stop",Res+vec2(-366,-150)) 
        EGP:egpText(48,"Knots: 0",Res+vec2(-366,150))     
        EGP:egpText(32,"THRT",Res+vec2(-435,100))   
        EGP:egpBoxOutline(20,Res+vec2(-400,0),vec2(96,25))
        
        EGP:egpBox(33,Res+vec2(0,-300),vec2(300,2))  
        EGP:egpText(34,"N",Res+vec2(-5,-330))
        EGP:egpBox(35,Res+vec2(0,-305),vec2(2,10))  
        EGP:egpText(36,"S",Res+vec2(-155,-330))
        EGP:egpBox(37,Res+vec2(-150,-305),vec2(2,10)) 
        EGP:egpText(38,"S",Res+vec2(145,-330))
        EGP:egpBox(39,Res+vec2(150,-305),vec2(2,10)) 
        EGP:egpText(40,"E",Res+vec2(70,-330))
        EGP:egpBox(41,Res+vec2(75,-305),vec2(2,10)) 
        EGP:egpText(42,"W",Res+vec2(-80,-330))
        EGP:egpBox(43,Res+vec2(-75,-305),vec2(2,10)) 
        EGP:egpText(44,"0",Res+vec2(-5,-290))
        EGP:egpTriangle(47,Res+vec2(0,-306),Res+vec2(6,300),Res+vec2(-6,300))
  #      EGP:egpBox(48,Res+vec2(0,-300),vec2(2,2))
   #     EGP:egpParent(47,48)
  #      EGP:egpAlpha(47,0)

        
        EGP:egpText(45,"Insert Text Here",Res+vec2(80,40))
        EGP:egpText(46,"Insert Text Here",Res+vec2(80,60))

        for(H=1,48){EGP:egpColor(H,CrosshairColor)}
        
        for(G=1,Guns:count()){
        holoCreate(G)
        holoAlpha(G,0)
        EGP:egp3DTracker(50+G,vec(0))
        EGP:egpParent(50+G,holoEntity(G))
        
        EGP:egpPolyOutline(70+G,vec2(6,6),vec2(0,0),vec2(-6,6),vec2(0,0))
        EGP:egpParent(70+G,50+G)
        EGP:egpColor(70+G,PointerColor)    
        }

    
    timer("Update",Interval)    
    }
}

if(clk("Update")&Active){
 
#interval(Interval)
 
Aim=Seat:driver():keyPressed("Q")
if(changed(Aim)&Aim){Q=!Q
    Cam["Distance",normal] = !Q*CamDistance 
if(!Q){  
    Cam["Position",vector]=Base:toWorld(Position)}
else{
    Cam["Position",vector]=Base:pos()+vec(0,0,220)}}
  
        for(G=1,Guns:count()){
            Gun=Guns[G,entity]
holoPos(G,rangerOffset(9999999999,Gun:pos()+Gun:forward()*100,Gun:forward()):position())}
EGP:egpSetText(48,"Knots: " +Speed)    
Heading = round(entity():angles():yaw())
EGP:egpSetText(44,toString(Heading))
Slide=Res+vec2((Heading/180)*150,-300)
EGP:egpTriangle(47,Slide+vec2(6,0),Slide+vec2(-6,0),Slide+vec2(0,-6))
    timer("Update",Interval)    
}
if(dupefinished()){reset()}
