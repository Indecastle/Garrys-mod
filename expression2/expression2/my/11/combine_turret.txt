@name Combine Turret
@inputs
@outputs [Driver Turret]:entity Firying
@persist [E O]:entity Players:array W:wirelink Distance StoredAngle:angle MaxDegreeToRelease MaxDegreeToControl
@trigger 

if (first() | dupefinished()) { 
    E=entity() O=owner()
    
    Distance = 75
    MaxDegreeToRelease = 110
    MaxDegreeToControl = 70
    
    findByClass("gmod_wire_turret")
    Turret = findClosest(E:pos())
    W = Turret:wirelink()
    
    function number getDegreeDiff(Dir1:vector, Dir2:vector) {
        Cos = (Dir1:x()*Dir2:x()+Dir1:y()*Dir2:y()+Dir1:z()*Dir2:z()) / (Dir1:distance(vec(0))*Dir2:distance(vec(0)))
        return acos(Cos)
    }
    
    timer("scan", 100)
}


interval(10)


if (clk("scan")){
    findByClass("player")
    local OP = findToArray()
    if (Players:count() != OP:count()){
        runOnKeys(OP, 1)
    }
    Players = OP
    timer("scan",1000)
}


local Who = keyClk()

if (Who) {
    if (changed(Who:keyPressed("e")) && Who:keyPressed("e")) {
        if (Driver == Who & Driver:isPlayer()) {
            Driver = noentity()
        }
        else {
            local Dir1 = Who:eyeAngles():forward()
            local Dir2 = (Turret:pos() - Who:shootPos()):normalized()
            if (Who:shootPos():distance(Turret:pos()) < Distance & getDegreeDiff(Dir1, Dir2) < 30) {
                Driver = Who
                Turret:soundPlay(1, 10, "weapons/shotgun/shotgun_cock.wav")
            }
        }

    }
}

if (Driver:isPlayer()) {
    if (changed(Driver:keyPressed("mouse_left"))) {
        Firying = Driver:keyPressed("mouse_left")
        W["Fire", number] = Firying
    }
    
    local Dir1 = Driver:eyeAngles():forward()
    local Dir2 = E:angles():forward()
    local DegreeDiff = getDegreeDiff(Dir1, Dir2)
    
    if (DegreeDiff < MaxDegreeToControl) {
        StoredAngle = Driver:eyeAngles()
    }
    
    if (Driver:shootPos():distance(Turret:pos()) > Distance 
            | getDegreeDiff(Dir1, Dir2) > MaxDegreeToRelease
            | E:toLocal(Driver:shootPos()):x() > 0) {
        Driver = noentity()
    }
    
} else {
    W["Fire", number] = 0
}

if (Driver:isPlayer()) {
    Turret:setAng(StoredAngle)
} else {
    Turret:setAng(E:angles())
}

Turret:setPos(E:toWorld(vec(0, 0, 20)))

