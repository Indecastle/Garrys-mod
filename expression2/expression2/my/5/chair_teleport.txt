@name Chair Controler 3 (teleport)
@inputs [Hud PodControler Camera TeleportWireLink]:wirelink ChangePlayer
@inputs Shield ShieldOn Power
@outputs Target:entity CamPos:vector CamAng:angle AimPos:vector Const_TpSound_Off
@persist Target:entity CamPos:vector CamAng:angle AimPos:vector Failed N ChangePlayer Spying
@persist Chair:entity
@persist EI I [Players OP]:table WHRadius
@outputs Holo_FadeTime Holo_GroundBeam Holo_LineBeam Holo_Size Holo_Local [Holo_Pos Holo_Color]:vector Holo_Active Color_I
@trigger all

function void setPos(V:vector){
    holoPos(1, holoEntity(1):toWorld(V))
}
function void updateCamPos(){
    Holo_Pos = CamPos
}

W = PodControler:number("W")
S = PodControler:number("S")
A = PodControler:number("A")
D = PodControler:number("D")
R = PodControler:number("R")
Shift = PodControler:number("Shift")

Space = PodControler:number("Space")
ChairActive = PodControler:number("Active")
Bearing = PodControler:number("Bearing")
Elevation = PodControler:number("Elevation")
Attack = PodControler:number("Mouse1")
Follow = PodControler:number("Mouse2")
Light = PodControler:number("Light")
AltTeleport = PodControler:number("Alt")
Driver = PodControler:entity("Driver")


if (ChairActive){
    interval(10)
}
else{
    interval(1000)
}

if (changed(ChairActive) && ChairActive) {
    Chair:hintDriver("W,A,C,D - Move",5)
    Chair:hintDriver("Alt - Jump", 5)
    if (Driver == owner()) {
        Chair:hintDriver("Space - Toggle HoloEmitter",5)
    }
    #Chair:printDriver(" ")
    #Chair:printColorDriver(vec(255,255,0), "W A C D", vec(0,255,255), "")
    #Chair:printColorDriver(vec(255,255,0), "Alt", vec(0,255,255), " - Jump")
    #Chair:printColorDriver(vec(255,255,0), "Space", vec(0,255,255), " - Toggle HoloEmitter")
}

holoAng(1,ang(vec(-Elevation, Bearing-Chair:angles():yaw(), 0)))

if (first() | dupefinished()){    
    holoCreate(1)
    holoShadow(1,0)
    holoColor(1,vec(0,0,0),0)
    Chair = PodControler:entity("Entity")
    
    Failed = 0
    N = 0
    
    Spying = 0
    
    Holo_FadeTime = 0.1
    Holo_GroundBeam = 0
    Holo_LineBeam = 0
    Holo_Size = 100
    Holo_Local = 0
    Holo_Active = 1
    WHRadius = 5000
    Hud:egpClear()
    timer("scan", 0)
    timer("holotrail_generate", 0)
}

if (Spying){
    holoPos(1, Target:toWorld(vec(0,0,80)))
    if (W|S|A|D){
        Spying = 0
    }
}else{
    Holo_FadeTime = 0.1
    Holo_GroundBeam = 0
    Holo_LineBeam = 0
    if (Shift) {
        Holo_FadeTime = 3
        Holo_GroundBeam = 0
        Holo_LineBeam = 1
    }
    
    if (Light){
        Spying = 1
    }
    if (W){
        if (Shift){
            setPos(vec(50,0,0))
        }
        else{
            setPos(vec(7,0,0))
        }
    }
    elseif (S){
        if (Shift){
            setPos(vec(-50,0,0))
        }
        else{
            setPos(vec(-7,0,0))
        }
    }
    if (A){
        if (Shift){
            setPos(vec(0,50,0))
        }
        else{
            setPos(vec(0,5,0))
        }
    }
    elseif(D){
        if (Shift){
            setPos(vec(0,-50,0))
        }
        else{
            setPos(vec(0,-5,0))
        }
    }
}
if (R){
}

if(Driver == owner() && changed(Space) && Space) {
    if (Holo_Size == 100) {
        Holo_Size = 0
        Chair:printColorDriver(vec(255,255,0), "HoloEmitter", vec(255,0,0), "  = OFF")
    } else {
        Holo_Size = 100
        Chair:printColorDriver(vec(255,255,0), "HoloEmitter", vec(0,255,0), "  = ON")
    }    
}

CamPos = holoEntity(1):pos()
CamAng = holoEntity(1):angles()
Camera:setVector("Position",CamPos)
Camera:setAngle("Angle",CamAng)

#Camera:setAngle("Angle",ang(vec(-Elevation, Bearing, 0)))

AimPos = rangerOffset(10000,holoEntity(1):pos(),holoEntity(1):forward()):pos()


if(AltTeleport) {
    timer("tp1", 0)
}

if (clk("tp1")) {
    local TargetPos = vec()
    TargetPos = CamPos
    TeleportWireLink["TargetPos",vector] = TargetPos
    timer("tp2",100)
}

if (clk("tp2")) {
    TeleportWireLink["Jump",number] = 1
}



if (clk("holotrail_generate")){
    Color_I = (Color_I+10)%360
    Holo_Color = hsv2rgb(Color_I, 1, 1)
    #Holo_Color = vec(randint(255),randint(255),randint(255))
    updateCamPos()
    
    timer("holotrail_generate", 100)
}



if (clk("scan")){
    O = owner()
    #findByClass("player")
    findIncludeClass("player")
    findInSphere(CamPos, WHRadius)
    Players=findToTable()
    if (Players:count()!=OP:count()){
        I=0
        EI=0
        timer("egp",10)
        Hud:egpClear()
    }
    OP=Players
    timer("scan",200)
}
if (clk("egp")&(I<Players:count())){
    I++
    P=Players[I,entity]
    
    EI++
    Hud:egp3DTracker(EI,vec(0,0,0))
    Hud:egpParent(EI,P)
    if(Players[I,entity]:isAdmin()){
        EI++
        Hud:egpBox(EI,vec2(0,0),vec2(10,10))
        Hud:egpColor(EI,vec4(255,0,0,100))
        Hud:egpPos(EI,Hud:egpPos(EI-1))
        Hud:egpParent(EI,EI-1)
    }else{
        EI++
        Hud:egpBox(EI,vec2(0,0),vec2(10,10))
        Hud:egpColor(EI,vec4(100,255,100,100))
        Hud:egpPos(EI,Hud:egpPos(EI-1))
        Hud:egpParent(EI,EI-1)
    }
    
    EI++
    Hud:egpText(EI,Players[I,entity]:name() ,vec2(-10,0))                    Hud:egpSize(EI,13)
    Hud:egpText(EI+Players:count()*5,Players[I,entity]:name() ,vec2(-10,10)) Hud:egpSize(EI+Players:count()*5,13)
    
    Hud:egpParent(EI,EI-2)
    Hud:egpParent(EI+Players:count()*5,EI-2)
    timer("egp",50)
    if(I>=Players:count()) { timer("distance",100) }
}

if(clk("distance"))
{
    for(J=1, Players:count())
    {
        Dist = CamPos:distance(Players[J,entity]:pos())/100
        Hud:egpSetText(J*3+Players:count()*5,Players[J,entity]:health() + "hp" + " | " + round(Dist) + "m")
    }
    timer("distance",100)
}
