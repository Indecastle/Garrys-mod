@name Cookie
@inputs 
@outputs 
@persist [E Base Coo1 Coo2 Coo3]:entity I Ar:array CookieDelay
@trigger 
interval(10)
if(first()){
    E=entity()
    
    CookieDelay = 5000
    
    Ar=array()
    
    holoCreate(1,E:toWorld(vec(0,30,15)))
    holoModel(1,"models/hunter/plates/plate125.mdl")
    holoScale(1,vec(1,1,1))
    holoMaterial(1,"models/props_canal/canal_bridge_railing_01b")
    holoAng(1,ang(0,0,90))
    
    holoCreate(2,holoEntity(1):toWorld(vec(4,32,0)))
    holoModel(2,"models/hunter/plates/plate025.mdl")
    holoScale(2,vec(1,1,1))
    holoMaterial(2,"models/props_canal/canal_bridge_railing_01b")
    holoAng(2,ang(45,0,90))
    holoCreate(3,holoEntity(1):toWorld(vec(-4,32,0)))
    holoModel(3,"models/hunter/plates/plate025.mdl")
    holoScale(3,vec(1,1,1))
    holoMaterial(3,"models/props_canal/canal_bridge_railing_01b")
    holoAng(3,ang(-45,0,90))
    #-
    holoCreate(4,E:toWorld(vec(0,-30,15)))
    holoModel(4,"models/hunter/plates/plate125.mdl")
    holoScale(4,vec(1,1,1))
    holoMaterial(4,"models/props_canal/canal_bridge_railing_01b")
    holoAng(4,ang(0,0,90))
    
    holoCreate(5,holoEntity(4):toWorld(vec(4,32,0)))
    holoModel(5,"models/hunter/plates/plate025.mdl")
    holoScale(5,vec(1,1,1))
    holoMaterial(5,"models/props_canal/canal_bridge_railing_01b")
    holoAng(5,ang(45,0,90))
    holoCreate(6,holoEntity(4):toWorld(vec(-4,32,0)))
    holoModel(6,"models/hunter/plates/plate025.mdl")
    holoScale(6,vec(1,1,1))
    holoMaterial(6,"models/props_canal/canal_bridge_railing_01b")
    holoAng(6,ang(-45,0,90))
    
    
    Base = holoCreate(7,E:toWorld(vec(0,35,46)))
    holoModel(7,"models/props_c17/signpole001.mdl")
    holoScale(7,vec(0.7))
    holoMaterial(7,"models/XQM//Deg360")
    holoAng(7,ang(0,0,90))
    
    #holoCreate(8)
    #holoScale(8,vec(2))
    

    function number checkCoo(Ent:entity) {
        return (!Coo1:isValid() | !Coo2:isValid() | !Coo3:isValid()) & (Coo1!=Ent & Coo2!=Ent & Coo3!=Ent )
    }
    function number addCoo(Ent:entity) {
        if     (!Coo1:isValid()) { Coo1 = Ent timer("1", CookieDelay) return 1}
        elseif (!Coo2:isValid()) { Coo2 = Ent timer("2", CookieDelay) return 1}
        elseif (!Coo3:isValid()) { Coo3 = Ent timer("3", CookieDelay) return 1}
        return 0
    }
    #[function entity releaseCoo(Ent:entity) {
        if     (Coo3:isValid()) { local Temp=Coo1 Coo1 = noentity() return Temp }
        elseif (Coo2:isValid()) { local Temp=Coo2 Coo2 = noentity() return Temp }
        elseif (Coo1:isValid()) { local Temp=Coo3 Coo3 = noentity() return Temp }
        return noentity()
    }]#
    function number releaseCoo(Ent:entity) {
        if     (Coo1==Ent) { local Temp=Coo1 Coo1 = noentity() return 1 }
        elseif (Coo2==Ent) { local Temp=Coo2 Coo2 = noentity() return 1 }
        elseif (Coo3==Ent) { local Temp=Coo3 Coo3 = noentity() return 1 }
        return 0
    }
}

I = (I + 0.5) % 360

holoAng(7,ang(I*10,0,90))
findIncludeClass("prop")
findInBox(E:pos()+vec(5,35,43),E:pos()+vec(10,-35,49))
F=findToArray()


foreach (I, Ent:entity = F) {
    if (checkCoo(Ent)) {
        findExcludeEntity(Ent)
        printTable(F)
        addCoo(Ent)
        Ar:pushEntity(Ent)
    }
}

Coo1:setPos(Base:pos()-vec(0,15,0))
Coo2:setPos(Base:pos()-vec(0,35,0))
Coo3:setPos(Base:pos()-vec(0,55,0))

Coo1:setAng(ang(I*10,0,90))
Coo2:setAng(ang(I*10,0,90))
Coo3:setAng(ang(I*10,0,90))

Coo1:propFreeze(1)
Coo2:propFreeze(1)
Coo3:propFreeze(1)



if(changed(clk("1"))&clk("1")){
    Coo1:setMaterial("models/antlion/antlion_innards")
    Coo1:propFreeze(0)
    releaseCoo(Coo1)
}
if(changed(clk("2"))&clk("2")){
    Coo2:setMaterial("models/antlion/antlion_innards")
    Coo2:propFreeze(0)
    releaseCoo(Coo2)
}
if(changed(clk("3"))&clk("3")){
    Coo3:setMaterial("models/antlion/antlion_innards")
    Coo3:propFreeze(0)
    releaseCoo(Coo3)
}
