@name RT_camera secure
@inputs RT:entity StartAng:angle
@outputs 
@persist [O E]:entity Distance ON I Rev Speed Limit_angle
@persist OldKey:string KeyOn

if (first() | dupefinished()) {
    O = owner() E = entity()
    runOnKeys(O, 1)
    Distance = 200
    Speed = 1
    Limit_angle = 45
    
    findByClass("gmod_rtcameraprop")
    RT = findClosest(E:pos())
    print(RT)
    
    function sound_apply() {
        RT:soundPlay(20, 0.3, "buttons/button9.wav")
    }
    function sound_denied() {
        RT:soundPlay(20, 0.697, "buttons/button2.wav")
    }
    function void log_ang(Ang:angle) {
        printColor(vec(255,0,255), format("%.6f, %.6f, %.6f", Ang:pitch(), Ang:yaw(), Ang:roll()))
    }
    function number check_key(Key:string) {
        if (!KeyOn & O:keyPressed(Key)) {
            KeyOn = 1
            OldKey = ""
        }
        if (KeyOn & O:keyPressed(Key) & OldKey != Key) {
            OldKey = Key
            return 1
        } elseif (!O:keyPressed(Key)) {
            KeyOn = 0
        }
        
        return 0
    }
}

interval(100)

if ( O:aimEntity() == RT & O:shootPos():distance(RT:pos()) < Distance) {
    if (check_key("g")) {
        ON = !ON
        if (!ON) {
            RT:setAng(StartAng)
            Rev = 0
            I = 0
        }
        sound_apply()
    }
    
    if (check_key("t")) {
        #StartAng = RT:angles()
        log_ang(RT:angles())
        sound_apply()
    }
}


if (ON) {
    I = (Rev ? I-Speed : I+Speed)
    if (I > Limit_angle) { Rev = 1 }
    elseif (I < 0) { Rev = 0 }
    
    RT:setAng(StartAng + ang(0, I, 0))
}
