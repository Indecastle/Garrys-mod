@name WH Props
@inputs WW:wirelink
@persist EI I [Props OP]:table O:entity C:string W:wirelink
@model models/cheeze/wires/nano_compare.mdl
if(dupefinished() | duped()) { selfDestructAll() }
if(first() | duped() | dupefinished()) {
    W = entity():isWeldedTo():wirelink()
}
if ((->WW|W)&(first()|dupefinished()|changed(->WW)|changed(W))){   entity():setMaterial("Models/effects/vol_light001") entity():propStatic(1) entity():propNotSolid(1) entity():propFreeze(1) entity():isWeldedTo():propStatic(1)
    if(->WW) { W = WW }
    W:egpClear()
    timer("scan",10)
}
if (clk("scan")){
    O = owner()
    C=toChar(34) # "
    findIncludeClass("prop*")
    findExcludeClass("gmod_wire_hologram")
    findInSphere(owner():pos(),150)
    Props=findToTable()
    if (Props:count()!=OP:count()){
        I=0
        EI=0
        timer("egp",100)
    }
    OP=Props
    timer("scan",100)
}
if (clk("egp")&(I<Props:count())){
    if (clk("egp")&!I){W:egpClear()}
    I++
    P=Props[I,entity]
    
    EI++
    W:egp3DTracker(EI,vec(0,0,0))
    W:egpParent(EI,P)

        if(Props[I,entity]:owner():isAdmin()){
            EI++
            W:egpBox(EI,vec2(0,0),vec2(10,10))
            W:egpColor(EI,vec4(255,0,255,100))
            W:egpPos(EI,W:egpPos(EI-1))
            W:egpParent(EI,EI-1)
        }elseif(Props[I,entity]:owner() == owner()){
            EI++
            W:egpBox(EI,vec2(0,0),vec2(10,10))
            W:egpColor(EI,vec4(255,255,255,100))
            W:egpPos(EI,W:egpPos(EI-1))
            W:egpParent(EI,EI-1)
        }else{
            EI++
            W:egpBox(EI,vec2(0,0),vec2(10,10))
            W:egpColor(EI,vec4(255,255,0,100))
            W:egpPos(EI,W:egpPos(EI-1))
            W:egpParent(EI,EI-1)
        }
    
    EI++
    W:egpText(EI,"class: " + C+Props[I,entity]:type()+C ,vec2(-10,0)) W:egpSize(EI,13)
    W:egpText(EI+Props:count()*5, "",vec2(-10,10))                      W:egpSize(EI+Props:count()*5,13)
    #W:egpText(EI+Props:count()*3,Props[I,entity]:name() ,vec2(-10,30))
    W:egpParent(EI,EI-2)
    W:egpParent(EI+Props:count()*5,EI-2)
    timer("egp",10)
    if(I>=Props:count()) { timer("distance",5) }
}

if(clk("distance"))
{
    for(J=1, Props:count())
    {
        Dist = O:pos():distance(Props[J,entity]:pos())/100
        #W:egpSetText(J*3,Props[J,entity]:name() + " " + Props[J,entity]:health() + "hp")
        W:egpSetText(J*3+Props:count()*5,"id: " + Props[J,entity]:id():toString())
        
    }
    timer("distance",50)
}
