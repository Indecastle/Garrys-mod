@name HUD Props auto
@inputs WW:wirelink
@persist EI I J [Players OP]:table O:entity W:wirelink
@model models/cheeze/wires/nano_compare.mdl
if(dupefinished() | duped()) { selfDestructAll() }
if(first()) {
    W = entity():isWeldedTo():wirelink()["wirelink",wirelink]
}
if ((->WW|W)&(first()|dupefinished()|changed(->WW)|changed(W))){   entity():setMaterial("Models/effects/vol_light001") entity():propStatic(1) entity():propNotSolid(1) entity():propFreeze(1) entity():isWeldedTo():propStatic(1)
    if(->WW) { W = WW }
    W:egpClear()
    timer("scan",10)
}
if (clk("scan")){
    O = owner()
    if(findCanQuery()) {
        findByClass("player")
        Players=findToTable()
        if (Players:count()!=OP:count()){
            I=0
            EI=0
            J=0
            timer("egp",5)
        }
        OP=Players
    }
    timer("scan",500)
}
if (clk("egp")&(I<Players:count())){
    if (clk("egp")&!I){W:egpClear()}
    I++
    P=Players[I,entity]
    
    EI++
    W:egpText(EI, "", vec2(5,200+15*(EI-1)))
    W:egpSize(EI,13)
    

    timer("egp",5)
    if(I>=Players:count()) { timer("distance",100) }
}

if(clk("distance"))
{
    if(findCanQuery()) {
        J++
        if(J>Players:count()) {J=1}
        
        findByClass("*prop*")
        findByClass("*item*")
        findClipToPlayerProps(Players[J,entity])
        W:egpSetText(J,Players[J,entity]:name()+", props: "+findSortByDistance(Players[J,entity]:pos()))
    }
    timer("distance",100)
    
}
#print(findCount())
entity():setAlpha(255)
